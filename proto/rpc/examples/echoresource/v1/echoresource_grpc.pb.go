// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// EchoResourceServiceClient is the client API for EchoResourceService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type EchoResourceServiceClient interface {
	EchoResource(ctx context.Context, in *EchoResourceRequest, opts ...grpc.CallOption) (*EchoResourceResponse, error)
	EchoResourceMultiple(ctx context.Context, in *EchoResourceMultipleRequest, opts ...grpc.CallOption) (EchoResourceService_EchoResourceMultipleClient, error)
	EchoResourceBiDi(ctx context.Context, opts ...grpc.CallOption) (EchoResourceService_EchoResourceBiDiClient, error)
}

type echoResourceServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewEchoResourceServiceClient(cc grpc.ClientConnInterface) EchoResourceServiceClient {
	return &echoResourceServiceClient{cc}
}

func (c *echoResourceServiceClient) EchoResource(ctx context.Context, in *EchoResourceRequest, opts ...grpc.CallOption) (*EchoResourceResponse, error) {
	out := new(EchoResourceResponse)
	err := c.cc.Invoke(ctx, "/proto.rpc.examples.echoresource.v1.EchoResourceService/EchoResource", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *echoResourceServiceClient) EchoResourceMultiple(ctx context.Context, in *EchoResourceMultipleRequest, opts ...grpc.CallOption) (EchoResourceService_EchoResourceMultipleClient, error) {
	stream, err := c.cc.NewStream(ctx, &EchoResourceService_ServiceDesc.Streams[0], "/proto.rpc.examples.echoresource.v1.EchoResourceService/EchoResourceMultiple", opts...)
	if err != nil {
		return nil, err
	}
	x := &echoResourceServiceEchoResourceMultipleClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type EchoResourceService_EchoResourceMultipleClient interface {
	Recv() (*EchoResourceMultipleResponse, error)
	grpc.ClientStream
}

type echoResourceServiceEchoResourceMultipleClient struct {
	grpc.ClientStream
}

func (x *echoResourceServiceEchoResourceMultipleClient) Recv() (*EchoResourceMultipleResponse, error) {
	m := new(EchoResourceMultipleResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *echoResourceServiceClient) EchoResourceBiDi(ctx context.Context, opts ...grpc.CallOption) (EchoResourceService_EchoResourceBiDiClient, error) {
	stream, err := c.cc.NewStream(ctx, &EchoResourceService_ServiceDesc.Streams[1], "/proto.rpc.examples.echoresource.v1.EchoResourceService/EchoResourceBiDi", opts...)
	if err != nil {
		return nil, err
	}
	x := &echoResourceServiceEchoResourceBiDiClient{stream}
	return x, nil
}

type EchoResourceService_EchoResourceBiDiClient interface {
	Send(*EchoResourceBiDiRequest) error
	Recv() (*EchoResourceBiDiResponse, error)
	grpc.ClientStream
}

type echoResourceServiceEchoResourceBiDiClient struct {
	grpc.ClientStream
}

func (x *echoResourceServiceEchoResourceBiDiClient) Send(m *EchoResourceBiDiRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *echoResourceServiceEchoResourceBiDiClient) Recv() (*EchoResourceBiDiResponse, error) {
	m := new(EchoResourceBiDiResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// EchoResourceServiceServer is the server API for EchoResourceService service.
// All implementations must embed UnimplementedEchoResourceServiceServer
// for forward compatibility
type EchoResourceServiceServer interface {
	EchoResource(context.Context, *EchoResourceRequest) (*EchoResourceResponse, error)
	EchoResourceMultiple(*EchoResourceMultipleRequest, EchoResourceService_EchoResourceMultipleServer) error
	EchoResourceBiDi(EchoResourceService_EchoResourceBiDiServer) error
	mustEmbedUnimplementedEchoResourceServiceServer()
}

// UnimplementedEchoResourceServiceServer must be embedded to have forward compatible implementations.
type UnimplementedEchoResourceServiceServer struct {
}

func (UnimplementedEchoResourceServiceServer) EchoResource(context.Context, *EchoResourceRequest) (*EchoResourceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EchoResource not implemented")
}
func (UnimplementedEchoResourceServiceServer) EchoResourceMultiple(*EchoResourceMultipleRequest, EchoResourceService_EchoResourceMultipleServer) error {
	return status.Errorf(codes.Unimplemented, "method EchoResourceMultiple not implemented")
}
func (UnimplementedEchoResourceServiceServer) EchoResourceBiDi(EchoResourceService_EchoResourceBiDiServer) error {
	return status.Errorf(codes.Unimplemented, "method EchoResourceBiDi not implemented")
}
func (UnimplementedEchoResourceServiceServer) mustEmbedUnimplementedEchoResourceServiceServer() {}

// UnsafeEchoResourceServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to EchoResourceServiceServer will
// result in compilation errors.
type UnsafeEchoResourceServiceServer interface {
	mustEmbedUnimplementedEchoResourceServiceServer()
}

func RegisterEchoResourceServiceServer(s grpc.ServiceRegistrar, srv EchoResourceServiceServer) {
	s.RegisterService(&EchoResourceService_ServiceDesc, srv)
}

func _EchoResourceService_EchoResource_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EchoResourceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EchoResourceServiceServer).EchoResource(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.rpc.examples.echoresource.v1.EchoResourceService/EchoResource",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EchoResourceServiceServer).EchoResource(ctx, req.(*EchoResourceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EchoResourceService_EchoResourceMultiple_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(EchoResourceMultipleRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(EchoResourceServiceServer).EchoResourceMultiple(m, &echoResourceServiceEchoResourceMultipleServer{stream})
}

type EchoResourceService_EchoResourceMultipleServer interface {
	Send(*EchoResourceMultipleResponse) error
	grpc.ServerStream
}

type echoResourceServiceEchoResourceMultipleServer struct {
	grpc.ServerStream
}

func (x *echoResourceServiceEchoResourceMultipleServer) Send(m *EchoResourceMultipleResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _EchoResourceService_EchoResourceBiDi_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(EchoResourceServiceServer).EchoResourceBiDi(&echoResourceServiceEchoResourceBiDiServer{stream})
}

type EchoResourceService_EchoResourceBiDiServer interface {
	Send(*EchoResourceBiDiResponse) error
	Recv() (*EchoResourceBiDiRequest, error)
	grpc.ServerStream
}

type echoResourceServiceEchoResourceBiDiServer struct {
	grpc.ServerStream
}

func (x *echoResourceServiceEchoResourceBiDiServer) Send(m *EchoResourceBiDiResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *echoResourceServiceEchoResourceBiDiServer) Recv() (*EchoResourceBiDiRequest, error) {
	m := new(EchoResourceBiDiRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// EchoResourceService_ServiceDesc is the grpc.ServiceDesc for EchoResourceService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var EchoResourceService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "proto.rpc.examples.echoresource.v1.EchoResourceService",
	HandlerType: (*EchoResourceServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "EchoResource",
			Handler:    _EchoResourceService_EchoResource_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "EchoResourceMultiple",
			Handler:       _EchoResourceService_EchoResourceMultiple_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "EchoResourceBiDi",
			Handler:       _EchoResourceService_EchoResourceBiDi_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "proto/rpc/examples/echoresource/v1/echoresource.proto",
}
