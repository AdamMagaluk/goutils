syntax = "proto3";
option go_package = "go.viam.com/utils/proto/rpc/webrtc/v1";

package proto.rpc.webrtc.v1;

import "google/api/annotations.proto";
import "google/rpc/status.proto";

// A SignalingService provides the means to have one client "call" another
// client using the Session Description Protocol (SDP).
service SignalingService {
	// Call makes an offer to a client that it expects an answer to. It is
	// assumed that the service is hosted solely for a specific client. That is,
	// every client has its own signaling service identified by its hostname
	// and in the case of TLS being used, SNI.
	rpc Call(CallRequest) returns (CallResponse) {
		option (google.api.http) = {
			post: "/rpc/webrtc/v1/call"
		};
	}

	// Answer sets up an answering service where the caller answers call offers
	// and responds with answers.
	rpc Answer(stream AnswerResponse) returns (stream AnswerRequest);
}

// CallRequest is the SDP offer that the controlling side is making.
message CallRequest {
	string sdp = 1;
}

// CallResponse is the SDP answer that the controlled side responds with.
message CallResponse {
	string sdp = 1;
}

// ICEServer describes an ICE server.
message ICEServer {
	repeated string urls = 1;
	string username = 2;
	string credential = 3;
}

// AnswerRequest is the SDP offer that the controlling side is making via the answering
// stream.
message AnswerRequest {
	string sdp = 1;
	repeated ICEServer additional_ice_servers = 2;
}

// AnswerResponse is the SDP answer that an answerer responds with.
message AnswerResponse {
	google.rpc.Status status = 1;	
	string sdp = 2;
}

