!function(e,t){"object"==typeof exports&&"object"==typeof module?module.exports=t():"function"==typeof define&&define.amd?define([],t):"object"==typeof exports?exports.rpc=t():e.rpc=t()}(window,(function(){return function(e){var t={};function o(r){if(t[r])return t[r].exports;var n=t[r]={i:r,l:!1,exports:{}};return e[r].call(n.exports,n,n.exports,o),n.l=!0,n.exports}return o.m=e,o.c=t,o.d=function(e,t,r){o.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:r})},o.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},o.t=function(e,t){if(1&t&&(e=o(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var r=Object.create(null);if(o.r(r),Object.defineProperty(r,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var n in e)o.d(r,n,function(t){return e[t]}.bind(null,n));return r},o.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return o.d(t,"a",t),t},o.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},o.p="",o(o.s=8)}([function(module,exports,__webpack_require__){(function(global,Buffer){var $jscomp=$jscomp||{};$jscomp.scope={},$jscomp.findInternal=function(e,t,o){e instanceof String&&(e=String(e));for(var r=e.length,n=0;n<r;n++){var i=e[n];if(t.call(o,i,n,e))return{i:n,v:i}}return{i:-1,v:void 0}},$jscomp.ASSUME_ES5=!1,$jscomp.ASSUME_NO_NATIVE_MAP=!1,$jscomp.ASSUME_NO_NATIVE_SET=!1,$jscomp.SIMPLE_FROUND_POLYFILL=!1,$jscomp.defineProperty=$jscomp.ASSUME_ES5||"function"==typeof Object.defineProperties?Object.defineProperty:function(e,t,o){e!=Array.prototype&&e!=Object.prototype&&(e[t]=o.value)},$jscomp.getGlobal=function(e){return"undefined"!=typeof window&&window===e?e:void 0!==global&&null!=global?global:e},$jscomp.global=$jscomp.getGlobal(this),$jscomp.polyfill=function(e,t,o,r){if(t){for(o=$jscomp.global,e=e.split("."),r=0;r<e.length-1;r++){var n=e[r];n in o||(o[n]={}),o=o[n]}(t=t(r=o[e=e[e.length-1]]))!=r&&null!=t&&$jscomp.defineProperty(o,e,{configurable:!0,writable:!0,value:t})}},$jscomp.polyfill("Array.prototype.findIndex",(function(e){return e||function(e,t){return $jscomp.findInternal(this,e,t).i}}),"es6","es3"),$jscomp.checkStringArgs=function(e,t,o){if(null==e)throw new TypeError("The 'this' value for String.prototype."+o+" must not be null or undefined");if(t instanceof RegExp)throw new TypeError("First argument to String.prototype."+o+" must not be a regular expression");return e+""},$jscomp.polyfill("String.prototype.endsWith",(function(e){return e||function(e,t){var o=$jscomp.checkStringArgs(this,e,"endsWith");e+="",void 0===t&&(t=o.length),t=Math.max(0,Math.min(0|t,o.length));for(var r=e.length;0<r&&0<t;)if(o[--t]!=e[--r])return!1;return 0>=r}}),"es6","es3"),$jscomp.polyfill("Array.prototype.find",(function(e){return e||function(e,t){return $jscomp.findInternal(this,e,t).v}}),"es6","es3"),$jscomp.polyfill("String.prototype.startsWith",(function(e){return e||function(e,t){var o=$jscomp.checkStringArgs(this,e,"startsWith");e+="";var r=o.length,n=e.length;t=Math.max(0,Math.min(0|t,o.length));for(var i=0;i<n&&t<r;)if(o[t++]!=e[i++])return!1;return i>=n}}),"es6","es3"),$jscomp.polyfill("String.prototype.repeat",(function(e){return e||function(e){var t=$jscomp.checkStringArgs(this,null,"repeat");if(0>e||1342177279<e)throw new RangeError("Invalid count value");e|=0;for(var o="";e;)1&e&&(o+=t),(e>>>=1)&&(t+=t);return o}}),"es6","es3");var COMPILED=!0,goog=goog||{};goog.global=this||self,goog.isDef=function(e){return void 0!==e},goog.isString=function(e){return"string"==typeof e},goog.isBoolean=function(e){return"boolean"==typeof e},goog.isNumber=function(e){return"number"==typeof e},goog.exportPath_=function(e,t,o){e=e.split("."),o=o||goog.global,e[0]in o||void 0===o.execScript||o.execScript("var "+e[0]);for(var r;e.length&&(r=e.shift());)!e.length&&goog.isDef(t)?o[r]=t:o=o[r]&&o[r]!==Object.prototype[r]?o[r]:o[r]={}},goog.define=function(e,t){if(!COMPILED){var o=goog.global.CLOSURE_UNCOMPILED_DEFINES,r=goog.global.CLOSURE_DEFINES;o&&void 0===o.nodeType&&Object.prototype.hasOwnProperty.call(o,e)?t=o[e]:r&&void 0===r.nodeType&&Object.prototype.hasOwnProperty.call(r,e)&&(t=r[e])}return t},goog.FEATURESET_YEAR=2012,goog.DEBUG=!0,goog.LOCALE="en",goog.TRUSTED_SITE=!0,goog.STRICT_MODE_COMPATIBLE=!1,goog.DISALLOW_TEST_ONLY_CODE=COMPILED&&!goog.DEBUG,goog.ENABLE_CHROME_APP_SAFE_SCRIPT_LOADING=!1,goog.provide=function(e){if(goog.isInModuleLoader_())throw Error("goog.provide cannot be used within a module.");if(!COMPILED&&goog.isProvided_(e))throw Error('Namespace "'+e+'" already declared.');goog.constructNamespace_(e)},goog.constructNamespace_=function(e,t){if(!COMPILED){delete goog.implicitNamespaces_[e];for(var o=e;(o=o.substring(0,o.lastIndexOf(".")))&&!goog.getObjectByName(o);)goog.implicitNamespaces_[o]=!0}goog.exportPath_(e,t)},goog.getScriptNonce=function(e){return e&&e!=goog.global?goog.getScriptNonce_(e.document):(null===goog.cspNonce_&&(goog.cspNonce_=goog.getScriptNonce_(goog.global.document)),goog.cspNonce_)},goog.NONCE_PATTERN_=/^[\w+/_-]+[=]{0,2}$/,goog.cspNonce_=null,goog.getScriptNonce_=function(e){return(e=e.querySelector&&e.querySelector("script[nonce]"))&&(e=e.nonce||e.getAttribute("nonce"))&&goog.NONCE_PATTERN_.test(e)?e:""},goog.VALID_MODULE_RE_=/^[a-zA-Z_$][a-zA-Z0-9._$]*$/,goog.module=function(e){if(!goog.isString(e)||!e||-1==e.search(goog.VALID_MODULE_RE_))throw Error("Invalid module identifier");if(!goog.isInGoogModuleLoader_())throw Error("Module "+e+" has been loaded incorrectly. Note, modules cannot be loaded as normal scripts. They require some kind of pre-processing step. You're likely trying to load a module via a script tag or as a part of a concatenated bundle without rewriting the module. For more info see: https://github.com/google/closure-library/wiki/goog.module:-an-ES6-module-like-alternative-to-goog.provide.");if(goog.moduleLoaderState_.moduleName)throw Error("goog.module may only be called once per module.");if(goog.moduleLoaderState_.moduleName=e,!COMPILED){if(goog.isProvided_(e))throw Error('Namespace "'+e+'" already declared.');delete goog.implicitNamespaces_[e]}},goog.module.get=function(e){return goog.module.getInternal_(e)},goog.module.getInternal_=function(e){if(!COMPILED){if(e in goog.loadedModules_)return goog.loadedModules_[e].exports;if(!goog.implicitNamespaces_[e])return null!=(e=goog.getObjectByName(e))?e:null}return null},goog.ModuleType={ES6:"es6",GOOG:"goog"},goog.moduleLoaderState_=null,goog.isInModuleLoader_=function(){return goog.isInGoogModuleLoader_()||goog.isInEs6ModuleLoader_()},goog.isInGoogModuleLoader_=function(){return!!goog.moduleLoaderState_&&goog.moduleLoaderState_.type==goog.ModuleType.GOOG},goog.isInEs6ModuleLoader_=function(){if(goog.moduleLoaderState_&&goog.moduleLoaderState_.type==goog.ModuleType.ES6)return!0;var e=goog.global.$jscomp;return!!e&&("function"==typeof e.getCurrentModulePath&&!!e.getCurrentModulePath())},goog.module.declareLegacyNamespace=function(){if(!COMPILED&&!goog.isInGoogModuleLoader_())throw Error("goog.module.declareLegacyNamespace must be called from within a goog.module");if(!COMPILED&&!goog.moduleLoaderState_.moduleName)throw Error("goog.module must be called prior to goog.module.declareLegacyNamespace.");goog.moduleLoaderState_.declareLegacyNamespace=!0},goog.declareModuleId=function(e){if(!COMPILED){if(!goog.isInEs6ModuleLoader_())throw Error("goog.declareModuleId may only be called from within an ES6 module");if(goog.moduleLoaderState_&&goog.moduleLoaderState_.moduleName)throw Error("goog.declareModuleId may only be called once per module.");if(e in goog.loadedModules_)throw Error('Module with namespace "'+e+'" already exists.')}if(goog.moduleLoaderState_)goog.moduleLoaderState_.moduleName=e;else{var t=goog.global.$jscomp;if(!t||"function"!=typeof t.getCurrentModulePath)throw Error('Module with namespace "'+e+'" has been loaded incorrectly.');t=t.require(t.getCurrentModulePath()),goog.loadedModules_[e]={exports:t,type:goog.ModuleType.ES6,moduleId:e}}},goog.setTestOnly=function(e){if(goog.DISALLOW_TEST_ONLY_CODE)throw e=e||"",Error("Importing test-only code into non-debug environment"+(e?": "+e:"."))},goog.forwardDeclare=function(e){},COMPILED||(goog.isProvided_=function(e){return e in goog.loadedModules_||!goog.implicitNamespaces_[e]&&goog.isDefAndNotNull(goog.getObjectByName(e))},goog.implicitNamespaces_={"goog.module":!0}),goog.getObjectByName=function(e,t){e=e.split("."),t=t||goog.global;for(var o=0;o<e.length;o++)if(t=t[e[o]],!goog.isDefAndNotNull(t))return null;return t},goog.globalize=function(e,t){for(var o in t=t||goog.global,e)t[o]=e[o]},goog.addDependency=function(e,t,o,r){!COMPILED&&goog.DEPENDENCIES_ENABLED&&goog.debugLoader_.addDependency(e,t,o,r)},goog.ENABLE_DEBUG_LOADER=!0,goog.logToConsole_=function(e){goog.global.console&&goog.global.console.error(e)},goog.require=function(e){if(!COMPILED){if(goog.ENABLE_DEBUG_LOADER&&goog.debugLoader_.requested(e),goog.isProvided_(e)){if(goog.isInModuleLoader_())return goog.module.getInternal_(e)}else if(goog.ENABLE_DEBUG_LOADER){var t=goog.moduleLoaderState_;goog.moduleLoaderState_=null;try{goog.debugLoader_.load_(e)}finally{goog.moduleLoaderState_=t}}return null}},goog.requireType=function(e){return{}},goog.basePath="",goog.nullFunction=function(){},goog.abstractMethod=function(){throw Error("unimplemented abstract method")},goog.addSingletonGetter=function(e){e.instance_=void 0,e.getInstance=function(){return e.instance_?e.instance_:(goog.DEBUG&&(goog.instantiatedSingletons_[goog.instantiatedSingletons_.length]=e),e.instance_=new e)}},goog.instantiatedSingletons_=[],goog.LOAD_MODULE_USING_EVAL=!0,goog.SEAL_MODULE_EXPORTS=goog.DEBUG,goog.loadedModules_={},goog.DEPENDENCIES_ENABLED=!COMPILED&&goog.ENABLE_DEBUG_LOADER,goog.TRANSPILE="detect",goog.ASSUME_ES_MODULES_TRANSPILED=!1,goog.TRANSPILE_TO_LANGUAGE="",goog.TRANSPILER="transpile.js",goog.hasBadLetScoping=null,goog.useSafari10Workaround=function(){if(null==goog.hasBadLetScoping){try{var a=!eval('"use strict";let x = 1; function f() { return typeof x; };f() == "number";')}catch(e){a=!1}goog.hasBadLetScoping=a}return goog.hasBadLetScoping},goog.workaroundSafari10EvalBug=function(e){return"(function(){"+e+"\n;})();\n"},goog.loadModule=function(e){var t=goog.moduleLoaderState_;try{if(goog.moduleLoaderState_={moduleName:"",declareLegacyNamespace:!1,type:goog.ModuleType.GOOG},goog.isFunction(e))var o=e.call(void 0,{});else{if(!goog.isString(e))throw Error("Invalid module definition");goog.useSafari10Workaround()&&(e=goog.workaroundSafari10EvalBug(e)),o=goog.loadModuleFromSource_.call(void 0,e)}var r=goog.moduleLoaderState_.moduleName;if(!goog.isString(r)||!r)throw Error('Invalid module name "'+r+'"');goog.moduleLoaderState_.declareLegacyNamespace?goog.constructNamespace_(r,o):goog.SEAL_MODULE_EXPORTS&&Object.seal&&"object"==typeof o&&null!=o&&Object.seal(o),goog.loadedModules_[r]={exports:o,type:goog.ModuleType.GOOG,moduleId:goog.moduleLoaderState_.moduleName}}finally{goog.moduleLoaderState_=t}},goog.loadModuleFromSource_=function(a){return eval(a),{}},goog.normalizePath_=function(e){e=e.split("/");for(var t=0;t<e.length;)"."==e[t]?e.splice(t,1):t&&".."==e[t]&&e[t-1]&&".."!=e[t-1]?e.splice(--t,2):t++;return e.join("/")},goog.loadFileSync_=function(e){if(goog.global.CLOSURE_LOAD_FILE_SYNC)return goog.global.CLOSURE_LOAD_FILE_SYNC(e);try{var t=new goog.global.XMLHttpRequest;return t.open("get",e,!1),t.send(),0==t.status||200==t.status?t.responseText:null}catch(e){return null}},goog.transpile_=function(e,t,o){var r=goog.global.$jscomp;r||(goog.global.$jscomp=r={});var n=r.transpile;if(!n){var i=goog.basePath+goog.TRANSPILER,s=goog.loadFileSync_(i);if(s){if(function(){(0,eval)(s+"\n//# sourceURL="+i)}.call(goog.global),goog.global.$gwtExport&&goog.global.$gwtExport.$jscomp&&!goog.global.$gwtExport.$jscomp.transpile)throw Error('The transpiler did not properly export the "transpile" method. $gwtExport: '+JSON.stringify(goog.global.$gwtExport));goog.global.$jscomp.transpile=goog.global.$gwtExport.$jscomp.transpile,n=(r=goog.global.$jscomp).transpile}}return n||(n=r.transpile=function(e,t){return goog.logToConsole_(t+" requires transpilation but no transpiler was found."),e}),n(e,t,o)},goog.typeOf=function(e){var t=typeof e;if("object"==t){if(!e)return"null";if(e instanceof Array)return"array";if(e instanceof Object)return t;var o=Object.prototype.toString.call(e);if("[object Window]"==o)return"object";if("[object Array]"==o||"number"==typeof e.length&&void 0!==e.splice&&void 0!==e.propertyIsEnumerable&&!e.propertyIsEnumerable("splice"))return"array";if("[object Function]"==o||void 0!==e.call&&void 0!==e.propertyIsEnumerable&&!e.propertyIsEnumerable("call"))return"function"}else if("function"==t&&void 0===e.call)return"object";return t},goog.isNull=function(e){return null===e},goog.isDefAndNotNull=function(e){return null!=e},goog.isArray=function(e){return"array"==goog.typeOf(e)},goog.isArrayLike=function(e){var t=goog.typeOf(e);return"array"==t||"object"==t&&"number"==typeof e.length},goog.isDateLike=function(e){return goog.isObject(e)&&"function"==typeof e.getFullYear},goog.isFunction=function(e){return"function"==goog.typeOf(e)},goog.isObject=function(e){var t=typeof e;return"object"==t&&null!=e||"function"==t},goog.getUid=function(e){return e[goog.UID_PROPERTY_]||(e[goog.UID_PROPERTY_]=++goog.uidCounter_)},goog.hasUid=function(e){return!!e[goog.UID_PROPERTY_]},goog.removeUid=function(e){null!==e&&"removeAttribute"in e&&e.removeAttribute(goog.UID_PROPERTY_);try{delete e[goog.UID_PROPERTY_]}catch(e){}},goog.UID_PROPERTY_="closure_uid_"+(1e9*Math.random()>>>0),goog.uidCounter_=0,goog.getHashCode=goog.getUid,goog.removeHashCode=goog.removeUid,goog.cloneObject=function(e){var t=goog.typeOf(e);if("object"==t||"array"==t){if("function"==typeof e.clone)return e.clone();for(var o in t="array"==t?[]:{},e)t[o]=goog.cloneObject(e[o]);return t}return e},goog.bindNative_=function(e,t,o){return e.call.apply(e.bind,arguments)},goog.bindJs_=function(e,t,o){if(!e)throw Error();if(2<arguments.length){var r=Array.prototype.slice.call(arguments,2);return function(){var o=Array.prototype.slice.call(arguments);return Array.prototype.unshift.apply(o,r),e.apply(t,o)}}return function(){return e.apply(t,arguments)}},goog.bind=function(e,t,o){return Function.prototype.bind&&-1!=Function.prototype.bind.toString().indexOf("native code")?goog.bind=goog.bindNative_:goog.bind=goog.bindJs_,goog.bind.apply(null,arguments)},goog.partial=function(e,t){var o=Array.prototype.slice.call(arguments,1);return function(){var t=o.slice();return t.push.apply(t,arguments),e.apply(this,t)}},goog.mixin=function(e,t){for(var o in t)e[o]=t[o]},goog.now=goog.TRUSTED_SITE&&Date.now||function(){return+new Date},goog.globalEval=function(e){if(goog.global.execScript)goog.global.execScript(e,"JavaScript");else{if(!goog.global.eval)throw Error("goog.globalEval not available");if(null==goog.evalWorksForGlobals_){try{goog.global.eval("var _evalTest_ = 1;")}catch(e){}if(void 0!==goog.global._evalTest_){try{delete goog.global._evalTest_}catch(e){}goog.evalWorksForGlobals_=!0}else goog.evalWorksForGlobals_=!1}if(goog.evalWorksForGlobals_)goog.global.eval(e);else{var t=goog.global.document,o=t.createElement("SCRIPT");o.type="text/javascript",o.defer=!1,o.appendChild(t.createTextNode(e)),t.head.appendChild(o),t.head.removeChild(o)}}},goog.evalWorksForGlobals_=null,goog.getCssName=function(e,t){if("."==String(e).charAt(0))throw Error('className passed in goog.getCssName must not start with ".". You passed: '+e);var o=function(e){return goog.cssNameMapping_[e]||e},r=function(e){e=e.split("-");for(var t=[],r=0;r<e.length;r++)t.push(o(e[r]));return t.join("-")};return r=goog.cssNameMapping_?"BY_WHOLE"==goog.cssNameMappingStyle_?o:r:function(e){return e},e=t?e+"-"+r(t):r(e),goog.global.CLOSURE_CSS_NAME_MAP_FN?goog.global.CLOSURE_CSS_NAME_MAP_FN(e):e},goog.setCssNameMapping=function(e,t){goog.cssNameMapping_=e,goog.cssNameMappingStyle_=t},!COMPILED&&goog.global.CLOSURE_CSS_NAME_MAPPING&&(goog.cssNameMapping_=goog.global.CLOSURE_CSS_NAME_MAPPING),goog.getMsg=function(e,t,o){return o&&o.html&&(e=e.replace(/</g,"&lt;")),t&&(e=e.replace(/\{\$([^}]+)}/g,(function(e,o){return null!=t&&o in t?t[o]:e}))),e},goog.getMsgWithFallback=function(e,t){return e},goog.exportSymbol=function(e,t,o){goog.exportPath_(e,t,o)},goog.exportProperty=function(e,t,o){e[t]=o},goog.inherits=function(e,t){function o(){}o.prototype=t.prototype,e.superClass_=t.prototype,e.prototype=new o,e.prototype.constructor=e,e.base=function(e,o,r){for(var n=Array(arguments.length-2),i=2;i<arguments.length;i++)n[i-2]=arguments[i];return t.prototype[o].apply(e,n)}},goog.base=function(e,t,o){var r=arguments.callee.caller;if(goog.STRICT_MODE_COMPATIBLE||goog.DEBUG&&!r)throw Error("arguments.caller not defined.  goog.base() cannot be used with strict mode code. See http://www.ecma-international.org/ecma-262/5.1/#sec-C");if(void 0!==r.superClass_){for(var n=Array(arguments.length-1),i=1;i<arguments.length;i++)n[i-1]=arguments[i];return r.superClass_.constructor.apply(e,n)}if("string"!=typeof t&&"symbol"!=typeof t)throw Error("method names provided to goog.base must be a string or a symbol");for(n=Array(arguments.length-2),i=2;i<arguments.length;i++)n[i-2]=arguments[i];i=!1;for(var s=e.constructor.prototype;s;s=Object.getPrototypeOf(s))if(s[t]===r)i=!0;else if(i)return s[t].apply(e,n);if(e[t]===r)return e.constructor.prototype[t].apply(e,n);throw Error("goog.base called from a method of one name to a method of a different name")},goog.scope=function(e){if(goog.isInModuleLoader_())throw Error("goog.scope is not supported within a module.");e.call(goog.global)},COMPILED||(goog.global.COMPILED=COMPILED),goog.defineClass=function(e,t){var o=t.constructor,r=t.statics;return o&&o!=Object.prototype.constructor||(o=function(){throw Error("cannot instantiate an interface (no constructor defined).")}),o=goog.defineClass.createSealingConstructor_(o,e),e&&goog.inherits(o,e),delete t.constructor,delete t.statics,goog.defineClass.applyProperties_(o.prototype,t),null!=r&&(r instanceof Function?r(o):goog.defineClass.applyProperties_(o,r)),o},goog.defineClass.SEAL_CLASS_INSTANCES=goog.DEBUG,goog.defineClass.createSealingConstructor_=function(e,t){if(!goog.defineClass.SEAL_CLASS_INSTANCES)return e;var o=!goog.defineClass.isUnsealable_(t),r=function(){var t=e.apply(this,arguments)||this;return t[goog.UID_PROPERTY_]=t[goog.UID_PROPERTY_],this.constructor===r&&o&&Object.seal instanceof Function&&Object.seal(t),t};return r},goog.defineClass.isUnsealable_=function(e){return e&&e.prototype&&e.prototype[goog.UNSEALABLE_CONSTRUCTOR_PROPERTY_]},goog.defineClass.OBJECT_PROTOTYPE_FIELDS_="constructor hasOwnProperty isPrototypeOf propertyIsEnumerable toLocaleString toString valueOf".split(" "),goog.defineClass.applyProperties_=function(e,t){for(var o in t)Object.prototype.hasOwnProperty.call(t,o)&&(e[o]=t[o]);for(var r=0;r<goog.defineClass.OBJECT_PROTOTYPE_FIELDS_.length;r++)o=goog.defineClass.OBJECT_PROTOTYPE_FIELDS_[r],Object.prototype.hasOwnProperty.call(t,o)&&(e[o]=t[o])},goog.tagUnsealableClass=function(e){!COMPILED&&goog.defineClass.SEAL_CLASS_INSTANCES&&(e.prototype[goog.UNSEALABLE_CONSTRUCTOR_PROPERTY_]=!0)},goog.UNSEALABLE_CONSTRUCTOR_PROPERTY_="goog_defineClass_legacy_unsealable",!COMPILED&&goog.DEPENDENCIES_ENABLED&&(goog.inHtmlDocument_=function(){var e=goog.global.document;return null!=e&&"write"in e},goog.isDocumentLoading_=function(){var e=goog.global.document;return e.attachEvent?"complete"!=e.readyState:"loading"==e.readyState},goog.findBasePath_=function(){if(goog.isDef(goog.global.CLOSURE_BASE_PATH)&&goog.isString(goog.global.CLOSURE_BASE_PATH))goog.basePath=goog.global.CLOSURE_BASE_PATH;else if(goog.inHtmlDocument_()){var e=goog.global.document,t=e.currentScript;for(t=(e=t?[t]:e.getElementsByTagName("SCRIPT")).length-1;0<=t;--t){var o=e[t].src,r=o.lastIndexOf("?");if(r=-1==r?o.length:r,"base.js"==o.substr(r-7,7)){goog.basePath=o.substr(0,r-7);break}}}},goog.findBasePath_(),goog.Transpiler=function(){this.requiresTranspilation_=null,this.transpilationTarget_=goog.TRANSPILE_TO_LANGUAGE},goog.Transpiler.prototype.createRequiresTranspilation_=function(){function a(t,o){e?d[t]=!0:o()?(c=t,d[t]=!1):e=d[t]=!0}function b(a){try{return!!eval(a)}catch(e){return!1}}var c="es3",d={es3:!1},e=!1,f=goog.global.navigator&&goog.global.navigator.userAgent?goog.global.navigator.userAgent:"";return a("es5",(function(){return b("[1,].length==1")})),a("es6",(function(){return!f.match(/Edge\/(\d+)(\.\d)*/i)&&b('(()=>{"use strict";class X{constructor(){if(new.target!=String)throw 1;this.x=42}}let q=Reflect.construct(X,[],String);if(q.x!=42||!(q instanceof String))throw 1;for(const a of[2,3]){if(a==2)continue;function f(z={a}){let a=0;return z.a}{function f(){return 0;}}return f()==3}})()')})),a("es7",(function(){return b("2 ** 2 == 4")})),a("es8",(function(){return b("async () => 1, true")})),a("es9",(function(){return b("({...rest} = {}), true")})),a("es_next",(function(){return!1})),{target:c,map:d}},goog.Transpiler.prototype.needsTranspile=function(e,t){if("always"==goog.TRANSPILE)return!0;if("never"==goog.TRANSPILE)return!1;if(!this.requiresTranspilation_){var o=this.createRequiresTranspilation_();this.requiresTranspilation_=o.map,this.transpilationTarget_=this.transpilationTarget_||o.target}if(e in this.requiresTranspilation_)return!!this.requiresTranspilation_[e]||!(!goog.inHtmlDocument_()||"es6"!=t||"noModule"in goog.global.document.createElement("script"));throw Error("Unknown language mode: "+e)},goog.Transpiler.prototype.transpile=function(e,t){return goog.transpile_(e,t,this.transpilationTarget_)},goog.transpiler_=new goog.Transpiler,goog.protectScriptTag_=function(e){return e.replace(/<\/(SCRIPT)/gi,"\\x3c/$1")},goog.DebugLoader_=function(){this.dependencies_={},this.idToPath_={},this.written_={},this.loadingDeps_=[],this.depsToLoad_=[],this.paused_=!1,this.factory_=new goog.DependencyFactory(goog.transpiler_),this.deferredCallbacks_={},this.deferredQueue_=[]},goog.DebugLoader_.prototype.bootstrap=function(e,t){function o(){r&&(goog.global.setTimeout(r,0),r=null)}var r=t;if(e.length){t=[];for(var n=0;n<e.length;n++){var i=this.getPathFromDeps_(e[n]);if(!i)throw Error("Unregonized namespace: "+e[n]);t.push(this.dependencies_[i])}i=goog.require;var s=0;for(n=0;n<e.length;n++)i(e[n]),t[n].onLoad((function(){++s==e.length&&o()}))}else o()},goog.DebugLoader_.prototype.loadClosureDeps=function(){this.depsToLoad_.push(this.factory_.createDependency(goog.normalizePath_(goog.basePath+"deps.js"),"deps.js",[],[],{},!1)),this.loadDeps_()},goog.DebugLoader_.prototype.requested=function(e,t){(e=this.getPathFromDeps_(e))&&(t||this.areDepsLoaded_(this.dependencies_[e].requires))&&(t=this.deferredCallbacks_[e])&&(delete this.deferredCallbacks_[e],t())},goog.DebugLoader_.prototype.setDependencyFactory=function(e){this.factory_=e},goog.DebugLoader_.prototype.load_=function(e){if(!this.getPathFromDeps_(e))throw e="goog.require could not find: "+e,goog.logToConsole_(e),Error(e);var t=this,o=[],r=function(e){var n=t.getPathFromDeps_(e);if(!n)throw Error("Bad dependency path or symbol: "+e);if(!t.written_[n]){for(t.written_[n]=!0,e=t.dependencies_[n],n=0;n<e.requires.length;n++)goog.isProvided_(e.requires[n])||r(e.requires[n]);o.push(e)}};r(e),e=!!this.depsToLoad_.length,this.depsToLoad_=this.depsToLoad_.concat(o),this.paused_||e||this.loadDeps_()},goog.DebugLoader_.prototype.loadDeps_=function(){for(var e=this,t=this.paused_;this.depsToLoad_.length&&!t;)!function(){var o=!1,r=e.depsToLoad_.shift(),n=!1;e.loading_(r);var i={pause:function(){if(o)throw Error("Cannot call pause after the call to load.");t=!0},resume:function(){o?e.resume_():t=!1},loaded:function(){if(n)throw Error("Double call to loaded.");n=!0,e.loaded_(r)},pending:function(){for(var t=[],o=0;o<e.loadingDeps_.length;o++)t.push(e.loadingDeps_[o]);return t},setModuleState:function(e){goog.moduleLoaderState_={type:e,moduleName:"",declareLegacyNamespace:!1}},registerEs6ModuleExports:function(e,t,o){o&&(goog.loadedModules_[o]={exports:t,type:goog.ModuleType.ES6,moduleId:o||""})},registerGoogModuleExports:function(e,t){goog.loadedModules_[e]={exports:t,type:goog.ModuleType.GOOG,moduleId:e}},clearModuleState:function(){goog.moduleLoaderState_=null},defer:function(t){if(o)throw Error("Cannot register with defer after the call to load.");e.defer_(r,t)},areDepsLoaded:function(){return e.areDepsLoaded_(r.requires)}};try{r.load(i)}finally{o=!0}}();t&&this.pause_()},goog.DebugLoader_.prototype.pause_=function(){this.paused_=!0},goog.DebugLoader_.prototype.resume_=function(){this.paused_&&(this.paused_=!1,this.loadDeps_())},goog.DebugLoader_.prototype.loading_=function(e){this.loadingDeps_.push(e)},goog.DebugLoader_.prototype.loaded_=function(e){for(var t=0;t<this.loadingDeps_.length;t++)if(this.loadingDeps_[t]==e){this.loadingDeps_.splice(t,1);break}for(t=0;t<this.deferredQueue_.length;t++)if(this.deferredQueue_[t]==e.path){this.deferredQueue_.splice(t,1);break}if(this.loadingDeps_.length==this.deferredQueue_.length&&!this.depsToLoad_.length)for(;this.deferredQueue_.length;)this.requested(this.deferredQueue_.shift(),!0);e.loaded()},goog.DebugLoader_.prototype.areDepsLoaded_=function(e){for(var t=0;t<e.length;t++){var o=this.getPathFromDeps_(e[t]);if(!o||!(o in this.deferredCallbacks_)&&!goog.isProvided_(e[t]))return!1}return!0},goog.DebugLoader_.prototype.getPathFromDeps_=function(e){return e in this.idToPath_?this.idToPath_[e]:e in this.dependencies_?e:null},goog.DebugLoader_.prototype.defer_=function(e,t){this.deferredCallbacks_[e.path]=t,this.deferredQueue_.push(e.path)},goog.LoadController=function(){},goog.LoadController.prototype.pause=function(){},goog.LoadController.prototype.resume=function(){},goog.LoadController.prototype.loaded=function(){},goog.LoadController.prototype.pending=function(){},goog.LoadController.prototype.registerEs6ModuleExports=function(e,t,o){},goog.LoadController.prototype.setModuleState=function(e){},goog.LoadController.prototype.clearModuleState=function(){},goog.LoadController.prototype.defer=function(e){},goog.LoadController.prototype.areDepsLoaded=function(){},goog.Dependency=function(e,t,o,r,n){this.path=e,this.relativePath=t,this.provides=o,this.requires=r,this.loadFlags=n,this.loaded_=!1,this.loadCallbacks_=[]},goog.Dependency.prototype.getPathName=function(){var e=this.path,t=e.indexOf("://");return 0<=t&&(0<=(t=(e=e.substring(t+3)).indexOf("/"))&&(e=e.substring(t+1))),e},goog.Dependency.prototype.onLoad=function(e){this.loaded_?e():this.loadCallbacks_.push(e)},goog.Dependency.prototype.loaded=function(){this.loaded_=!0;var e=this.loadCallbacks_;this.loadCallbacks_=[];for(var t=0;t<e.length;t++)e[t]()},goog.Dependency.defer_=!1,goog.Dependency.callbackMap_={},goog.Dependency.registerCallback_=function(e){var t=Math.random().toString(32);return goog.Dependency.callbackMap_[t]=e,t},goog.Dependency.unregisterCallback_=function(e){delete goog.Dependency.callbackMap_[e]},goog.Dependency.callback_=function(e,t){if(!(e in goog.Dependency.callbackMap_))throw Error("Callback key "+e+" does not exist (was base.js loaded more than once?).");for(var o=goog.Dependency.callbackMap_[e],r=[],n=1;n<arguments.length;n++)r.push(arguments[n]);o.apply(void 0,r)},goog.Dependency.prototype.load=function(e){if(goog.global.CLOSURE_IMPORT_SCRIPT)goog.global.CLOSURE_IMPORT_SCRIPT(this.path)?e.loaded():e.pause();else if(goog.inHtmlDocument_()){var t=goog.global.document;if("complete"==t.readyState&&!goog.ENABLE_CHROME_APP_SAFE_SCRIPT_LOADING){if(/\bdeps.js$/.test(this.path))return void e.loaded();throw Error('Cannot write "'+this.path+'" after document load')}if(!goog.ENABLE_CHROME_APP_SAFE_SCRIPT_LOADING&&goog.isDocumentLoading_()){var o=goog.Dependency.registerCallback_((function(t){goog.DebugLoader_.IS_OLD_IE_&&"complete"!=t.readyState||(goog.Dependency.unregisterCallback_(o),e.loaded())})),r=!goog.DebugLoader_.IS_OLD_IE_&&goog.getScriptNonce()?' nonce="'+goog.getScriptNonce()+'"':"";r='<script src="'+this.path+'" '+(goog.DebugLoader_.IS_OLD_IE_?"onreadystatechange":"onload")+"=\"goog.Dependency.callback_('"+o+'\', this)" type="text/javascript" '+(goog.Dependency.defer_?"defer":"")+r+"><\/script>",t.write(goog.TRUSTED_TYPES_POLICY_?goog.TRUSTED_TYPES_POLICY_.createHTML(r):r)}else{var n=t.createElement("script");n.defer=goog.Dependency.defer_,n.async=!1,n.type="text/javascript",(r=goog.getScriptNonce())&&n.setAttribute("nonce",r),goog.DebugLoader_.IS_OLD_IE_?(e.pause(),n.onreadystatechange=function(){"loaded"!=n.readyState&&"complete"!=n.readyState||(e.loaded(),e.resume())}):n.onload=function(){n.onload=null,e.loaded()},n.src=goog.TRUSTED_TYPES_POLICY_?goog.TRUSTED_TYPES_POLICY_.createScriptURL(this.path):this.path,t.head.appendChild(n)}}else goog.logToConsole_("Cannot use default debug loader outside of HTML documents."),"deps.js"==this.relativePath?(goog.logToConsole_("Consider setting CLOSURE_IMPORT_SCRIPT before loading base.js, or setting CLOSURE_NO_DEPS to true."),e.loaded()):e.pause()},goog.Es6ModuleDependency=function(e,t,o,r,n){goog.Dependency.call(this,e,t,o,r,n)},goog.inherits(goog.Es6ModuleDependency,goog.Dependency),goog.Es6ModuleDependency.prototype.load=function(e){if(goog.global.CLOSURE_IMPORT_SCRIPT)goog.global.CLOSURE_IMPORT_SCRIPT(this.path)?e.loaded():e.pause();else if(goog.inHtmlDocument_()){var t=goog.global.document,o=this;if(goog.isDocumentLoading_()){var r=function(e,o){e=o?'<script type="module" crossorigin>'+o+"<\/script>":'<script type="module" crossorigin src="'+e+'"><\/script>',t.write(goog.TRUSTED_TYPES_POLICY_?goog.TRUSTED_TYPES_POLICY_.createHTML(e):e)};goog.Dependency.defer_=!0}else r=function(e,o){var r=t.createElement("script");r.defer=!0,r.async=!1,r.type="module",r.setAttribute("crossorigin",!0);var n=goog.getScriptNonce();n&&r.setAttribute("nonce",n),o?r.textContent=goog.TRUSTED_TYPES_POLICY_?goog.TRUSTED_TYPES_POLICY_.createScript(o):o:r.src=goog.TRUSTED_TYPES_POLICY_?goog.TRUSTED_TYPES_POLICY_.createScriptURL(e):e,t.head.appendChild(r)};var n=goog.Dependency.registerCallback_((function(){goog.Dependency.unregisterCallback_(n),e.setModuleState(goog.ModuleType.ES6)}));r(void 0,'goog.Dependency.callback_("'+n+'")'),r(this.path,void 0);var i=goog.Dependency.registerCallback_((function(t){goog.Dependency.unregisterCallback_(i),e.registerEs6ModuleExports(o.path,t,goog.moduleLoaderState_.moduleName)}));r(void 0,'import * as m from "'+this.path+'"; goog.Dependency.callback_("'+i+'", m)');var s=goog.Dependency.registerCallback_((function(){goog.Dependency.unregisterCallback_(s),e.clearModuleState(),e.loaded()}));r(void 0,'goog.Dependency.callback_("'+s+'")')}else goog.logToConsole_("Cannot use default debug loader outside of HTML documents."),e.pause()},goog.TransformedDependency=function(e,t,o,r,n){goog.Dependency.call(this,e,t,o,r,n),this.contents_=null,this.lazyFetch_=!goog.inHtmlDocument_()||!("noModule"in goog.global.document.createElement("script"))},goog.inherits(goog.TransformedDependency,goog.Dependency),goog.TransformedDependency.prototype.load=function(e){function t(){r.contents_=goog.loadFileSync_(r.path),r.contents_&&(r.contents_=r.transform(r.contents_),r.contents_&&(r.contents_+="\n//# sourceURL="+r.path))}function o(){if(r.lazyFetch_&&t(),r.contents_){n&&e.setModuleState(goog.ModuleType.ES6);try{var o=r.contents_;if(r.contents_=null,goog.globalEval(o),n)var i=goog.moduleLoaderState_.moduleName}finally{n&&e.clearModuleState()}n&&goog.global.$jscomp.require.ensure([r.getPathName()],(function(){e.registerEs6ModuleExports(r.path,goog.global.$jscomp.require(r.getPathName()),i)})),e.loaded()}}var r=this;if(goog.global.CLOSURE_IMPORT_SCRIPT)t(),this.contents_&&goog.global.CLOSURE_IMPORT_SCRIPT("",this.contents_)?(this.contents_=null,e.loaded()):e.pause();else{var n=this.loadFlags.module==goog.ModuleType.ES6;this.lazyFetch_||t();var i=1<e.pending().length,s=i&&goog.DebugLoader_.IS_OLD_IE_;if(i=goog.Dependency.defer_&&(i||goog.isDocumentLoading_()),s||i)e.defer((function(){o()}));else{var a=goog.global.document;if(s=goog.inHtmlDocument_()&&"ActiveXObject"in goog.global,n&&goog.inHtmlDocument_()&&goog.isDocumentLoading_()&&!s){goog.Dependency.defer_=!0,e.pause();var g=a.onreadystatechange;a.onreadystatechange=function(){"interactive"==a.readyState&&(a.onreadystatechange=g,o(),e.resume()),goog.isFunction(g)&&g.apply(void 0,arguments)}}else!goog.DebugLoader_.IS_OLD_IE_&&goog.inHtmlDocument_()&&goog.isDocumentLoading_()?function(){var e=goog.global.document,t=goog.Dependency.registerCallback_((function(){goog.Dependency.unregisterCallback_(t),o()})),r='<script type="text/javascript">'+goog.protectScriptTag_('goog.Dependency.callback_("'+t+'");')+"<\/script>";e.write(goog.TRUSTED_TYPES_POLICY_?goog.TRUSTED_TYPES_POLICY_.createHTML(r):r)}():o()}}},goog.TransformedDependency.prototype.transform=function(e){},goog.TranspiledDependency=function(e,t,o,r,n,i){goog.TransformedDependency.call(this,e,t,o,r,n),this.transpiler=i},goog.inherits(goog.TranspiledDependency,goog.TransformedDependency),goog.TranspiledDependency.prototype.transform=function(e){return this.transpiler.transpile(e,this.getPathName())},goog.PreTranspiledEs6ModuleDependency=function(e,t,o,r,n){goog.TransformedDependency.call(this,e,t,o,r,n)},goog.inherits(goog.PreTranspiledEs6ModuleDependency,goog.TransformedDependency),goog.PreTranspiledEs6ModuleDependency.prototype.transform=function(e){return e},goog.GoogModuleDependency=function(e,t,o,r,n,i,s){goog.TransformedDependency.call(this,e,t,o,r,n),this.needsTranspile_=i,this.transpiler_=s},goog.inherits(goog.GoogModuleDependency,goog.TransformedDependency),goog.GoogModuleDependency.prototype.transform=function(e){return this.needsTranspile_&&(e=this.transpiler_.transpile(e,this.getPathName())),goog.LOAD_MODULE_USING_EVAL&&goog.isDef(goog.global.JSON)?"goog.loadModule("+goog.global.JSON.stringify(e+"\n//# sourceURL="+this.path+"\n")+");":'goog.loadModule(function(exports) {"use strict";'+e+"\n;return exports});\n//# sourceURL="+this.path+"\n"},goog.DebugLoader_.IS_OLD_IE_=!(goog.global.atob||!goog.global.document||!goog.global.document.all),goog.DebugLoader_.prototype.addDependency=function(e,t,o,r){t=t||[],e=e.replace(/\\/g,"/");var n=goog.normalizePath_(goog.basePath+e);for(r&&"boolean"!=typeof r||(r=r?{module:goog.ModuleType.GOOG}:{}),o=this.factory_.createDependency(n,e,t,o,r,goog.transpiler_.needsTranspile(r.lang||"es3",r.module)),this.dependencies_[n]=o,o=0;o<t.length;o++)this.idToPath_[t[o]]=n;this.idToPath_[e]=n},goog.DependencyFactory=function(e){this.transpiler=e},goog.DependencyFactory.prototype.createDependency=function(e,t,o,r,n,i){return n.module==goog.ModuleType.GOOG?new goog.GoogModuleDependency(e,t,o,r,n,i,this.transpiler):i?new goog.TranspiledDependency(e,t,o,r,n,this.transpiler):n.module==goog.ModuleType.ES6?"never"==goog.TRANSPILE&&goog.ASSUME_ES_MODULES_TRANSPILED?new goog.PreTranspiledEs6ModuleDependency(e,t,o,r,n):new goog.Es6ModuleDependency(e,t,o,r,n):new goog.Dependency(e,t,o,r,n)},goog.debugLoader_=new goog.DebugLoader_,goog.loadClosureDeps=function(){goog.debugLoader_.loadClosureDeps()},goog.setDependencyFactory=function(e){goog.debugLoader_.setDependencyFactory(e)},goog.global.CLOSURE_NO_DEPS||goog.debugLoader_.loadClosureDeps(),goog.bootstrap=function(e,t){goog.debugLoader_.bootstrap(e,t)}),goog.TRUSTED_TYPES_POLICY_NAME="",goog.identity_=function(e){return e},goog.createTrustedTypesPolicy=function(e){var t=null;if("undefined"==typeof TrustedTypes||!TrustedTypes.createPolicy)return t;try{t=TrustedTypes.createPolicy(e,{createHTML:goog.identity_,createScript:goog.identity_,createScriptURL:goog.identity_,createURL:goog.identity_})}catch(e){goog.logToConsole_(e.message)}return t},goog.TRUSTED_TYPES_POLICY_=goog.TRUSTED_TYPES_POLICY_NAME?goog.createTrustedTypesPolicy(goog.TRUSTED_TYPES_POLICY_NAME+"#base"):null;var jspb={BinaryConstants:{},ConstBinaryMessage:function(){},BinaryMessage:function(){}};jspb.BinaryConstants.FieldType={INVALID:-1,DOUBLE:1,FLOAT:2,INT64:3,UINT64:4,INT32:5,FIXED64:6,FIXED32:7,BOOL:8,STRING:9,GROUP:10,MESSAGE:11,BYTES:12,UINT32:13,ENUM:14,SFIXED32:15,SFIXED64:16,SINT32:17,SINT64:18,FHASH64:30,VHASH64:31},jspb.BinaryConstants.WireType={INVALID:-1,VARINT:0,FIXED64:1,DELIMITED:2,START_GROUP:3,END_GROUP:4,FIXED32:5},jspb.BinaryConstants.FieldTypeToWireType=function(e){var t=jspb.BinaryConstants.FieldType,o=jspb.BinaryConstants.WireType;switch(e){case t.INT32:case t.INT64:case t.UINT32:case t.UINT64:case t.SINT32:case t.SINT64:case t.BOOL:case t.ENUM:case t.VHASH64:return o.VARINT;case t.DOUBLE:case t.FIXED64:case t.SFIXED64:case t.FHASH64:return o.FIXED64;case t.STRING:case t.MESSAGE:case t.BYTES:return o.DELIMITED;case t.FLOAT:case t.FIXED32:case t.SFIXED32:return o.FIXED32;default:return o.INVALID}},jspb.BinaryConstants.INVALID_FIELD_NUMBER=-1,jspb.BinaryConstants.FLOAT32_EPS=1401298464324817e-60,jspb.BinaryConstants.FLOAT32_MIN=11754943508222875e-54,jspb.BinaryConstants.FLOAT32_MAX=34028234663852886e22,jspb.BinaryConstants.FLOAT64_EPS=5e-324,jspb.BinaryConstants.FLOAT64_MIN=22250738585072014e-324,jspb.BinaryConstants.FLOAT64_MAX=17976931348623157e292,jspb.BinaryConstants.TWO_TO_20=1048576,jspb.BinaryConstants.TWO_TO_23=8388608,jspb.BinaryConstants.TWO_TO_31=2147483648,jspb.BinaryConstants.TWO_TO_32=4294967296,jspb.BinaryConstants.TWO_TO_52=4503599627370496,jspb.BinaryConstants.TWO_TO_63=0x8000000000000000,jspb.BinaryConstants.TWO_TO_64=0x10000000000000000,jspb.BinaryConstants.ZERO_HASH="\0\0\0\0\0\0\0\0",goog.dom={},goog.dom.NodeType={ELEMENT:1,ATTRIBUTE:2,TEXT:3,CDATA_SECTION:4,ENTITY_REFERENCE:5,ENTITY:6,PROCESSING_INSTRUCTION:7,COMMENT:8,DOCUMENT:9,DOCUMENT_TYPE:10,DOCUMENT_FRAGMENT:11,NOTATION:12},goog.debug={},goog.debug.Error=function(e){if(Error.captureStackTrace)Error.captureStackTrace(this,goog.debug.Error);else{var t=Error().stack;t&&(this.stack=t)}e&&(this.message=String(e)),this.reportErrorToServer=!0},goog.inherits(goog.debug.Error,Error),goog.debug.Error.prototype.name="CustomError",goog.asserts={},goog.asserts.ENABLE_ASSERTS=goog.DEBUG,goog.asserts.AssertionError=function(e,t){goog.debug.Error.call(this,goog.asserts.subs_(e,t)),this.messagePattern=e},goog.inherits(goog.asserts.AssertionError,goog.debug.Error),goog.asserts.AssertionError.prototype.name="AssertionError",goog.asserts.DEFAULT_ERROR_HANDLER=function(e){throw e},goog.asserts.errorHandler_=goog.asserts.DEFAULT_ERROR_HANDLER,goog.asserts.subs_=function(e,t){for(var o="",r=(e=e.split("%s")).length-1,n=0;n<r;n++)o+=e[n]+(n<t.length?t[n]:"%s");return o+e[r]},goog.asserts.doAssertFailure_=function(e,t,o,r){var n="Assertion failed";if(o){n+=": "+o;var i=r}else e&&(n+=": "+e,i=t);e=new goog.asserts.AssertionError(""+n,i||[]),goog.asserts.errorHandler_(e)},goog.asserts.setErrorHandler=function(e){goog.asserts.ENABLE_ASSERTS&&(goog.asserts.errorHandler_=e)},goog.asserts.assert=function(e,t,o){return goog.asserts.ENABLE_ASSERTS&&!e&&goog.asserts.doAssertFailure_("",null,t,Array.prototype.slice.call(arguments,2)),e},goog.asserts.assertExists=function(e,t,o){return goog.asserts.ENABLE_ASSERTS&&null==e&&goog.asserts.doAssertFailure_("Expected to exist: %s.",[e],t,Array.prototype.slice.call(arguments,2)),e},goog.asserts.fail=function(e,t){goog.asserts.ENABLE_ASSERTS&&goog.asserts.errorHandler_(new goog.asserts.AssertionError("Failure"+(e?": "+e:""),Array.prototype.slice.call(arguments,1)))},goog.asserts.assertNumber=function(e,t,o){return goog.asserts.ENABLE_ASSERTS&&!goog.isNumber(e)&&goog.asserts.doAssertFailure_("Expected number but got %s: %s.",[goog.typeOf(e),e],t,Array.prototype.slice.call(arguments,2)),e},goog.asserts.assertString=function(e,t,o){return goog.asserts.ENABLE_ASSERTS&&!goog.isString(e)&&goog.asserts.doAssertFailure_("Expected string but got %s: %s.",[goog.typeOf(e),e],t,Array.prototype.slice.call(arguments,2)),e},goog.asserts.assertFunction=function(e,t,o){return goog.asserts.ENABLE_ASSERTS&&!goog.isFunction(e)&&goog.asserts.doAssertFailure_("Expected function but got %s: %s.",[goog.typeOf(e),e],t,Array.prototype.slice.call(arguments,2)),e},goog.asserts.assertObject=function(e,t,o){return goog.asserts.ENABLE_ASSERTS&&!goog.isObject(e)&&goog.asserts.doAssertFailure_("Expected object but got %s: %s.",[goog.typeOf(e),e],t,Array.prototype.slice.call(arguments,2)),e},goog.asserts.assertArray=function(e,t,o){return goog.asserts.ENABLE_ASSERTS&&!goog.isArray(e)&&goog.asserts.doAssertFailure_("Expected array but got %s: %s.",[goog.typeOf(e),e],t,Array.prototype.slice.call(arguments,2)),e},goog.asserts.assertBoolean=function(e,t,o){return goog.asserts.ENABLE_ASSERTS&&!goog.isBoolean(e)&&goog.asserts.doAssertFailure_("Expected boolean but got %s: %s.",[goog.typeOf(e),e],t,Array.prototype.slice.call(arguments,2)),e},goog.asserts.assertElement=function(e,t,o){return!goog.asserts.ENABLE_ASSERTS||goog.isObject(e)&&e.nodeType==goog.dom.NodeType.ELEMENT||goog.asserts.doAssertFailure_("Expected Element but got %s: %s.",[goog.typeOf(e),e],t,Array.prototype.slice.call(arguments,2)),e},goog.asserts.assertInstanceof=function(e,t,o,r){return!goog.asserts.ENABLE_ASSERTS||e instanceof t||goog.asserts.doAssertFailure_("Expected instanceof %s but got %s.",[goog.asserts.getType_(t),goog.asserts.getType_(e)],o,Array.prototype.slice.call(arguments,3)),e},goog.asserts.assertFinite=function(e,t,o){return!goog.asserts.ENABLE_ASSERTS||"number"==typeof e&&isFinite(e)||goog.asserts.doAssertFailure_("Expected %s to be a finite number but it is not.",[e],t,Array.prototype.slice.call(arguments,2)),e},goog.asserts.assertObjectPrototypeIsIntact=function(){for(var e in Object.prototype)goog.asserts.fail(e+" should not be enumerable in Object.prototype.")},goog.asserts.getType_=function(e){return e instanceof Function?e.displayName||e.name||"unknown type name":e instanceof Object?e.constructor.displayName||e.constructor.name||Object.prototype.toString.call(e):null===e?"null":typeof e},goog.array={},goog.NATIVE_ARRAY_PROTOTYPES=goog.TRUSTED_SITE,goog.array.ASSUME_NATIVE_FUNCTIONS=2012<goog.FEATURESET_YEAR,goog.array.peek=function(e){return e[e.length-1]},goog.array.last=goog.array.peek,goog.array.indexOf=goog.NATIVE_ARRAY_PROTOTYPES&&(goog.array.ASSUME_NATIVE_FUNCTIONS||Array.prototype.indexOf)?function(e,t,o){return goog.asserts.assert(null!=e.length),Array.prototype.indexOf.call(e,t,o)}:function(e,t,o){if(o=null==o?0:0>o?Math.max(0,e.length+o):o,goog.isString(e))return goog.isString(t)&&1==t.length?e.indexOf(t,o):-1;for(;o<e.length;o++)if(o in e&&e[o]===t)return o;return-1},goog.array.lastIndexOf=goog.NATIVE_ARRAY_PROTOTYPES&&(goog.array.ASSUME_NATIVE_FUNCTIONS||Array.prototype.lastIndexOf)?function(e,t,o){return goog.asserts.assert(null!=e.length),Array.prototype.lastIndexOf.call(e,t,null==o?e.length-1:o)}:function(e,t,o){if(0>(o=null==o?e.length-1:o)&&(o=Math.max(0,e.length+o)),goog.isString(e))return goog.isString(t)&&1==t.length?e.lastIndexOf(t,o):-1;for(;0<=o;o--)if(o in e&&e[o]===t)return o;return-1},goog.array.forEach=goog.NATIVE_ARRAY_PROTOTYPES&&(goog.array.ASSUME_NATIVE_FUNCTIONS||Array.prototype.forEach)?function(e,t,o){goog.asserts.assert(null!=e.length),Array.prototype.forEach.call(e,t,o)}:function(e,t,o){for(var r=e.length,n=goog.isString(e)?e.split(""):e,i=0;i<r;i++)i in n&&t.call(o,n[i],i,e)},goog.array.forEachRight=function(e,t,o){var r=e.length,n=goog.isString(e)?e.split(""):e;for(--r;0<=r;--r)r in n&&t.call(o,n[r],r,e)},goog.array.filter=goog.NATIVE_ARRAY_PROTOTYPES&&(goog.array.ASSUME_NATIVE_FUNCTIONS||Array.prototype.filter)?function(e,t,o){return goog.asserts.assert(null!=e.length),Array.prototype.filter.call(e,t,o)}:function(e,t,o){for(var r=e.length,n=[],i=0,s=goog.isString(e)?e.split(""):e,a=0;a<r;a++)if(a in s){var g=s[a];t.call(o,g,a,e)&&(n[i++]=g)}return n},goog.array.map=goog.NATIVE_ARRAY_PROTOTYPES&&(goog.array.ASSUME_NATIVE_FUNCTIONS||Array.prototype.map)?function(e,t,o){return goog.asserts.assert(null!=e.length),Array.prototype.map.call(e,t,o)}:function(e,t,o){for(var r=e.length,n=Array(r),i=goog.isString(e)?e.split(""):e,s=0;s<r;s++)s in i&&(n[s]=t.call(o,i[s],s,e));return n},goog.array.reduce=goog.NATIVE_ARRAY_PROTOTYPES&&(goog.array.ASSUME_NATIVE_FUNCTIONS||Array.prototype.reduce)?function(e,t,o,r){return goog.asserts.assert(null!=e.length),r&&(t=goog.bind(t,r)),Array.prototype.reduce.call(e,t,o)}:function(e,t,o,r){var n=o;return goog.array.forEach(e,(function(o,i){n=t.call(r,n,o,i,e)})),n},goog.array.reduceRight=goog.NATIVE_ARRAY_PROTOTYPES&&(goog.array.ASSUME_NATIVE_FUNCTIONS||Array.prototype.reduceRight)?function(e,t,o,r){return goog.asserts.assert(null!=e.length),goog.asserts.assert(null!=t),r&&(t=goog.bind(t,r)),Array.prototype.reduceRight.call(e,t,o)}:function(e,t,o,r){var n=o;return goog.array.forEachRight(e,(function(o,i){n=t.call(r,n,o,i,e)})),n},goog.array.some=goog.NATIVE_ARRAY_PROTOTYPES&&(goog.array.ASSUME_NATIVE_FUNCTIONS||Array.prototype.some)?function(e,t,o){return goog.asserts.assert(null!=e.length),Array.prototype.some.call(e,t,o)}:function(e,t,o){for(var r=e.length,n=goog.isString(e)?e.split(""):e,i=0;i<r;i++)if(i in n&&t.call(o,n[i],i,e))return!0;return!1},goog.array.every=goog.NATIVE_ARRAY_PROTOTYPES&&(goog.array.ASSUME_NATIVE_FUNCTIONS||Array.prototype.every)?function(e,t,o){return goog.asserts.assert(null!=e.length),Array.prototype.every.call(e,t,o)}:function(e,t,o){for(var r=e.length,n=goog.isString(e)?e.split(""):e,i=0;i<r;i++)if(i in n&&!t.call(o,n[i],i,e))return!1;return!0},goog.array.count=function(e,t,o){var r=0;return goog.array.forEach(e,(function(e,n,i){t.call(o,e,n,i)&&++r}),o),r},goog.array.find=function(e,t,o){return 0>(t=goog.array.findIndex(e,t,o))?null:goog.isString(e)?e.charAt(t):e[t]},goog.array.findIndex=function(e,t,o){for(var r=e.length,n=goog.isString(e)?e.split(""):e,i=0;i<r;i++)if(i in n&&t.call(o,n[i],i,e))return i;return-1},goog.array.findRight=function(e,t,o){return 0>(t=goog.array.findIndexRight(e,t,o))?null:goog.isString(e)?e.charAt(t):e[t]},goog.array.findIndexRight=function(e,t,o){var r=e.length,n=goog.isString(e)?e.split(""):e;for(--r;0<=r;r--)if(r in n&&t.call(o,n[r],r,e))return r;return-1},goog.array.contains=function(e,t){return 0<=goog.array.indexOf(e,t)},goog.array.isEmpty=function(e){return 0==e.length},goog.array.clear=function(e){if(!goog.isArray(e))for(var t=e.length-1;0<=t;t--)delete e[t];e.length=0},goog.array.insert=function(e,t){goog.array.contains(e,t)||e.push(t)},goog.array.insertAt=function(e,t,o){goog.array.splice(e,o,0,t)},goog.array.insertArrayAt=function(e,t,o){goog.partial(goog.array.splice,e,o,0).apply(null,t)},goog.array.insertBefore=function(e,t,o){var r;2==arguments.length||0>(r=goog.array.indexOf(e,o))?e.push(t):goog.array.insertAt(e,t,r)},goog.array.remove=function(e,t){var o;return(o=0<=(t=goog.array.indexOf(e,t)))&&goog.array.removeAt(e,t),o},goog.array.removeLast=function(e,t){return 0<=(t=goog.array.lastIndexOf(e,t))&&(goog.array.removeAt(e,t),!0)},goog.array.removeAt=function(e,t){return goog.asserts.assert(null!=e.length),1==Array.prototype.splice.call(e,t,1).length},goog.array.removeIf=function(e,t,o){return 0<=(t=goog.array.findIndex(e,t,o))&&(goog.array.removeAt(e,t),!0)},goog.array.removeAllIf=function(e,t,o){var r=0;return goog.array.forEachRight(e,(function(n,i){t.call(o,n,i,e)&&goog.array.removeAt(e,i)&&r++})),r},goog.array.concat=function(e){return Array.prototype.concat.apply([],arguments)},goog.array.join=function(e){return Array.prototype.concat.apply([],arguments)},goog.array.toArray=function(e){var t=e.length;if(0<t){for(var o=Array(t),r=0;r<t;r++)o[r]=e[r];return o}return[]},goog.array.clone=goog.array.toArray,goog.array.extend=function(e,t){for(var o=1;o<arguments.length;o++){var r=arguments[o];if(goog.isArrayLike(r)){var n=e.length||0,i=r.length||0;e.length=n+i;for(var s=0;s<i;s++)e[n+s]=r[s]}else e.push(r)}},goog.array.splice=function(e,t,o,r){return goog.asserts.assert(null!=e.length),Array.prototype.splice.apply(e,goog.array.slice(arguments,1))},goog.array.slice=function(e,t,o){return goog.asserts.assert(null!=e.length),2>=arguments.length?Array.prototype.slice.call(e,t):Array.prototype.slice.call(e,t,o)},goog.array.removeDuplicates=function(e,t,o){t=t||e;var r=function(e){return goog.isObject(e)?"o"+goog.getUid(e):(typeof e).charAt(0)+e};o=o||r,r={};for(var n=0,i=0;i<e.length;){var s=e[i++],a=o(s);Object.prototype.hasOwnProperty.call(r,a)||(r[a]=!0,t[n++]=s)}t.length=n},goog.array.binarySearch=function(e,t,o){return goog.array.binarySearch_(e,o||goog.array.defaultCompare,!1,t)},goog.array.binarySelect=function(e,t,o){return goog.array.binarySearch_(e,t,!0,void 0,o)},goog.array.binarySearch_=function(e,t,o,r,n){for(var i,s=0,a=e.length;s<a;){var g=s+a>>1,p=o?t.call(n,e[g],g,e):t(r,e[g]);0<p?s=g+1:(a=g,i=!p)}return i?s:~s},goog.array.sort=function(e,t){e.sort(t||goog.array.defaultCompare)},goog.array.stableSort=function(e,t){for(var o=Array(e.length),r=0;r<e.length;r++)o[r]={index:r,value:e[r]};var n=t||goog.array.defaultCompare;for(goog.array.sort(o,(function(e,t){return n(e.value,t.value)||e.index-t.index})),r=0;r<e.length;r++)e[r]=o[r].value},goog.array.sortByKey=function(e,t,o){var r=o||goog.array.defaultCompare;goog.array.sort(e,(function(e,o){return r(t(e),t(o))}))},goog.array.sortObjectsByKey=function(e,t,o){goog.array.sortByKey(e,(function(e){return e[t]}),o)},goog.array.isSorted=function(e,t,o){t=t||goog.array.defaultCompare;for(var r=1;r<e.length;r++){var n=t(e[r-1],e[r]);if(0<n||0==n&&o)return!1}return!0},goog.array.equals=function(e,t,o){if(!goog.isArrayLike(e)||!goog.isArrayLike(t)||e.length!=t.length)return!1;var r=e.length;o=o||goog.array.defaultCompareEquality;for(var n=0;n<r;n++)if(!o(e[n],t[n]))return!1;return!0},goog.array.compare3=function(e,t,o){o=o||goog.array.defaultCompare;for(var r=Math.min(e.length,t.length),n=0;n<r;n++){var i=o(e[n],t[n]);if(0!=i)return i}return goog.array.defaultCompare(e.length,t.length)},goog.array.defaultCompare=function(e,t){return e>t?1:e<t?-1:0},goog.array.inverseDefaultCompare=function(e,t){return-goog.array.defaultCompare(e,t)},goog.array.defaultCompareEquality=function(e,t){return e===t},goog.array.binaryInsert=function(e,t,o){return 0>(o=goog.array.binarySearch(e,t,o))&&(goog.array.insertAt(e,t,-(o+1)),!0)},goog.array.binaryRemove=function(e,t,o){return 0<=(t=goog.array.binarySearch(e,t,o))&&goog.array.removeAt(e,t)},goog.array.bucket=function(e,t,o){for(var r={},n=0;n<e.length;n++){var i=e[n],s=t.call(o,i,n,e);goog.isDef(s)&&(r[s]||(r[s]=[])).push(i)}return r},goog.array.toObject=function(e,t,o){var r={};return goog.array.forEach(e,(function(n,i){r[t.call(o,n,i,e)]=n})),r},goog.array.range=function(e,t,o){var r=[],n=0,i=e;if(void 0!==t&&(n=e,i=t),0>(o=o||1)*(i-n))return[];if(0<o)for(e=n;e<i;e+=o)r.push(e);else for(e=n;e>i;e+=o)r.push(e);return r},goog.array.repeat=function(e,t){for(var o=[],r=0;r<t;r++)o[r]=e;return o},goog.array.flatten=function(e){for(var t=[],o=0;o<arguments.length;o++){var r=arguments[o];if(goog.isArray(r))for(var n=0;n<r.length;n+=8192){var i=goog.array.slice(r,n,n+8192);i=goog.array.flatten.apply(null,i);for(var s=0;s<i.length;s++)t.push(i[s])}else t.push(r)}return t},goog.array.rotate=function(e,t){return goog.asserts.assert(null!=e.length),e.length&&(0<(t%=e.length)?Array.prototype.unshift.apply(e,e.splice(-t,t)):0>t&&Array.prototype.push.apply(e,e.splice(0,-t))),e},goog.array.moveItem=function(e,t,o){goog.asserts.assert(0<=t&&t<e.length),goog.asserts.assert(0<=o&&o<e.length),t=Array.prototype.splice.call(e,t,1),Array.prototype.splice.call(e,o,0,t[0])},goog.array.zip=function(e){if(!arguments.length)return[];for(var t=[],o=arguments[0].length,r=1;r<arguments.length;r++)arguments[r].length<o&&(o=arguments[r].length);for(r=0;r<o;r++){for(var n=[],i=0;i<arguments.length;i++)n.push(arguments[i][r]);t.push(n)}return t},goog.array.shuffle=function(e,t){t=t||Math.random;for(var o=e.length-1;0<o;o--){var r=Math.floor(t()*(o+1)),n=e[o];e[o]=e[r],e[r]=n}},goog.array.copyByIndex=function(e,t){var o=[];return goog.array.forEach(t,(function(t){o.push(e[t])})),o},goog.array.concatMap=function(e,t,o){return goog.array.concat.apply([],goog.array.map(e,t,o))},goog.crypt={},goog.crypt.stringToByteArray=function(e){for(var t=[],o=0,r=0;r<e.length;r++){var n=e.charCodeAt(r);255<n&&(t[o++]=255&n,n>>=8),t[o++]=n}return t},goog.crypt.byteArrayToString=function(e){if(8192>=e.length)return String.fromCharCode.apply(null,e);for(var t="",o=0;o<e.length;o+=8192){var r=goog.array.slice(e,o,o+8192);t+=String.fromCharCode.apply(null,r)}return t},goog.crypt.byteArrayToHex=function(e,t){return goog.array.map(e,(function(e){return 1<(e=e.toString(16)).length?e:"0"+e})).join(t||"")},goog.crypt.hexToByteArray=function(e){goog.asserts.assert(0==e.length%2,"Key string length must be multiple of 2");for(var t=[],o=0;o<e.length;o+=2)t.push(parseInt(e.substring(o,o+2),16));return t},goog.crypt.stringToUtf8ByteArray=function(e){for(var t=[],o=0,r=0;r<e.length;r++){var n=e.charCodeAt(r);128>n?t[o++]=n:(2048>n?t[o++]=n>>6|192:(55296==(64512&n)&&r+1<e.length&&56320==(64512&e.charCodeAt(r+1))?(n=65536+((1023&n)<<10)+(1023&e.charCodeAt(++r)),t[o++]=n>>18|240,t[o++]=n>>12&63|128):t[o++]=n>>12|224,t[o++]=n>>6&63|128),t[o++]=63&n|128)}return t},goog.crypt.utf8ByteArrayToString=function(e){for(var t=[],o=0,r=0;o<e.length;){var n=e[o++];if(128>n)t[r++]=String.fromCharCode(n);else if(191<n&&224>n){var i=e[o++];t[r++]=String.fromCharCode((31&n)<<6|63&i)}else if(239<n&&365>n){i=e[o++];var s=e[o++];n=((7&n)<<18|(63&i)<<12|(63&s)<<6|63&e[o++])-65536,t[r++]=String.fromCharCode(55296+(n>>10)),t[r++]=String.fromCharCode(56320+(1023&n))}else i=e[o++],s=e[o++],t[r++]=String.fromCharCode((15&n)<<12|(63&i)<<6|63&s)}return t.join("")},goog.crypt.xorByteArray=function(e,t){goog.asserts.assert(e.length==t.length,"XOR array lengths must match");for(var o=[],r=0;r<e.length;r++)o.push(e[r]^t[r]);return o},goog.string={},goog.string.internal={},goog.string.internal.startsWith=function(e,t){return 0==e.lastIndexOf(t,0)},goog.string.internal.endsWith=function(e,t){var o=e.length-t.length;return 0<=o&&e.indexOf(t,o)==o},goog.string.internal.caseInsensitiveStartsWith=function(e,t){return 0==goog.string.internal.caseInsensitiveCompare(t,e.substr(0,t.length))},goog.string.internal.caseInsensitiveEndsWith=function(e,t){return 0==goog.string.internal.caseInsensitiveCompare(t,e.substr(e.length-t.length,t.length))},goog.string.internal.caseInsensitiveEquals=function(e,t){return e.toLowerCase()==t.toLowerCase()},goog.string.internal.isEmptyOrWhitespace=function(e){return/^[\s\xa0]*$/.test(e)},goog.string.internal.trim=goog.TRUSTED_SITE&&String.prototype.trim?function(e){return e.trim()}:function(e){return/^[\s\xa0]*([\s\S]*?)[\s\xa0]*$/.exec(e)[1]},goog.string.internal.caseInsensitiveCompare=function(e,t){return(e=String(e).toLowerCase())<(t=String(t).toLowerCase())?-1:e==t?0:1},goog.string.internal.newLineToBr=function(e,t){return e.replace(/(\r\n|\r|\n)/g,t?"<br />":"<br>")},goog.string.internal.htmlEscape=function(e,t){if(t)e=e.replace(goog.string.internal.AMP_RE_,"&amp;").replace(goog.string.internal.LT_RE_,"&lt;").replace(goog.string.internal.GT_RE_,"&gt;").replace(goog.string.internal.QUOT_RE_,"&quot;").replace(goog.string.internal.SINGLE_QUOTE_RE_,"&#39;").replace(goog.string.internal.NULL_RE_,"&#0;");else{if(!goog.string.internal.ALL_RE_.test(e))return e;-1!=e.indexOf("&")&&(e=e.replace(goog.string.internal.AMP_RE_,"&amp;")),-1!=e.indexOf("<")&&(e=e.replace(goog.string.internal.LT_RE_,"&lt;")),-1!=e.indexOf(">")&&(e=e.replace(goog.string.internal.GT_RE_,"&gt;")),-1!=e.indexOf('"')&&(e=e.replace(goog.string.internal.QUOT_RE_,"&quot;")),-1!=e.indexOf("'")&&(e=e.replace(goog.string.internal.SINGLE_QUOTE_RE_,"&#39;")),-1!=e.indexOf("\0")&&(e=e.replace(goog.string.internal.NULL_RE_,"&#0;"))}return e},goog.string.internal.AMP_RE_=/&/g,goog.string.internal.LT_RE_=/</g,goog.string.internal.GT_RE_=/>/g,goog.string.internal.QUOT_RE_=/"/g,goog.string.internal.SINGLE_QUOTE_RE_=/'/g,goog.string.internal.NULL_RE_=/\x00/g,goog.string.internal.ALL_RE_=/[\x00&<>"']/,goog.string.internal.whitespaceEscape=function(e,t){return goog.string.internal.newLineToBr(e.replace(/  /g," &#160;"),t)},goog.string.internal.contains=function(e,t){return-1!=e.indexOf(t)},goog.string.internal.caseInsensitiveContains=function(e,t){return goog.string.internal.contains(e.toLowerCase(),t.toLowerCase())},goog.string.internal.compareVersions=function(e,t){var o=0;e=goog.string.internal.trim(String(e)).split("."),t=goog.string.internal.trim(String(t)).split(".");for(var r=Math.max(e.length,t.length),n=0;0==o&&n<r;n++){var i=e[n]||"",s=t[n]||"";do{if(i=/(\d*)(\D*)(.*)/.exec(i)||["","","",""],s=/(\d*)(\D*)(.*)/.exec(s)||["","","",""],0==i[0].length&&0==s[0].length)break;o=0==i[1].length?0:parseInt(i[1],10);var a=0==s[1].length?0:parseInt(s[1],10);o=goog.string.internal.compareElements_(o,a)||goog.string.internal.compareElements_(0==i[2].length,0==s[2].length)||goog.string.internal.compareElements_(i[2],s[2]),i=i[3],s=s[3]}while(0==o)}return o},goog.string.internal.compareElements_=function(e,t){return e<t?-1:e>t?1:0},goog.string.TypedString=function(){},goog.string.Const=function(e,t){this.stringConstValueWithSecurityContract__googStringSecurityPrivate_=e===goog.string.Const.GOOG_STRING_CONSTRUCTOR_TOKEN_PRIVATE_&&t||"",this.STRING_CONST_TYPE_MARKER__GOOG_STRING_SECURITY_PRIVATE_=goog.string.Const.TYPE_MARKER_},goog.string.Const.prototype.implementsGoogStringTypedString=!0,goog.string.Const.prototype.getTypedStringValue=function(){return this.stringConstValueWithSecurityContract__googStringSecurityPrivate_},goog.string.Const.prototype.toString=function(){return"Const{"+this.stringConstValueWithSecurityContract__googStringSecurityPrivate_+"}"},goog.string.Const.unwrap=function(e){return e instanceof goog.string.Const&&e.constructor===goog.string.Const&&e.STRING_CONST_TYPE_MARKER__GOOG_STRING_SECURITY_PRIVATE_===goog.string.Const.TYPE_MARKER_?e.stringConstValueWithSecurityContract__googStringSecurityPrivate_:(goog.asserts.fail("expected object of type Const, got '"+e+"'"),"type_error:Const")},goog.string.Const.from=function(e){return new goog.string.Const(goog.string.Const.GOOG_STRING_CONSTRUCTOR_TOKEN_PRIVATE_,e)},goog.string.Const.TYPE_MARKER_={},goog.string.Const.GOOG_STRING_CONSTRUCTOR_TOKEN_PRIVATE_={},goog.string.Const.EMPTY=goog.string.Const.from(""),goog.fs={},goog.fs.url={},goog.fs.url.createObjectUrl=function(e){return goog.fs.url.getUrlObject_().createObjectURL(e)},goog.fs.url.revokeObjectUrl=function(e){goog.fs.url.getUrlObject_().revokeObjectURL(e)},goog.fs.url.getUrlObject_=function(){var e=goog.fs.url.findUrlObject_();if(null!=e)return e;throw Error("This browser doesn't seem to support blob URLs")},goog.fs.url.findUrlObject_=function(){return goog.isDef(goog.global.URL)&&goog.isDef(goog.global.URL.createObjectURL)?goog.global.URL:goog.isDef(goog.global.webkitURL)&&goog.isDef(goog.global.webkitURL.createObjectURL)?goog.global.webkitURL:goog.isDef(goog.global.createObjectURL)?goog.global:null},goog.fs.url.browserSupportsObjectUrls=function(){return null!=goog.fs.url.findUrlObject_()},goog.html={},goog.html.trustedtypes={},goog.html.trustedtypes.PRIVATE_DO_NOT_ACCESS_OR_ELSE_POLICY=goog.TRUSTED_TYPES_POLICY_NAME?goog.createTrustedTypesPolicy(goog.TRUSTED_TYPES_POLICY_NAME+"#html"):null,goog.i18n={},goog.i18n.bidi={},goog.i18n.bidi.FORCE_RTL=!1,goog.i18n.bidi.IS_RTL=goog.i18n.bidi.FORCE_RTL||("ar"==goog.LOCALE.substring(0,2).toLowerCase()||"fa"==goog.LOCALE.substring(0,2).toLowerCase()||"he"==goog.LOCALE.substring(0,2).toLowerCase()||"iw"==goog.LOCALE.substring(0,2).toLowerCase()||"ps"==goog.LOCALE.substring(0,2).toLowerCase()||"sd"==goog.LOCALE.substring(0,2).toLowerCase()||"ug"==goog.LOCALE.substring(0,2).toLowerCase()||"ur"==goog.LOCALE.substring(0,2).toLowerCase()||"yi"==goog.LOCALE.substring(0,2).toLowerCase())&&(2==goog.LOCALE.length||"-"==goog.LOCALE.substring(2,3)||"_"==goog.LOCALE.substring(2,3))||3<=goog.LOCALE.length&&"ckb"==goog.LOCALE.substring(0,3).toLowerCase()&&(3==goog.LOCALE.length||"-"==goog.LOCALE.substring(3,4)||"_"==goog.LOCALE.substring(3,4))||7<=goog.LOCALE.length&&("-"==goog.LOCALE.substring(2,3)||"_"==goog.LOCALE.substring(2,3))&&("adlm"==goog.LOCALE.substring(3,7).toLowerCase()||"arab"==goog.LOCALE.substring(3,7).toLowerCase()||"hebr"==goog.LOCALE.substring(3,7).toLowerCase()||"nkoo"==goog.LOCALE.substring(3,7).toLowerCase()||"rohg"==goog.LOCALE.substring(3,7).toLowerCase()||"thaa"==goog.LOCALE.substring(3,7).toLowerCase())||8<=goog.LOCALE.length&&("-"==goog.LOCALE.substring(3,4)||"_"==goog.LOCALE.substring(3,4))&&("adlm"==goog.LOCALE.substring(4,8).toLowerCase()||"arab"==goog.LOCALE.substring(4,8).toLowerCase()||"hebr"==goog.LOCALE.substring(4,8).toLowerCase()||"nkoo"==goog.LOCALE.substring(4,8).toLowerCase()||"rohg"==goog.LOCALE.substring(4,8).toLowerCase()||"thaa"==goog.LOCALE.substring(4,8).toLowerCase()),goog.i18n.bidi.Format={LRE:"‪",RLE:"‫",PDF:"‬",LRM:"‎",RLM:"‏"},goog.i18n.bidi.Dir={LTR:1,RTL:-1,NEUTRAL:0},goog.i18n.bidi.RIGHT="right",goog.i18n.bidi.LEFT="left",goog.i18n.bidi.I18N_RIGHT=goog.i18n.bidi.IS_RTL?goog.i18n.bidi.LEFT:goog.i18n.bidi.RIGHT,goog.i18n.bidi.I18N_LEFT=goog.i18n.bidi.IS_RTL?goog.i18n.bidi.RIGHT:goog.i18n.bidi.LEFT,goog.i18n.bidi.toDir=function(e,t){return"number"==typeof e?0<e?goog.i18n.bidi.Dir.LTR:0>e?goog.i18n.bidi.Dir.RTL:t?null:goog.i18n.bidi.Dir.NEUTRAL:null==e?null:e?goog.i18n.bidi.Dir.RTL:goog.i18n.bidi.Dir.LTR},goog.i18n.bidi.ltrChars_="A-Za-zÀ-ÖØ-öø-ʸ̀-֐ऀ-῿‎Ⰰ-\ud801\ud804-\ud839\ud83c-\udbff豈-﬜︀-﹯﻽-￿",goog.i18n.bidi.rtlChars_="֑-ۯۺ-ࣿ‏\ud802-\ud803\ud83a-\ud83bיִ-﷿ﹰ-ﻼ",goog.i18n.bidi.htmlSkipReg_=/<[^>]*>|&[^;]+;/g,goog.i18n.bidi.stripHtmlIfNeeded_=function(e,t){return t?e.replace(goog.i18n.bidi.htmlSkipReg_,""):e},goog.i18n.bidi.rtlCharReg_=new RegExp("["+goog.i18n.bidi.rtlChars_+"]"),goog.i18n.bidi.ltrCharReg_=new RegExp("["+goog.i18n.bidi.ltrChars_+"]"),goog.i18n.bidi.hasAnyRtl=function(e,t){return goog.i18n.bidi.rtlCharReg_.test(goog.i18n.bidi.stripHtmlIfNeeded_(e,t))},goog.i18n.bidi.hasRtlChar=goog.i18n.bidi.hasAnyRtl,goog.i18n.bidi.hasAnyLtr=function(e,t){return goog.i18n.bidi.ltrCharReg_.test(goog.i18n.bidi.stripHtmlIfNeeded_(e,t))},goog.i18n.bidi.ltrRe_=new RegExp("^["+goog.i18n.bidi.ltrChars_+"]"),goog.i18n.bidi.rtlRe_=new RegExp("^["+goog.i18n.bidi.rtlChars_+"]"),goog.i18n.bidi.isRtlChar=function(e){return goog.i18n.bidi.rtlRe_.test(e)},goog.i18n.bidi.isLtrChar=function(e){return goog.i18n.bidi.ltrRe_.test(e)},goog.i18n.bidi.isNeutralChar=function(e){return!goog.i18n.bidi.isLtrChar(e)&&!goog.i18n.bidi.isRtlChar(e)},goog.i18n.bidi.ltrDirCheckRe_=new RegExp("^[^"+goog.i18n.bidi.rtlChars_+"]*["+goog.i18n.bidi.ltrChars_+"]"),goog.i18n.bidi.rtlDirCheckRe_=new RegExp("^[^"+goog.i18n.bidi.ltrChars_+"]*["+goog.i18n.bidi.rtlChars_+"]"),goog.i18n.bidi.startsWithRtl=function(e,t){return goog.i18n.bidi.rtlDirCheckRe_.test(goog.i18n.bidi.stripHtmlIfNeeded_(e,t))},goog.i18n.bidi.isRtlText=goog.i18n.bidi.startsWithRtl,goog.i18n.bidi.startsWithLtr=function(e,t){return goog.i18n.bidi.ltrDirCheckRe_.test(goog.i18n.bidi.stripHtmlIfNeeded_(e,t))},goog.i18n.bidi.isLtrText=goog.i18n.bidi.startsWithLtr,goog.i18n.bidi.isRequiredLtrRe_=/^http:\/\/.*/,goog.i18n.bidi.isNeutralText=function(e,t){return e=goog.i18n.bidi.stripHtmlIfNeeded_(e,t),goog.i18n.bidi.isRequiredLtrRe_.test(e)||!goog.i18n.bidi.hasAnyLtr(e)&&!goog.i18n.bidi.hasAnyRtl(e)},goog.i18n.bidi.ltrExitDirCheckRe_=new RegExp("["+goog.i18n.bidi.ltrChars_+"][^"+goog.i18n.bidi.rtlChars_+"]*$"),goog.i18n.bidi.rtlExitDirCheckRe_=new RegExp("["+goog.i18n.bidi.rtlChars_+"][^"+goog.i18n.bidi.ltrChars_+"]*$"),goog.i18n.bidi.endsWithLtr=function(e,t){return goog.i18n.bidi.ltrExitDirCheckRe_.test(goog.i18n.bidi.stripHtmlIfNeeded_(e,t))},goog.i18n.bidi.isLtrExitText=goog.i18n.bidi.endsWithLtr,goog.i18n.bidi.endsWithRtl=function(e,t){return goog.i18n.bidi.rtlExitDirCheckRe_.test(goog.i18n.bidi.stripHtmlIfNeeded_(e,t))},goog.i18n.bidi.isRtlExitText=goog.i18n.bidi.endsWithRtl,goog.i18n.bidi.rtlLocalesRe_=/^(ar|ckb|dv|he|iw|fa|nqo|ps|sd|ug|ur|yi|.*[-_](Adlm|Arab|Hebr|Nkoo|Rohg|Thaa))(?!.*[-_](Latn|Cyrl)($|-|_))($|-|_)/i,goog.i18n.bidi.isRtlLanguage=function(e){return goog.i18n.bidi.rtlLocalesRe_.test(e)},goog.i18n.bidi.bracketGuardTextRe_=/(\(.*?\)+)|(\[.*?\]+)|(\{.*?\}+)|(<.*?>+)/g,goog.i18n.bidi.guardBracketInText=function(e,t){return t=(void 0===t?goog.i18n.bidi.hasAnyRtl(e):t)?goog.i18n.bidi.Format.RLM:goog.i18n.bidi.Format.LRM,e.replace(goog.i18n.bidi.bracketGuardTextRe_,t+"$&"+t)},goog.i18n.bidi.enforceRtlInHtml=function(e){return"<"==e.charAt(0)?e.replace(/<\w+/,"$& dir=rtl"):"\n<span dir=rtl>"+e+"</span>"},goog.i18n.bidi.enforceRtlInText=function(e){return goog.i18n.bidi.Format.RLE+e+goog.i18n.bidi.Format.PDF},goog.i18n.bidi.enforceLtrInHtml=function(e){return"<"==e.charAt(0)?e.replace(/<\w+/,"$& dir=ltr"):"\n<span dir=ltr>"+e+"</span>"},goog.i18n.bidi.enforceLtrInText=function(e){return goog.i18n.bidi.Format.LRE+e+goog.i18n.bidi.Format.PDF},goog.i18n.bidi.dimensionsRe_=/:\s*([.\d][.\w]*)\s+([.\d][.\w]*)\s+([.\d][.\w]*)\s+([.\d][.\w]*)/g,goog.i18n.bidi.leftRe_=/left/gi,goog.i18n.bidi.rightRe_=/right/gi,goog.i18n.bidi.tempRe_=/%%%%/g,goog.i18n.bidi.mirrorCSS=function(e){return e.replace(goog.i18n.bidi.dimensionsRe_,":$1 $4 $3 $2").replace(goog.i18n.bidi.leftRe_,"%%%%").replace(goog.i18n.bidi.rightRe_,goog.i18n.bidi.LEFT).replace(goog.i18n.bidi.tempRe_,goog.i18n.bidi.RIGHT)},goog.i18n.bidi.doubleQuoteSubstituteRe_=/([\u0591-\u05f2])"/g,goog.i18n.bidi.singleQuoteSubstituteRe_=/([\u0591-\u05f2])'/g,goog.i18n.bidi.normalizeHebrewQuote=function(e){return e.replace(goog.i18n.bidi.doubleQuoteSubstituteRe_,"$1״").replace(goog.i18n.bidi.singleQuoteSubstituteRe_,"$1׳")},goog.i18n.bidi.wordSeparatorRe_=/\s+/,goog.i18n.bidi.hasNumeralsRe_=/[\d\u06f0-\u06f9]/,goog.i18n.bidi.rtlDetectionThreshold_=.4,goog.i18n.bidi.estimateDirection=function(e,t){var o=0,r=0,n=!1;for(e=goog.i18n.bidi.stripHtmlIfNeeded_(e,t).split(goog.i18n.bidi.wordSeparatorRe_),t=0;t<e.length;t++){var i=e[t];goog.i18n.bidi.startsWithRtl(i)?(o++,r++):goog.i18n.bidi.isRequiredLtrRe_.test(i)?n=!0:goog.i18n.bidi.hasAnyLtr(i)?r++:goog.i18n.bidi.hasNumeralsRe_.test(i)&&(n=!0)}return 0==r?n?goog.i18n.bidi.Dir.LTR:goog.i18n.bidi.Dir.NEUTRAL:o/r>goog.i18n.bidi.rtlDetectionThreshold_?goog.i18n.bidi.Dir.RTL:goog.i18n.bidi.Dir.LTR},goog.i18n.bidi.detectRtlDirectionality=function(e,t){return goog.i18n.bidi.estimateDirection(e,t)==goog.i18n.bidi.Dir.RTL},goog.i18n.bidi.setElementDirAndAlign=function(e,t){e&&(t=goog.i18n.bidi.toDir(t))&&(e.style.textAlign=t==goog.i18n.bidi.Dir.RTL?goog.i18n.bidi.RIGHT:goog.i18n.bidi.LEFT,e.dir=t==goog.i18n.bidi.Dir.RTL?"rtl":"ltr")},goog.i18n.bidi.setElementDirByTextDirectionality=function(e,t){switch(goog.i18n.bidi.estimateDirection(t)){case goog.i18n.bidi.Dir.LTR:e.dir="ltr";break;case goog.i18n.bidi.Dir.RTL:e.dir="rtl";break;default:e.removeAttribute("dir")}},goog.i18n.bidi.DirectionalString=function(){},goog.html.TrustedResourceUrl=function(){this.privateDoNotAccessOrElseTrustedResourceUrlWrappedValue_="",this.trustedURL_=null,this.TRUSTED_RESOURCE_URL_TYPE_MARKER_GOOG_HTML_SECURITY_PRIVATE_=goog.html.TrustedResourceUrl.TYPE_MARKER_GOOG_HTML_SECURITY_PRIVATE_},goog.html.TrustedResourceUrl.prototype.implementsGoogStringTypedString=!0,goog.html.TrustedResourceUrl.prototype.getTypedStringValue=function(){return this.privateDoNotAccessOrElseTrustedResourceUrlWrappedValue_.toString()},goog.html.TrustedResourceUrl.prototype.implementsGoogI18nBidiDirectionalString=!0,goog.html.TrustedResourceUrl.prototype.getDirection=function(){return goog.i18n.bidi.Dir.LTR},goog.html.TrustedResourceUrl.prototype.cloneWithParams=function(e,t){var o=goog.html.TrustedResourceUrl.unwrap(this),r=(o=goog.html.TrustedResourceUrl.URL_PARAM_PARSER_.exec(o))[3]||"";return goog.html.TrustedResourceUrl.createTrustedResourceUrlSecurityPrivateDoNotAccessOrElse(o[1]+goog.html.TrustedResourceUrl.stringifyParams_("?",o[2]||"",e)+goog.html.TrustedResourceUrl.stringifyParams_("#",r,t))},goog.DEBUG&&(goog.html.TrustedResourceUrl.prototype.toString=function(){return"TrustedResourceUrl{"+this.privateDoNotAccessOrElseTrustedResourceUrlWrappedValue_+"}"}),goog.html.TrustedResourceUrl.unwrap=function(e){return goog.html.TrustedResourceUrl.unwrapTrustedScriptURL(e).toString()},goog.html.TrustedResourceUrl.unwrapTrustedScriptURL=function(e){return e instanceof goog.html.TrustedResourceUrl&&e.constructor===goog.html.TrustedResourceUrl&&e.TRUSTED_RESOURCE_URL_TYPE_MARKER_GOOG_HTML_SECURITY_PRIVATE_===goog.html.TrustedResourceUrl.TYPE_MARKER_GOOG_HTML_SECURITY_PRIVATE_?e.privateDoNotAccessOrElseTrustedResourceUrlWrappedValue_:(goog.asserts.fail("expected object of type TrustedResourceUrl, got '"+e+"' of type "+goog.typeOf(e)),"type_error:TrustedResourceUrl")},goog.html.TrustedResourceUrl.unwrapTrustedURL=function(e){return e.trustedURL_?e.trustedURL_:goog.html.TrustedResourceUrl.unwrap(e)},goog.html.TrustedResourceUrl.format=function(e,t){var o=goog.string.Const.unwrap(e);if(!goog.html.TrustedResourceUrl.BASE_URL_.test(o))throw Error("Invalid TrustedResourceUrl format: "+o);return e=o.replace(goog.html.TrustedResourceUrl.FORMAT_MARKER_,(function(e,r){if(!Object.prototype.hasOwnProperty.call(t,r))throw Error('Found marker, "'+r+'", in format string, "'+o+'", but no valid label mapping found in args: '+JSON.stringify(t));return(e=t[r])instanceof goog.string.Const?goog.string.Const.unwrap(e):encodeURIComponent(String(e))})),goog.html.TrustedResourceUrl.createTrustedResourceUrlSecurityPrivateDoNotAccessOrElse(e)},goog.html.TrustedResourceUrl.FORMAT_MARKER_=/%{(\w+)}/g,goog.html.TrustedResourceUrl.BASE_URL_=/^((https:)?\/\/[0-9a-z.:[\]-]+\/|\/[^/\\]|[^:/\\%]+\/|[^:/\\%]*[?#]|about:blank#)/i,goog.html.TrustedResourceUrl.URL_PARAM_PARSER_=/^([^?#]*)(\?[^#]*)?(#[\s\S]*)?/,goog.html.TrustedResourceUrl.formatWithParams=function(e,t,o,r){return goog.html.TrustedResourceUrl.format(e,t).cloneWithParams(o,r)},goog.html.TrustedResourceUrl.fromConstant=function(e){return goog.html.TrustedResourceUrl.createTrustedResourceUrlSecurityPrivateDoNotAccessOrElse(goog.string.Const.unwrap(e))},goog.html.TrustedResourceUrl.fromConstants=function(e){for(var t="",o=0;o<e.length;o++)t+=goog.string.Const.unwrap(e[o]);return goog.html.TrustedResourceUrl.createTrustedResourceUrlSecurityPrivateDoNotAccessOrElse(t)},goog.html.TrustedResourceUrl.TYPE_MARKER_GOOG_HTML_SECURITY_PRIVATE_={},goog.html.TrustedResourceUrl.createTrustedResourceUrlSecurityPrivateDoNotAccessOrElse=function(e){var t=new goog.html.TrustedResourceUrl;return t.privateDoNotAccessOrElseTrustedResourceUrlWrappedValue_=goog.html.trustedtypes.PRIVATE_DO_NOT_ACCESS_OR_ELSE_POLICY?goog.html.trustedtypes.PRIVATE_DO_NOT_ACCESS_OR_ELSE_POLICY.createScriptURL(e):e,goog.html.trustedtypes.PRIVATE_DO_NOT_ACCESS_OR_ELSE_POLICY&&(t.trustedURL_=goog.html.trustedtypes.PRIVATE_DO_NOT_ACCESS_OR_ELSE_POLICY.createURL(e)),t},goog.html.TrustedResourceUrl.stringifyParams_=function(e,t,o){if(null==o)return t;if(goog.isString(o))return o?e+encodeURIComponent(o):"";for(var r in o){var n=o[r];n=goog.isArray(n)?n:[n];for(var i=0;i<n.length;i++){var s=n[i];null!=s&&(t||(t=e),t+=(t.length>e.length?"&":"")+encodeURIComponent(r)+"="+encodeURIComponent(String(s)))}}return t},goog.html.SafeUrl=function(){this.privateDoNotAccessOrElseSafeUrlWrappedValue_="",this.SAFE_URL_TYPE_MARKER_GOOG_HTML_SECURITY_PRIVATE_=goog.html.SafeUrl.TYPE_MARKER_GOOG_HTML_SECURITY_PRIVATE_},goog.html.SafeUrl.INNOCUOUS_STRING="about:invalid#zClosurez",goog.html.SafeUrl.prototype.implementsGoogStringTypedString=!0,goog.html.SafeUrl.prototype.getTypedStringValue=function(){return this.privateDoNotAccessOrElseSafeUrlWrappedValue_.toString()},goog.html.SafeUrl.prototype.implementsGoogI18nBidiDirectionalString=!0,goog.html.SafeUrl.prototype.getDirection=function(){return goog.i18n.bidi.Dir.LTR},goog.DEBUG&&(goog.html.SafeUrl.prototype.toString=function(){return"SafeUrl{"+this.privateDoNotAccessOrElseSafeUrlWrappedValue_+"}"}),goog.html.SafeUrl.unwrap=function(e){return goog.html.SafeUrl.unwrapTrustedURL(e).toString()},goog.html.SafeUrl.unwrapTrustedURL=function(e){return e instanceof goog.html.SafeUrl&&e.constructor===goog.html.SafeUrl&&e.SAFE_URL_TYPE_MARKER_GOOG_HTML_SECURITY_PRIVATE_===goog.html.SafeUrl.TYPE_MARKER_GOOG_HTML_SECURITY_PRIVATE_?e.privateDoNotAccessOrElseSafeUrlWrappedValue_:(goog.asserts.fail("expected object of type SafeUrl, got '"+e+"' of type "+goog.typeOf(e)),"type_error:SafeUrl")},goog.html.SafeUrl.fromConstant=function(e){return goog.html.SafeUrl.createSafeUrlSecurityPrivateDoNotAccessOrElse(goog.string.Const.unwrap(e))},goog.html.SAFE_MIME_TYPE_PATTERN_=/^(?:audio\/(?:3gpp2|3gpp|aac|L16|midi|mp3|mp4|mpeg|oga|ogg|opus|x-m4a|x-wav|wav|webm)|image\/(?:bmp|gif|jpeg|jpg|png|tiff|webp|x-icon)|text\/csv|video\/(?:mpeg|mp4|ogg|webm|quicktime))(?:;\w+=(?:\w+|"[\w;=]+"))*$/i,goog.html.SafeUrl.isSafeMimeType=function(e){return goog.html.SAFE_MIME_TYPE_PATTERN_.test(e)},goog.html.SafeUrl.fromBlob=function(e){return e=goog.html.SAFE_MIME_TYPE_PATTERN_.test(e.type)?goog.fs.url.createObjectUrl(e):goog.html.SafeUrl.INNOCUOUS_STRING,goog.html.SafeUrl.createSafeUrlSecurityPrivateDoNotAccessOrElse(e)},goog.html.DATA_URL_PATTERN_=/^data:([^,]*);base64,[a-z0-9+\/]+=*$/i,goog.html.SafeUrl.fromDataUrl=function(e){var t=(e=e.replace(/(%0A|%0D)/g,"")).match(goog.html.DATA_URL_PATTERN_);return t=t&&goog.html.SAFE_MIME_TYPE_PATTERN_.test(t[1]),goog.html.SafeUrl.createSafeUrlSecurityPrivateDoNotAccessOrElse(t?e:goog.html.SafeUrl.INNOCUOUS_STRING)},goog.html.SafeUrl.fromTelUrl=function(e){return goog.string.internal.caseInsensitiveStartsWith(e,"tel:")||(e=goog.html.SafeUrl.INNOCUOUS_STRING),goog.html.SafeUrl.createSafeUrlSecurityPrivateDoNotAccessOrElse(e)},goog.html.SIP_URL_PATTERN_=/^sip[s]?:[+a-z0-9_.!$%&'*\/=^`{|}~-]+@([a-z0-9-]+\.)+[a-z0-9]{2,63}$/i,goog.html.SafeUrl.fromSipUrl=function(e){return goog.html.SIP_URL_PATTERN_.test(decodeURIComponent(e))||(e=goog.html.SafeUrl.INNOCUOUS_STRING),goog.html.SafeUrl.createSafeUrlSecurityPrivateDoNotAccessOrElse(e)},goog.html.SafeUrl.fromFacebookMessengerUrl=function(e){return goog.string.internal.caseInsensitiveStartsWith(e,"fb-messenger://share")||(e=goog.html.SafeUrl.INNOCUOUS_STRING),goog.html.SafeUrl.createSafeUrlSecurityPrivateDoNotAccessOrElse(e)},goog.html.SafeUrl.fromWhatsAppUrl=function(e){return goog.string.internal.caseInsensitiveStartsWith(e,"whatsapp://send")||(e=goog.html.SafeUrl.INNOCUOUS_STRING),goog.html.SafeUrl.createSafeUrlSecurityPrivateDoNotAccessOrElse(e)},goog.html.SafeUrl.fromSmsUrl=function(e){return goog.string.internal.caseInsensitiveStartsWith(e,"sms:")&&goog.html.SafeUrl.isSmsUrlBodyValid_(e)||(e=goog.html.SafeUrl.INNOCUOUS_STRING),goog.html.SafeUrl.createSafeUrlSecurityPrivateDoNotAccessOrElse(e)},goog.html.SafeUrl.isSmsUrlBodyValid_=function(e){var t=e.indexOf("#");if(0<t&&(e=e.substring(0,t)),!(t=e.match(/[?&]body=/gi)))return!0;if(1<t.length)return!1;if(!(e=e.match(/[?&]body=([^&]*)/)[1]))return!0;try{decodeURIComponent(e)}catch(e){return!1}return/^(?:[a-z0-9\-_.~]|%[0-9a-f]{2})+$/i.test(e)},goog.html.SafeUrl.fromSshUrl=function(e){return goog.string.internal.caseInsensitiveStartsWith(e,"ssh://")||(e=goog.html.SafeUrl.INNOCUOUS_STRING),goog.html.SafeUrl.createSafeUrlSecurityPrivateDoNotAccessOrElse(e)},goog.html.SafeUrl.sanitizeChromeExtensionUrl=function(e,t){return goog.html.SafeUrl.sanitizeExtensionUrl_(/^chrome-extension:\/\/([^\/]+)\//,e,t)},goog.html.SafeUrl.sanitizeFirefoxExtensionUrl=function(e,t){return goog.html.SafeUrl.sanitizeExtensionUrl_(/^moz-extension:\/\/([^\/]+)\//,e,t)},goog.html.SafeUrl.sanitizeEdgeExtensionUrl=function(e,t){return goog.html.SafeUrl.sanitizeExtensionUrl_(/^ms-browser-extension:\/\/([^\/]+)\//,e,t)},goog.html.SafeUrl.sanitizeExtensionUrl_=function(e,t,o){return(e=e.exec(t))?(e=e[1],-1==(o instanceof goog.string.Const?[goog.string.Const.unwrap(o)]:o.map((function(e){return goog.string.Const.unwrap(e)}))).indexOf(e)&&(t=goog.html.SafeUrl.INNOCUOUS_STRING)):t=goog.html.SafeUrl.INNOCUOUS_STRING,goog.html.SafeUrl.createSafeUrlSecurityPrivateDoNotAccessOrElse(t)},goog.html.SafeUrl.fromTrustedResourceUrl=function(e){return goog.html.SafeUrl.createSafeUrlSecurityPrivateDoNotAccessOrElse(goog.html.TrustedResourceUrl.unwrap(e))},goog.html.SAFE_URL_PATTERN_=/^(?:(?:https?|mailto|ftp):|[^:/?#]*(?:[/?#]|$))/i,goog.html.SafeUrl.SAFE_URL_PATTERN=goog.html.SAFE_URL_PATTERN_,goog.html.SafeUrl.sanitize=function(e){return e instanceof goog.html.SafeUrl?e:(e="object"==typeof e&&e.implementsGoogStringTypedString?e.getTypedStringValue():String(e),goog.html.SAFE_URL_PATTERN_.test(e)||(e=goog.html.SafeUrl.INNOCUOUS_STRING),goog.html.SafeUrl.createSafeUrlSecurityPrivateDoNotAccessOrElse(e))},goog.html.SafeUrl.sanitizeAssertUnchanged=function(e,t){return e instanceof goog.html.SafeUrl?e:(e="object"==typeof e&&e.implementsGoogStringTypedString?e.getTypedStringValue():String(e),t&&/^data:/i.test(e)&&(t=goog.html.SafeUrl.fromDataUrl(e)).getTypedStringValue()==e?t:(goog.asserts.assert(goog.html.SAFE_URL_PATTERN_.test(e),"%s does not match the safe URL pattern",e)||(e=goog.html.SafeUrl.INNOCUOUS_STRING),goog.html.SafeUrl.createSafeUrlSecurityPrivateDoNotAccessOrElse(e)))},goog.html.SafeUrl.TYPE_MARKER_GOOG_HTML_SECURITY_PRIVATE_={},goog.html.SafeUrl.createSafeUrlSecurityPrivateDoNotAccessOrElse=function(e){var t=new goog.html.SafeUrl;return t.privateDoNotAccessOrElseSafeUrlWrappedValue_=goog.html.trustedtypes.PRIVATE_DO_NOT_ACCESS_OR_ELSE_POLICY?goog.html.trustedtypes.PRIVATE_DO_NOT_ACCESS_OR_ELSE_POLICY.createURL(e):e,t},goog.html.SafeUrl.ABOUT_BLANK=goog.html.SafeUrl.createSafeUrlSecurityPrivateDoNotAccessOrElse("about:blank"),goog.html.SafeStyle=function(){this.privateDoNotAccessOrElseSafeStyleWrappedValue_="",this.SAFE_STYLE_TYPE_MARKER_GOOG_HTML_SECURITY_PRIVATE_=goog.html.SafeStyle.TYPE_MARKER_GOOG_HTML_SECURITY_PRIVATE_},goog.html.SafeStyle.prototype.implementsGoogStringTypedString=!0,goog.html.SafeStyle.TYPE_MARKER_GOOG_HTML_SECURITY_PRIVATE_={},goog.html.SafeStyle.fromConstant=function(e){return 0===(e=goog.string.Const.unwrap(e)).length?goog.html.SafeStyle.EMPTY:(goog.asserts.assert(goog.string.internal.endsWith(e,";"),"Last character of style string is not ';': "+e),goog.asserts.assert(goog.string.internal.contains(e,":"),"Style string must contain at least one ':', to specify a \"name: value\" pair: "+e),goog.html.SafeStyle.createSafeStyleSecurityPrivateDoNotAccessOrElse(e))},goog.html.SafeStyle.prototype.getTypedStringValue=function(){return this.privateDoNotAccessOrElseSafeStyleWrappedValue_},goog.DEBUG&&(goog.html.SafeStyle.prototype.toString=function(){return"SafeStyle{"+this.privateDoNotAccessOrElseSafeStyleWrappedValue_+"}"}),goog.html.SafeStyle.unwrap=function(e){return e instanceof goog.html.SafeStyle&&e.constructor===goog.html.SafeStyle&&e.SAFE_STYLE_TYPE_MARKER_GOOG_HTML_SECURITY_PRIVATE_===goog.html.SafeStyle.TYPE_MARKER_GOOG_HTML_SECURITY_PRIVATE_?e.privateDoNotAccessOrElseSafeStyleWrappedValue_:(goog.asserts.fail("expected object of type SafeStyle, got '"+e+"' of type "+goog.typeOf(e)),"type_error:SafeStyle")},goog.html.SafeStyle.createSafeStyleSecurityPrivateDoNotAccessOrElse=function(e){return(new goog.html.SafeStyle).initSecurityPrivateDoNotAccessOrElse_(e)},goog.html.SafeStyle.prototype.initSecurityPrivateDoNotAccessOrElse_=function(e){return this.privateDoNotAccessOrElseSafeStyleWrappedValue_=e,this},goog.html.SafeStyle.EMPTY=goog.html.SafeStyle.createSafeStyleSecurityPrivateDoNotAccessOrElse(""),goog.html.SafeStyle.INNOCUOUS_STRING="zClosurez",goog.html.SafeStyle.create=function(e){var t,o="";for(t in e){if(!/^[-_a-zA-Z0-9]+$/.test(t))throw Error("Name allows only [-_a-zA-Z0-9], got: "+t);var r=e[t];null!=r&&(o+=t+":"+(r=goog.isArray(r)?goog.array.map(r,goog.html.SafeStyle.sanitizePropertyValue_).join(" "):goog.html.SafeStyle.sanitizePropertyValue_(r))+";")}return o?goog.html.SafeStyle.createSafeStyleSecurityPrivateDoNotAccessOrElse(o):goog.html.SafeStyle.EMPTY},goog.html.SafeStyle.sanitizePropertyValue_=function(e){if(e instanceof goog.html.SafeUrl)return'url("'+goog.html.SafeUrl.unwrap(e).replace(/</g,"%3c").replace(/[\\"]/g,"\\$&")+'")';if(e=e instanceof goog.string.Const?goog.string.Const.unwrap(e):goog.html.SafeStyle.sanitizePropertyValueString_(String(e)),/[{;}]/.test(e))throw new goog.asserts.AssertionError("Value does not allow [{;}], got: %s.",[e]);return e},goog.html.SafeStyle.sanitizePropertyValueString_=function(e){var t=e.replace(goog.html.SafeStyle.FUNCTIONS_RE_,"$1").replace(goog.html.SafeStyle.FUNCTIONS_RE_,"$1").replace(goog.html.SafeStyle.URL_RE_,"url");return goog.html.SafeStyle.VALUE_RE_.test(t)?goog.html.SafeStyle.COMMENT_RE_.test(e)?(goog.asserts.fail("String value disallows comments, got: "+e),goog.html.SafeStyle.INNOCUOUS_STRING):goog.html.SafeStyle.hasBalancedQuotes_(e)?goog.html.SafeStyle.hasBalancedSquareBrackets_(e)?goog.html.SafeStyle.sanitizeUrl_(e):(goog.asserts.fail("String value requires balanced square brackets and one identifier per pair of brackets, got: "+e),goog.html.SafeStyle.INNOCUOUS_STRING):(goog.asserts.fail("String value requires balanced quotes, got: "+e),goog.html.SafeStyle.INNOCUOUS_STRING):(goog.asserts.fail("String value allows only "+goog.html.SafeStyle.VALUE_ALLOWED_CHARS_+" and simple functions, got: "+e),goog.html.SafeStyle.INNOCUOUS_STRING)},goog.html.SafeStyle.hasBalancedQuotes_=function(e){for(var t=!0,o=!0,r=0;r<e.length;r++){var n=e.charAt(r);"'"==n&&o?t=!t:'"'==n&&t&&(o=!o)}return t&&o},goog.html.SafeStyle.hasBalancedSquareBrackets_=function(e){for(var t=!0,o=/^[-_a-zA-Z0-9]$/,r=0;r<e.length;r++){var n=e.charAt(r);if("]"==n){if(t)return!1;t=!0}else if("["==n){if(!t)return!1;t=!1}else if(!t&&!o.test(n))return!1}return t},goog.html.SafeStyle.VALUE_ALLOWED_CHARS_="[-,.\"'%_!# a-zA-Z0-9\\[\\]]",goog.html.SafeStyle.VALUE_RE_=new RegExp("^"+goog.html.SafeStyle.VALUE_ALLOWED_CHARS_+"+$"),goog.html.SafeStyle.URL_RE_=/\b(url\([ \t\n]*)('[ -&(-\[\]-~]*'|"[ !#-\[\]-~]*"|[!#-&*-\[\]-~]*)([ \t\n]*\))/g,goog.html.SafeStyle.FUNCTIONS_RE_=/\b(hsl|hsla|rgb|rgba|matrix|calc|minmax|fit-content|repeat|(rotate|scale|translate)(X|Y|Z|3d)?)\([-+*/0-9a-z.%\[\], ]+\)/g,goog.html.SafeStyle.COMMENT_RE_=/\/\*/,goog.html.SafeStyle.sanitizeUrl_=function(e){return e.replace(goog.html.SafeStyle.URL_RE_,(function(e,t,o,r){var n="";return o=o.replace(/^(['"])(.*)\1$/,(function(e,t,o){return n=t,o})),e=goog.html.SafeUrl.sanitize(o).getTypedStringValue(),t+n+e+n+r}))},goog.html.SafeStyle.concat=function(e){var t="",o=function(e){goog.isArray(e)?goog.array.forEach(e,o):t+=goog.html.SafeStyle.unwrap(e)};return goog.array.forEach(arguments,o),t?goog.html.SafeStyle.createSafeStyleSecurityPrivateDoNotAccessOrElse(t):goog.html.SafeStyle.EMPTY},goog.html.SafeScript=function(){this.privateDoNotAccessOrElseSafeScriptWrappedValue_="",this.SAFE_SCRIPT_TYPE_MARKER_GOOG_HTML_SECURITY_PRIVATE_=goog.html.SafeScript.TYPE_MARKER_GOOG_HTML_SECURITY_PRIVATE_},goog.html.SafeScript.prototype.implementsGoogStringTypedString=!0,goog.html.SafeScript.TYPE_MARKER_GOOG_HTML_SECURITY_PRIVATE_={},goog.html.SafeScript.fromConstant=function(e){return 0===(e=goog.string.Const.unwrap(e)).length?goog.html.SafeScript.EMPTY:goog.html.SafeScript.createSafeScriptSecurityPrivateDoNotAccessOrElse(e)},goog.html.SafeScript.fromConstantAndArgs=function(e,t){for(var o=[],r=1;r<arguments.length;r++)o.push(goog.html.SafeScript.stringify_(arguments[r]));return goog.html.SafeScript.createSafeScriptSecurityPrivateDoNotAccessOrElse("("+goog.string.Const.unwrap(e)+")("+o.join(", ")+");")},goog.html.SafeScript.fromJson=function(e){return goog.html.SafeScript.createSafeScriptSecurityPrivateDoNotAccessOrElse(goog.html.SafeScript.stringify_(e))},goog.html.SafeScript.prototype.getTypedStringValue=function(){return this.privateDoNotAccessOrElseSafeScriptWrappedValue_.toString()},goog.DEBUG&&(goog.html.SafeScript.prototype.toString=function(){return"SafeScript{"+this.privateDoNotAccessOrElseSafeScriptWrappedValue_+"}"}),goog.html.SafeScript.unwrap=function(e){return goog.html.SafeScript.unwrapTrustedScript(e).toString()},goog.html.SafeScript.unwrapTrustedScript=function(e){return e instanceof goog.html.SafeScript&&e.constructor===goog.html.SafeScript&&e.SAFE_SCRIPT_TYPE_MARKER_GOOG_HTML_SECURITY_PRIVATE_===goog.html.SafeScript.TYPE_MARKER_GOOG_HTML_SECURITY_PRIVATE_?e.privateDoNotAccessOrElseSafeScriptWrappedValue_:(goog.asserts.fail("expected object of type SafeScript, got '"+e+"' of type "+goog.typeOf(e)),"type_error:SafeScript")},goog.html.SafeScript.stringify_=function(e){return JSON.stringify(e).replace(/</g,"\\x3c")},goog.html.SafeScript.createSafeScriptSecurityPrivateDoNotAccessOrElse=function(e){return(new goog.html.SafeScript).initSecurityPrivateDoNotAccessOrElse_(e)},goog.html.SafeScript.prototype.initSecurityPrivateDoNotAccessOrElse_=function(e){return this.privateDoNotAccessOrElseSafeScriptWrappedValue_=goog.html.trustedtypes.PRIVATE_DO_NOT_ACCESS_OR_ELSE_POLICY?goog.html.trustedtypes.PRIVATE_DO_NOT_ACCESS_OR_ELSE_POLICY.createScript(e):e,this},goog.html.SafeScript.EMPTY=goog.html.SafeScript.createSafeScriptSecurityPrivateDoNotAccessOrElse(""),goog.object={},goog.object.is=function(e,t){return e===t?0!==e||1/e==1/t:e!=e&&t!=t},goog.object.forEach=function(e,t,o){for(var r in e)t.call(o,e[r],r,e)},goog.object.filter=function(e,t,o){var r,n={};for(r in e)t.call(o,e[r],r,e)&&(n[r]=e[r]);return n},goog.object.map=function(e,t,o){var r,n={};for(r in e)n[r]=t.call(o,e[r],r,e);return n},goog.object.some=function(e,t,o){for(var r in e)if(t.call(o,e[r],r,e))return!0;return!1},goog.object.every=function(e,t,o){for(var r in e)if(!t.call(o,e[r],r,e))return!1;return!0},goog.object.getCount=function(e){var t,o=0;for(t in e)o++;return o},goog.object.getAnyKey=function(e){for(var t in e)return t},goog.object.getAnyValue=function(e){for(var t in e)return e[t]},goog.object.contains=function(e,t){return goog.object.containsValue(e,t)},goog.object.getValues=function(e){var t,o=[],r=0;for(t in e)o[r++]=e[t];return o},goog.object.getKeys=function(e){var t,o=[],r=0;for(t in e)o[r++]=t;return o},goog.object.getValueByKeys=function(e,t){var o=goog.isArrayLike(t),r=o?t:arguments;for(o=o?0:1;o<r.length;o++){if(null==e)return;e=e[r[o]]}return e},goog.object.containsKey=function(e,t){return null!==e&&t in e},goog.object.containsValue=function(e,t){for(var o in e)if(e[o]==t)return!0;return!1},goog.object.findKey=function(e,t,o){for(var r in e)if(t.call(o,e[r],r,e))return r},goog.object.findValue=function(e,t,o){return(t=goog.object.findKey(e,t,o))&&e[t]},goog.object.isEmpty=function(e){for(var t in e)return!1;return!0},goog.object.clear=function(e){for(var t in e)delete e[t]},goog.object.remove=function(e,t){var o;return(o=t in e)&&delete e[t],o},goog.object.add=function(e,t,o){if(null!==e&&t in e)throw Error('The object already contains the key "'+t+'"');goog.object.set(e,t,o)},goog.object.get=function(e,t,o){return null!==e&&t in e?e[t]:o},goog.object.set=function(e,t,o){e[t]=o},goog.object.setIfUndefined=function(e,t,o){return t in e?e[t]:e[t]=o},goog.object.setWithReturnValueIfNotSet=function(e,t,o){return t in e?e[t]:(o=o(),e[t]=o)},goog.object.equals=function(e,t){for(var o in e)if(!(o in t)||e[o]!==t[o])return!1;for(var r in t)if(!(r in e))return!1;return!0},goog.object.clone=function(e){var t,o={};for(t in e)o[t]=e[t];return o},goog.object.unsafeClone=function(e){var t=goog.typeOf(e);if("object"==t||"array"==t){if(goog.isFunction(e.clone))return e.clone();for(var o in t="array"==t?[]:{},e)t[o]=goog.object.unsafeClone(e[o]);return t}return e},goog.object.transpose=function(e){var t,o={};for(t in e)o[e[t]]=t;return o},goog.object.PROTOTYPE_FIELDS_="constructor hasOwnProperty isPrototypeOf propertyIsEnumerable toLocaleString toString valueOf".split(" "),goog.object.extend=function(e,t){for(var o,r,n=1;n<arguments.length;n++){for(o in r=arguments[n])e[o]=r[o];for(var i=0;i<goog.object.PROTOTYPE_FIELDS_.length;i++)o=goog.object.PROTOTYPE_FIELDS_[i],Object.prototype.hasOwnProperty.call(r,o)&&(e[o]=r[o])}},goog.object.create=function(e){var t=arguments.length;if(1==t&&goog.isArray(arguments[0]))return goog.object.create.apply(null,arguments[0]);if(t%2)throw Error("Uneven number of arguments");for(var o={},r=0;r<t;r+=2)o[arguments[r]]=arguments[r+1];return o},goog.object.createSet=function(e){var t=arguments.length;if(1==t&&goog.isArray(arguments[0]))return goog.object.createSet.apply(null,arguments[0]);for(var o={},r=0;r<t;r++)o[arguments[r]]=!0;return o},goog.object.createImmutableView=function(e){var t=e;return Object.isFrozen&&!Object.isFrozen(e)&&(t=Object.create(e),Object.freeze(t)),t},goog.object.isImmutableView=function(e){return!!Object.isFrozen&&Object.isFrozen(e)},goog.object.getAllPropertyNames=function(e,t,o){if(!e)return[];if(!Object.getOwnPropertyNames||!Object.getPrototypeOf)return goog.object.getKeys(e);for(var r={};e&&(e!==Object.prototype||t)&&(e!==Function.prototype||o);){for(var n=Object.getOwnPropertyNames(e),i=0;i<n.length;i++)r[n[i]]=!0;e=Object.getPrototypeOf(e)}return goog.object.getKeys(r)},goog.object.getSuperClass=function(e){return(e=Object.getPrototypeOf(e.prototype))&&e.constructor},goog.html.SafeStyleSheet=function(){this.privateDoNotAccessOrElseSafeStyleSheetWrappedValue_="",this.SAFE_STYLE_SHEET_TYPE_MARKER_GOOG_HTML_SECURITY_PRIVATE_=goog.html.SafeStyleSheet.TYPE_MARKER_GOOG_HTML_SECURITY_PRIVATE_},goog.html.SafeStyleSheet.prototype.implementsGoogStringTypedString=!0,goog.html.SafeStyleSheet.TYPE_MARKER_GOOG_HTML_SECURITY_PRIVATE_={},goog.html.SafeStyleSheet.createRule=function(e,t){if(goog.string.internal.contains(e,"<"))throw Error("Selector does not allow '<', got: "+e);var o=e.replace(/('|")((?!\1)[^\r\n\f\\]|\\[\s\S])*\1/g,"");if(!/^[-_a-zA-Z0-9#.:* ,>+~[\]()=^$|]+$/.test(o))throw Error("Selector allows only [-_a-zA-Z0-9#.:* ,>+~[\\]()=^$|] and strings, got: "+e);if(!goog.html.SafeStyleSheet.hasBalancedBrackets_(o))throw Error("() and [] in selector must be balanced, got: "+e);return t instanceof goog.html.SafeStyle||(t=goog.html.SafeStyle.create(t)),e=e+"{"+goog.html.SafeStyle.unwrap(t).replace(/</g,"\\3C ")+"}",goog.html.SafeStyleSheet.createSafeStyleSheetSecurityPrivateDoNotAccessOrElse(e)},goog.html.SafeStyleSheet.hasBalancedBrackets_=function(e){for(var t={"(":")","[":"]"},o=[],r=0;r<e.length;r++){var n=e[r];if(t[n])o.push(t[n]);else if(goog.object.contains(t,n)&&o.pop()!=n)return!1}return 0==o.length},goog.html.SafeStyleSheet.concat=function(e){var t="",o=function(e){goog.isArray(e)?goog.array.forEach(e,o):t+=goog.html.SafeStyleSheet.unwrap(e)};return goog.array.forEach(arguments,o),goog.html.SafeStyleSheet.createSafeStyleSheetSecurityPrivateDoNotAccessOrElse(t)},goog.html.SafeStyleSheet.fromConstant=function(e){return 0===(e=goog.string.Const.unwrap(e)).length?goog.html.SafeStyleSheet.EMPTY:(goog.asserts.assert(!goog.string.internal.contains(e,"<"),"Forbidden '<' character in style sheet string: "+e),goog.html.SafeStyleSheet.createSafeStyleSheetSecurityPrivateDoNotAccessOrElse(e))},goog.html.SafeStyleSheet.prototype.getTypedStringValue=function(){return this.privateDoNotAccessOrElseSafeStyleSheetWrappedValue_},goog.DEBUG&&(goog.html.SafeStyleSheet.prototype.toString=function(){return"SafeStyleSheet{"+this.privateDoNotAccessOrElseSafeStyleSheetWrappedValue_+"}"}),goog.html.SafeStyleSheet.unwrap=function(e){return e instanceof goog.html.SafeStyleSheet&&e.constructor===goog.html.SafeStyleSheet&&e.SAFE_STYLE_SHEET_TYPE_MARKER_GOOG_HTML_SECURITY_PRIVATE_===goog.html.SafeStyleSheet.TYPE_MARKER_GOOG_HTML_SECURITY_PRIVATE_?e.privateDoNotAccessOrElseSafeStyleSheetWrappedValue_:(goog.asserts.fail("expected object of type SafeStyleSheet, got '"+e+"' of type "+goog.typeOf(e)),"type_error:SafeStyleSheet")},goog.html.SafeStyleSheet.createSafeStyleSheetSecurityPrivateDoNotAccessOrElse=function(e){return(new goog.html.SafeStyleSheet).initSecurityPrivateDoNotAccessOrElse_(e)},goog.html.SafeStyleSheet.prototype.initSecurityPrivateDoNotAccessOrElse_=function(e){return this.privateDoNotAccessOrElseSafeStyleSheetWrappedValue_=e,this},goog.html.SafeStyleSheet.EMPTY=goog.html.SafeStyleSheet.createSafeStyleSheetSecurityPrivateDoNotAccessOrElse(""),goog.dom.tags={},goog.dom.tags.VOID_TAGS_={area:!0,base:!0,br:!0,col:!0,command:!0,embed:!0,hr:!0,img:!0,input:!0,keygen:!0,link:!0,meta:!0,param:!0,source:!0,track:!0,wbr:!0},goog.dom.tags.isVoidTag=function(e){return!0===goog.dom.tags.VOID_TAGS_[e]},goog.dom.HtmlElement=function(){},goog.dom.TagName=function(e){this.tagName_=e},goog.dom.TagName.prototype.toString=function(){return this.tagName_},goog.dom.TagName.A=new goog.dom.TagName("A"),goog.dom.TagName.ABBR=new goog.dom.TagName("ABBR"),goog.dom.TagName.ACRONYM=new goog.dom.TagName("ACRONYM"),goog.dom.TagName.ADDRESS=new goog.dom.TagName("ADDRESS"),goog.dom.TagName.APPLET=new goog.dom.TagName("APPLET"),goog.dom.TagName.AREA=new goog.dom.TagName("AREA"),goog.dom.TagName.ARTICLE=new goog.dom.TagName("ARTICLE"),goog.dom.TagName.ASIDE=new goog.dom.TagName("ASIDE"),goog.dom.TagName.AUDIO=new goog.dom.TagName("AUDIO"),goog.dom.TagName.B=new goog.dom.TagName("B"),goog.dom.TagName.BASE=new goog.dom.TagName("BASE"),goog.dom.TagName.BASEFONT=new goog.dom.TagName("BASEFONT"),goog.dom.TagName.BDI=new goog.dom.TagName("BDI"),goog.dom.TagName.BDO=new goog.dom.TagName("BDO"),goog.dom.TagName.BIG=new goog.dom.TagName("BIG"),goog.dom.TagName.BLOCKQUOTE=new goog.dom.TagName("BLOCKQUOTE"),goog.dom.TagName.BODY=new goog.dom.TagName("BODY"),goog.dom.TagName.BR=new goog.dom.TagName("BR"),goog.dom.TagName.BUTTON=new goog.dom.TagName("BUTTON"),goog.dom.TagName.CANVAS=new goog.dom.TagName("CANVAS"),goog.dom.TagName.CAPTION=new goog.dom.TagName("CAPTION"),goog.dom.TagName.CENTER=new goog.dom.TagName("CENTER"),goog.dom.TagName.CITE=new goog.dom.TagName("CITE"),goog.dom.TagName.CODE=new goog.dom.TagName("CODE"),goog.dom.TagName.COL=new goog.dom.TagName("COL"),goog.dom.TagName.COLGROUP=new goog.dom.TagName("COLGROUP"),goog.dom.TagName.COMMAND=new goog.dom.TagName("COMMAND"),goog.dom.TagName.DATA=new goog.dom.TagName("DATA"),goog.dom.TagName.DATALIST=new goog.dom.TagName("DATALIST"),goog.dom.TagName.DD=new goog.dom.TagName("DD"),goog.dom.TagName.DEL=new goog.dom.TagName("DEL"),goog.dom.TagName.DETAILS=new goog.dom.TagName("DETAILS"),goog.dom.TagName.DFN=new goog.dom.TagName("DFN"),goog.dom.TagName.DIALOG=new goog.dom.TagName("DIALOG"),goog.dom.TagName.DIR=new goog.dom.TagName("DIR"),goog.dom.TagName.DIV=new goog.dom.TagName("DIV"),goog.dom.TagName.DL=new goog.dom.TagName("DL"),goog.dom.TagName.DT=new goog.dom.TagName("DT"),goog.dom.TagName.EM=new goog.dom.TagName("EM"),goog.dom.TagName.EMBED=new goog.dom.TagName("EMBED"),goog.dom.TagName.FIELDSET=new goog.dom.TagName("FIELDSET"),goog.dom.TagName.FIGCAPTION=new goog.dom.TagName("FIGCAPTION"),goog.dom.TagName.FIGURE=new goog.dom.TagName("FIGURE"),goog.dom.TagName.FONT=new goog.dom.TagName("FONT"),goog.dom.TagName.FOOTER=new goog.dom.TagName("FOOTER"),goog.dom.TagName.FORM=new goog.dom.TagName("FORM"),goog.dom.TagName.FRAME=new goog.dom.TagName("FRAME"),goog.dom.TagName.FRAMESET=new goog.dom.TagName("FRAMESET"),goog.dom.TagName.H1=new goog.dom.TagName("H1"),goog.dom.TagName.H2=new goog.dom.TagName("H2"),goog.dom.TagName.H3=new goog.dom.TagName("H3"),goog.dom.TagName.H4=new goog.dom.TagName("H4"),goog.dom.TagName.H5=new goog.dom.TagName("H5"),goog.dom.TagName.H6=new goog.dom.TagName("H6"),goog.dom.TagName.HEAD=new goog.dom.TagName("HEAD"),goog.dom.TagName.HEADER=new goog.dom.TagName("HEADER"),goog.dom.TagName.HGROUP=new goog.dom.TagName("HGROUP"),goog.dom.TagName.HR=new goog.dom.TagName("HR"),goog.dom.TagName.HTML=new goog.dom.TagName("HTML"),goog.dom.TagName.I=new goog.dom.TagName("I"),goog.dom.TagName.IFRAME=new goog.dom.TagName("IFRAME"),goog.dom.TagName.IMG=new goog.dom.TagName("IMG"),goog.dom.TagName.INPUT=new goog.dom.TagName("INPUT"),goog.dom.TagName.INS=new goog.dom.TagName("INS"),goog.dom.TagName.ISINDEX=new goog.dom.TagName("ISINDEX"),goog.dom.TagName.KBD=new goog.dom.TagName("KBD"),goog.dom.TagName.KEYGEN=new goog.dom.TagName("KEYGEN"),goog.dom.TagName.LABEL=new goog.dom.TagName("LABEL"),goog.dom.TagName.LEGEND=new goog.dom.TagName("LEGEND"),goog.dom.TagName.LI=new goog.dom.TagName("LI"),goog.dom.TagName.LINK=new goog.dom.TagName("LINK"),goog.dom.TagName.MAIN=new goog.dom.TagName("MAIN"),goog.dom.TagName.MAP=new goog.dom.TagName("MAP"),goog.dom.TagName.MARK=new goog.dom.TagName("MARK"),goog.dom.TagName.MATH=new goog.dom.TagName("MATH"),goog.dom.TagName.MENU=new goog.dom.TagName("MENU"),goog.dom.TagName.MENUITEM=new goog.dom.TagName("MENUITEM"),goog.dom.TagName.META=new goog.dom.TagName("META"),goog.dom.TagName.METER=new goog.dom.TagName("METER"),goog.dom.TagName.NAV=new goog.dom.TagName("NAV"),goog.dom.TagName.NOFRAMES=new goog.dom.TagName("NOFRAMES"),goog.dom.TagName.NOSCRIPT=new goog.dom.TagName("NOSCRIPT"),goog.dom.TagName.OBJECT=new goog.dom.TagName("OBJECT"),goog.dom.TagName.OL=new goog.dom.TagName("OL"),goog.dom.TagName.OPTGROUP=new goog.dom.TagName("OPTGROUP"),goog.dom.TagName.OPTION=new goog.dom.TagName("OPTION"),goog.dom.TagName.OUTPUT=new goog.dom.TagName("OUTPUT"),goog.dom.TagName.P=new goog.dom.TagName("P"),goog.dom.TagName.PARAM=new goog.dom.TagName("PARAM"),goog.dom.TagName.PICTURE=new goog.dom.TagName("PICTURE"),goog.dom.TagName.PRE=new goog.dom.TagName("PRE"),goog.dom.TagName.PROGRESS=new goog.dom.TagName("PROGRESS"),goog.dom.TagName.Q=new goog.dom.TagName("Q"),goog.dom.TagName.RP=new goog.dom.TagName("RP"),goog.dom.TagName.RT=new goog.dom.TagName("RT"),goog.dom.TagName.RTC=new goog.dom.TagName("RTC"),goog.dom.TagName.RUBY=new goog.dom.TagName("RUBY"),goog.dom.TagName.S=new goog.dom.TagName("S"),goog.dom.TagName.SAMP=new goog.dom.TagName("SAMP"),goog.dom.TagName.SCRIPT=new goog.dom.TagName("SCRIPT"),goog.dom.TagName.SECTION=new goog.dom.TagName("SECTION"),goog.dom.TagName.SELECT=new goog.dom.TagName("SELECT"),goog.dom.TagName.SMALL=new goog.dom.TagName("SMALL"),goog.dom.TagName.SOURCE=new goog.dom.TagName("SOURCE"),goog.dom.TagName.SPAN=new goog.dom.TagName("SPAN"),goog.dom.TagName.STRIKE=new goog.dom.TagName("STRIKE"),goog.dom.TagName.STRONG=new goog.dom.TagName("STRONG"),goog.dom.TagName.STYLE=new goog.dom.TagName("STYLE"),goog.dom.TagName.SUB=new goog.dom.TagName("SUB"),goog.dom.TagName.SUMMARY=new goog.dom.TagName("SUMMARY"),goog.dom.TagName.SUP=new goog.dom.TagName("SUP"),goog.dom.TagName.SVG=new goog.dom.TagName("SVG"),goog.dom.TagName.TABLE=new goog.dom.TagName("TABLE"),goog.dom.TagName.TBODY=new goog.dom.TagName("TBODY"),goog.dom.TagName.TD=new goog.dom.TagName("TD"),goog.dom.TagName.TEMPLATE=new goog.dom.TagName("TEMPLATE"),goog.dom.TagName.TEXTAREA=new goog.dom.TagName("TEXTAREA"),goog.dom.TagName.TFOOT=new goog.dom.TagName("TFOOT"),goog.dom.TagName.TH=new goog.dom.TagName("TH"),goog.dom.TagName.THEAD=new goog.dom.TagName("THEAD"),goog.dom.TagName.TIME=new goog.dom.TagName("TIME"),goog.dom.TagName.TITLE=new goog.dom.TagName("TITLE"),goog.dom.TagName.TR=new goog.dom.TagName("TR"),goog.dom.TagName.TRACK=new goog.dom.TagName("TRACK"),goog.dom.TagName.TT=new goog.dom.TagName("TT"),goog.dom.TagName.U=new goog.dom.TagName("U"),goog.dom.TagName.UL=new goog.dom.TagName("UL"),goog.dom.TagName.VAR=new goog.dom.TagName("VAR"),goog.dom.TagName.VIDEO=new goog.dom.TagName("VIDEO"),goog.dom.TagName.WBR=new goog.dom.TagName("WBR"),goog.labs={},goog.labs.userAgent={},goog.labs.userAgent.util={},goog.labs.userAgent.util.getNativeUserAgentString_=function(){var e=goog.labs.userAgent.util.getNavigator_();return e&&(e=e.userAgent)?e:""},goog.labs.userAgent.util.getNavigator_=function(){return goog.global.navigator},goog.labs.userAgent.util.userAgent_=goog.labs.userAgent.util.getNativeUserAgentString_(),goog.labs.userAgent.util.setUserAgent=function(e){goog.labs.userAgent.util.userAgent_=e||goog.labs.userAgent.util.getNativeUserAgentString_()},goog.labs.userAgent.util.getUserAgent=function(){return goog.labs.userAgent.util.userAgent_},goog.labs.userAgent.util.matchUserAgent=function(e){var t=goog.labs.userAgent.util.getUserAgent();return goog.string.internal.contains(t,e)},goog.labs.userAgent.util.matchUserAgentIgnoreCase=function(e){var t=goog.labs.userAgent.util.getUserAgent();return goog.string.internal.caseInsensitiveContains(t,e)},goog.labs.userAgent.util.extractVersionTuples=function(e){for(var t,o=/(\w[\w ]+)\/([^\s]+)\s*(?:\((.*?)\))?/g,r=[];t=o.exec(e);)r.push([t[1],t[2],t[3]||void 0]);return r},goog.labs.userAgent.browser={},goog.labs.userAgent.browser.matchOpera_=function(){return goog.labs.userAgent.util.matchUserAgent("Opera")},goog.labs.userAgent.browser.matchIE_=function(){return goog.labs.userAgent.util.matchUserAgent("Trident")||goog.labs.userAgent.util.matchUserAgent("MSIE")},goog.labs.userAgent.browser.matchEdgeHtml_=function(){return goog.labs.userAgent.util.matchUserAgent("Edge")},goog.labs.userAgent.browser.matchEdgeChromium_=function(){return goog.labs.userAgent.util.matchUserAgent("Edg/")},goog.labs.userAgent.browser.matchOperaChromium_=function(){return goog.labs.userAgent.util.matchUserAgent("OPR")},goog.labs.userAgent.browser.matchFirefox_=function(){return goog.labs.userAgent.util.matchUserAgent("Firefox")||goog.labs.userAgent.util.matchUserAgent("FxiOS")},goog.labs.userAgent.browser.matchSafari_=function(){return goog.labs.userAgent.util.matchUserAgent("Safari")&&!(goog.labs.userAgent.browser.matchChrome_()||goog.labs.userAgent.browser.matchCoast_()||goog.labs.userAgent.browser.matchOpera_()||goog.labs.userAgent.browser.matchEdgeHtml_()||goog.labs.userAgent.browser.matchEdgeChromium_()||goog.labs.userAgent.browser.matchOperaChromium_()||goog.labs.userAgent.browser.matchFirefox_()||goog.labs.userAgent.browser.isSilk()||goog.labs.userAgent.util.matchUserAgent("Android"))},goog.labs.userAgent.browser.matchCoast_=function(){return goog.labs.userAgent.util.matchUserAgent("Coast")},goog.labs.userAgent.browser.matchIosWebview_=function(){return(goog.labs.userAgent.util.matchUserAgent("iPad")||goog.labs.userAgent.util.matchUserAgent("iPhone"))&&!goog.labs.userAgent.browser.matchSafari_()&&!goog.labs.userAgent.browser.matchChrome_()&&!goog.labs.userAgent.browser.matchCoast_()&&!goog.labs.userAgent.browser.matchFirefox_()&&goog.labs.userAgent.util.matchUserAgent("AppleWebKit")},goog.labs.userAgent.browser.matchChrome_=function(){return(goog.labs.userAgent.util.matchUserAgent("Chrome")||goog.labs.userAgent.util.matchUserAgent("CriOS"))&&!goog.labs.userAgent.browser.matchEdgeHtml_()},goog.labs.userAgent.browser.matchAndroidBrowser_=function(){return goog.labs.userAgent.util.matchUserAgent("Android")&&!(goog.labs.userAgent.browser.isChrome()||goog.labs.userAgent.browser.isFirefox()||goog.labs.userAgent.browser.isOpera()||goog.labs.userAgent.browser.isSilk())},goog.labs.userAgent.browser.isOpera=goog.labs.userAgent.browser.matchOpera_,goog.labs.userAgent.browser.isIE=goog.labs.userAgent.browser.matchIE_,goog.labs.userAgent.browser.isEdge=goog.labs.userAgent.browser.matchEdgeHtml_,goog.labs.userAgent.browser.isEdgeChromium=goog.labs.userAgent.browser.matchEdgeChromium_,goog.labs.userAgent.browser.isOperaChromium=goog.labs.userAgent.browser.matchOperaChromium_,goog.labs.userAgent.browser.isFirefox=goog.labs.userAgent.browser.matchFirefox_,goog.labs.userAgent.browser.isSafari=goog.labs.userAgent.browser.matchSafari_,goog.labs.userAgent.browser.isCoast=goog.labs.userAgent.browser.matchCoast_,goog.labs.userAgent.browser.isIosWebview=goog.labs.userAgent.browser.matchIosWebview_,goog.labs.userAgent.browser.isChrome=goog.labs.userAgent.browser.matchChrome_,goog.labs.userAgent.browser.isAndroidBrowser=goog.labs.userAgent.browser.matchAndroidBrowser_,goog.labs.userAgent.browser.isSilk=function(){return goog.labs.userAgent.util.matchUserAgent("Silk")},goog.labs.userAgent.browser.getVersion=function(){function e(e){return e=goog.array.find(e,r),o[e]||""}var t=goog.labs.userAgent.util.getUserAgent();if(goog.labs.userAgent.browser.isIE())return goog.labs.userAgent.browser.getIEVersion_(t);t=goog.labs.userAgent.util.extractVersionTuples(t);var o={};goog.array.forEach(t,(function(e){o[e[0]]=e[1]}));var r=goog.partial(goog.object.containsKey,o);return goog.labs.userAgent.browser.isOpera()?e(["Version","Opera"]):goog.labs.userAgent.browser.isEdge()?e(["Edge"]):goog.labs.userAgent.browser.isEdgeChromium()?e(["Edg"]):goog.labs.userAgent.browser.isChrome()?e(["Chrome","CriOS"]):(t=t[2])&&t[1]||""},goog.labs.userAgent.browser.isVersionOrHigher=function(e){return 0<=goog.string.internal.compareVersions(goog.labs.userAgent.browser.getVersion(),e)},goog.labs.userAgent.browser.getIEVersion_=function(e){var t=/rv: *([\d\.]*)/.exec(e);if(t&&t[1])return t[1];t="";var o=/MSIE +([\d\.]+)/.exec(e);if(o&&o[1])if(e=/Trident\/(\d.\d)/.exec(e),"7.0"==o[1])if(e&&e[1])switch(e[1]){case"4.0":t="8.0";break;case"5.0":t="9.0";break;case"6.0":t="10.0";break;case"7.0":t="11.0"}else t="7.0";else t=o[1];return t},goog.html.SafeHtml=function(){this.privateDoNotAccessOrElseSafeHtmlWrappedValue_="",this.SAFE_HTML_TYPE_MARKER_GOOG_HTML_SECURITY_PRIVATE_=goog.html.SafeHtml.TYPE_MARKER_GOOG_HTML_SECURITY_PRIVATE_,this.dir_=null},goog.html.SafeHtml.prototype.implementsGoogI18nBidiDirectionalString=!0,goog.html.SafeHtml.prototype.getDirection=function(){return this.dir_},goog.html.SafeHtml.prototype.implementsGoogStringTypedString=!0,goog.html.SafeHtml.prototype.getTypedStringValue=function(){return this.privateDoNotAccessOrElseSafeHtmlWrappedValue_.toString()},goog.DEBUG&&(goog.html.SafeHtml.prototype.toString=function(){return"SafeHtml{"+this.privateDoNotAccessOrElseSafeHtmlWrappedValue_+"}"}),goog.html.SafeHtml.unwrap=function(e){return goog.html.SafeHtml.unwrapTrustedHTML(e).toString()},goog.html.SafeHtml.unwrapTrustedHTML=function(e){return e instanceof goog.html.SafeHtml&&e.constructor===goog.html.SafeHtml&&e.SAFE_HTML_TYPE_MARKER_GOOG_HTML_SECURITY_PRIVATE_===goog.html.SafeHtml.TYPE_MARKER_GOOG_HTML_SECURITY_PRIVATE_?e.privateDoNotAccessOrElseSafeHtmlWrappedValue_:(goog.asserts.fail("expected object of type SafeHtml, got '"+e+"' of type "+goog.typeOf(e)),"type_error:SafeHtml")},goog.html.SafeHtml.htmlEscape=function(e){if(e instanceof goog.html.SafeHtml)return e;var t="object"==typeof e,o=null;return t&&e.implementsGoogI18nBidiDirectionalString&&(o=e.getDirection()),e=t&&e.implementsGoogStringTypedString?e.getTypedStringValue():String(e),goog.html.SafeHtml.createSafeHtmlSecurityPrivateDoNotAccessOrElse(goog.string.internal.htmlEscape(e),o)},goog.html.SafeHtml.htmlEscapePreservingNewlines=function(e){return e instanceof goog.html.SafeHtml?e:(e=goog.html.SafeHtml.htmlEscape(e),goog.html.SafeHtml.createSafeHtmlSecurityPrivateDoNotAccessOrElse(goog.string.internal.newLineToBr(goog.html.SafeHtml.unwrap(e)),e.getDirection()))},goog.html.SafeHtml.htmlEscapePreservingNewlinesAndSpaces=function(e){return e instanceof goog.html.SafeHtml?e:(e=goog.html.SafeHtml.htmlEscape(e),goog.html.SafeHtml.createSafeHtmlSecurityPrivateDoNotAccessOrElse(goog.string.internal.whitespaceEscape(goog.html.SafeHtml.unwrap(e)),e.getDirection()))},goog.html.SafeHtml.from=goog.html.SafeHtml.htmlEscape,goog.html.SafeHtml.VALID_NAMES_IN_TAG_=/^[a-zA-Z0-9-]+$/,goog.html.SafeHtml.URL_ATTRIBUTES_={action:!0,cite:!0,data:!0,formaction:!0,href:!0,manifest:!0,poster:!0,src:!0},goog.html.SafeHtml.NOT_ALLOWED_TAG_NAMES_={APPLET:!0,BASE:!0,EMBED:!0,IFRAME:!0,LINK:!0,MATH:!0,META:!0,OBJECT:!0,SCRIPT:!0,STYLE:!0,SVG:!0,TEMPLATE:!0},goog.html.SafeHtml.create=function(e,t,o){return goog.html.SafeHtml.verifyTagName(String(e)),goog.html.SafeHtml.createSafeHtmlTagSecurityPrivateDoNotAccessOrElse(String(e),t,o)},goog.html.SafeHtml.verifyTagName=function(e){if(!goog.html.SafeHtml.VALID_NAMES_IN_TAG_.test(e))throw Error("Invalid tag name <"+e+">.");if(e.toUpperCase()in goog.html.SafeHtml.NOT_ALLOWED_TAG_NAMES_)throw Error("Tag name <"+e+"> is not allowed for SafeHtml.")},goog.html.SafeHtml.createIframe=function(e,t,o,r){e&&goog.html.TrustedResourceUrl.unwrap(e);var n={};return n.src=e||null,n.srcdoc=t&&goog.html.SafeHtml.unwrap(t),e=goog.html.SafeHtml.combineAttributes(n,{sandbox:""},o),goog.html.SafeHtml.createSafeHtmlTagSecurityPrivateDoNotAccessOrElse("iframe",e,r)},goog.html.SafeHtml.createSandboxIframe=function(e,t,o,r){if(!goog.html.SafeHtml.canUseSandboxIframe())throw Error("The browser does not support sandboxed iframes.");var n={};return n.src=e?goog.html.SafeUrl.unwrap(goog.html.SafeUrl.sanitize(e)):null,n.srcdoc=t||null,n.sandbox="",e=goog.html.SafeHtml.combineAttributes(n,{},o),goog.html.SafeHtml.createSafeHtmlTagSecurityPrivateDoNotAccessOrElse("iframe",e,r)},goog.html.SafeHtml.canUseSandboxIframe=function(){return goog.global.HTMLIFrameElement&&"sandbox"in goog.global.HTMLIFrameElement.prototype},goog.html.SafeHtml.createScriptSrc=function(e,t){return goog.html.TrustedResourceUrl.unwrap(e),e=goog.html.SafeHtml.combineAttributes({src:e},{},t),goog.html.SafeHtml.createSafeHtmlTagSecurityPrivateDoNotAccessOrElse("script",e)},goog.html.SafeHtml.createScript=function(e,t){for(var o in t){var r=o.toLowerCase();if("language"==r||"src"==r||"text"==r||"type"==r)throw Error('Cannot set "'+r+'" attribute')}for(o="",e=goog.array.concat(e),r=0;r<e.length;r++)o+=goog.html.SafeScript.unwrap(e[r]);return e=goog.html.SafeHtml.createSafeHtmlSecurityPrivateDoNotAccessOrElse(o,goog.i18n.bidi.Dir.NEUTRAL),goog.html.SafeHtml.createSafeHtmlTagSecurityPrivateDoNotAccessOrElse("script",t,e)},goog.html.SafeHtml.createStyle=function(e,t){t=goog.html.SafeHtml.combineAttributes({type:"text/css"},{},t);var o="";e=goog.array.concat(e);for(var r=0;r<e.length;r++)o+=goog.html.SafeStyleSheet.unwrap(e[r]);return e=goog.html.SafeHtml.createSafeHtmlSecurityPrivateDoNotAccessOrElse(o,goog.i18n.bidi.Dir.NEUTRAL),goog.html.SafeHtml.createSafeHtmlTagSecurityPrivateDoNotAccessOrElse("style",t,e)},goog.html.SafeHtml.createMetaRefresh=function(e,t){return e=goog.html.SafeUrl.unwrap(goog.html.SafeUrl.sanitize(e)),(goog.labs.userAgent.browser.isIE()||goog.labs.userAgent.browser.isEdge())&&goog.string.internal.contains(e,";")&&(e="'"+e.replace(/'/g,"%27")+"'"),goog.html.SafeHtml.createSafeHtmlTagSecurityPrivateDoNotAccessOrElse("meta",{"http-equiv":"refresh",content:(t||0)+"; url="+e})},goog.html.SafeHtml.getAttrNameAndValue_=function(e,t,o){if(o instanceof goog.string.Const)o=goog.string.Const.unwrap(o);else if("style"==t.toLowerCase())o=goog.html.SafeHtml.getStyleValue_(o);else{if(/^on/i.test(t))throw Error('Attribute "'+t+'" requires goog.string.Const value, "'+o+'" given.');if(t.toLowerCase()in goog.html.SafeHtml.URL_ATTRIBUTES_)if(o instanceof goog.html.TrustedResourceUrl)o=goog.html.TrustedResourceUrl.unwrap(o);else if(o instanceof goog.html.SafeUrl)o=goog.html.SafeUrl.unwrap(o);else{if(!goog.isString(o))throw Error('Attribute "'+t+'" on tag "'+e+'" requires goog.html.SafeUrl, goog.string.Const, or string, value "'+o+'" given.');o=goog.html.SafeUrl.sanitize(o).getTypedStringValue()}}return o.implementsGoogStringTypedString&&(o=o.getTypedStringValue()),goog.asserts.assert(goog.isString(o)||goog.isNumber(o),"String or number value expected, got "+typeof o+" with value: "+o),t+'="'+goog.string.internal.htmlEscape(String(o))+'"'},goog.html.SafeHtml.getStyleValue_=function(e){if(!goog.isObject(e))throw Error('The "style" attribute requires goog.html.SafeStyle or map of style properties, '+typeof e+" given: "+e);return e instanceof goog.html.SafeStyle||(e=goog.html.SafeStyle.create(e)),goog.html.SafeStyle.unwrap(e)},goog.html.SafeHtml.createWithDir=function(e,t,o,r){return(t=goog.html.SafeHtml.create(t,o,r)).dir_=e,t},goog.html.SafeHtml.join=function(e,t){var o=(e=goog.html.SafeHtml.htmlEscape(e)).getDirection(),r=[],n=function(e){goog.isArray(e)?goog.array.forEach(e,n):(e=goog.html.SafeHtml.htmlEscape(e),r.push(goog.html.SafeHtml.unwrap(e)),e=e.getDirection(),o==goog.i18n.bidi.Dir.NEUTRAL?o=e:e!=goog.i18n.bidi.Dir.NEUTRAL&&o!=e&&(o=null))};return goog.array.forEach(t,n),goog.html.SafeHtml.createSafeHtmlSecurityPrivateDoNotAccessOrElse(r.join(goog.html.SafeHtml.unwrap(e)),o)},goog.html.SafeHtml.concat=function(e){return goog.html.SafeHtml.join(goog.html.SafeHtml.EMPTY,Array.prototype.slice.call(arguments))},goog.html.SafeHtml.concatWithDir=function(e,t){var o=goog.html.SafeHtml.concat(goog.array.slice(arguments,1));return o.dir_=e,o},goog.html.SafeHtml.TYPE_MARKER_GOOG_HTML_SECURITY_PRIVATE_={},goog.html.SafeHtml.createSafeHtmlSecurityPrivateDoNotAccessOrElse=function(e,t){return(new goog.html.SafeHtml).initSecurityPrivateDoNotAccessOrElse_(e,t)},goog.html.SafeHtml.prototype.initSecurityPrivateDoNotAccessOrElse_=function(e,t){return this.privateDoNotAccessOrElseSafeHtmlWrappedValue_=goog.html.trustedtypes.PRIVATE_DO_NOT_ACCESS_OR_ELSE_POLICY?goog.html.trustedtypes.PRIVATE_DO_NOT_ACCESS_OR_ELSE_POLICY.createHTML(e):e,this.dir_=t,this},goog.html.SafeHtml.createSafeHtmlTagSecurityPrivateDoNotAccessOrElse=function(e,t,o){var r=null,n="<"+e+goog.html.SafeHtml.stringifyAttributes(e,t);return goog.isDefAndNotNull(o)?goog.isArray(o)||(o=[o]):o=[],goog.dom.tags.isVoidTag(e.toLowerCase())?(goog.asserts.assert(!o.length,"Void tag <"+e+"> does not allow content."),n+=">"):(r=goog.html.SafeHtml.concat(o),n+=">"+goog.html.SafeHtml.unwrap(r)+"</"+e+">",r=r.getDirection()),(e=t&&t.dir)&&(r=/^(ltr|rtl|auto)$/i.test(e)?goog.i18n.bidi.Dir.NEUTRAL:null),goog.html.SafeHtml.createSafeHtmlSecurityPrivateDoNotAccessOrElse(n,r)},goog.html.SafeHtml.stringifyAttributes=function(e,t){var o="";if(t)for(var r in t){if(!goog.html.SafeHtml.VALID_NAMES_IN_TAG_.test(r))throw Error('Invalid attribute name "'+r+'".');var n=t[r];goog.isDefAndNotNull(n)&&(o+=" "+goog.html.SafeHtml.getAttrNameAndValue_(e,r,n))}return o},goog.html.SafeHtml.combineAttributes=function(e,t,o){var r,n={};for(r in e)goog.asserts.assert(r.toLowerCase()==r,"Must be lower case"),n[r]=e[r];for(r in t)goog.asserts.assert(r.toLowerCase()==r,"Must be lower case"),n[r]=t[r];for(r in o){var i=r.toLowerCase();if(i in e)throw Error('Cannot override "'+i+'" attribute, got "'+r+'" with value "'+o[r]+'"');i in t&&delete n[i],n[r]=o[r]}return n},goog.html.SafeHtml.DOCTYPE_HTML=goog.html.SafeHtml.createSafeHtmlSecurityPrivateDoNotAccessOrElse("<!DOCTYPE html>",goog.i18n.bidi.Dir.NEUTRAL),goog.html.SafeHtml.EMPTY=goog.html.SafeHtml.createSafeHtmlSecurityPrivateDoNotAccessOrElse("",goog.i18n.bidi.Dir.NEUTRAL),goog.html.SafeHtml.BR=goog.html.SafeHtml.createSafeHtmlSecurityPrivateDoNotAccessOrElse("<br>",goog.i18n.bidi.Dir.NEUTRAL),goog.html.uncheckedconversions={},goog.html.uncheckedconversions.safeHtmlFromStringKnownToSatisfyTypeContract=function(e,t,o){return goog.asserts.assertString(goog.string.Const.unwrap(e),"must provide justification"),goog.asserts.assert(!goog.string.internal.isEmptyOrWhitespace(goog.string.Const.unwrap(e)),"must provide non-empty justification"),goog.html.SafeHtml.createSafeHtmlSecurityPrivateDoNotAccessOrElse(t,o||null)},goog.html.uncheckedconversions.safeScriptFromStringKnownToSatisfyTypeContract=function(e,t){return goog.asserts.assertString(goog.string.Const.unwrap(e),"must provide justification"),goog.asserts.assert(!goog.string.internal.isEmptyOrWhitespace(goog.string.Const.unwrap(e)),"must provide non-empty justification"),goog.html.SafeScript.createSafeScriptSecurityPrivateDoNotAccessOrElse(t)},goog.html.uncheckedconversions.safeStyleFromStringKnownToSatisfyTypeContract=function(e,t){return goog.asserts.assertString(goog.string.Const.unwrap(e),"must provide justification"),goog.asserts.assert(!goog.string.internal.isEmptyOrWhitespace(goog.string.Const.unwrap(e)),"must provide non-empty justification"),goog.html.SafeStyle.createSafeStyleSecurityPrivateDoNotAccessOrElse(t)},goog.html.uncheckedconversions.safeStyleSheetFromStringKnownToSatisfyTypeContract=function(e,t){return goog.asserts.assertString(goog.string.Const.unwrap(e),"must provide justification"),goog.asserts.assert(!goog.string.internal.isEmptyOrWhitespace(goog.string.Const.unwrap(e)),"must provide non-empty justification"),goog.html.SafeStyleSheet.createSafeStyleSheetSecurityPrivateDoNotAccessOrElse(t)},goog.html.uncheckedconversions.safeUrlFromStringKnownToSatisfyTypeContract=function(e,t){return goog.asserts.assertString(goog.string.Const.unwrap(e),"must provide justification"),goog.asserts.assert(!goog.string.internal.isEmptyOrWhitespace(goog.string.Const.unwrap(e)),"must provide non-empty justification"),goog.html.SafeUrl.createSafeUrlSecurityPrivateDoNotAccessOrElse(t)},goog.html.uncheckedconversions.trustedResourceUrlFromStringKnownToSatisfyTypeContract=function(e,t){return goog.asserts.assertString(goog.string.Const.unwrap(e),"must provide justification"),goog.asserts.assert(!goog.string.internal.isEmptyOrWhitespace(goog.string.Const.unwrap(e)),"must provide non-empty justification"),goog.html.TrustedResourceUrl.createTrustedResourceUrlSecurityPrivateDoNotAccessOrElse(t)},goog.dom.asserts={},goog.dom.asserts.assertIsLocation=function(e){if(goog.asserts.ENABLE_ASSERTS){var t=goog.dom.asserts.getWindow_(e);t&&(!e||!(e instanceof t.Location)&&e instanceof t.Element)&&goog.asserts.fail("Argument is not a Location (or a non-Element mock); got: %s",goog.dom.asserts.debugStringForType_(e))}return e},goog.dom.asserts.assertIsElementType_=function(e,t){if(goog.asserts.ENABLE_ASSERTS){var o=goog.dom.asserts.getWindow_(e);o&&void 0!==o[t]&&(e&&(e instanceof o[t]||!(e instanceof o.Location||e instanceof o.Element))||goog.asserts.fail("Argument is not a %s (or a non-Element, non-Location mock); got: %s",t,goog.dom.asserts.debugStringForType_(e)))}return e},goog.dom.asserts.assertIsHTMLAnchorElement=function(e){return goog.dom.asserts.assertIsElementType_(e,"HTMLAnchorElement")},goog.dom.asserts.assertIsHTMLButtonElement=function(e){return goog.dom.asserts.assertIsElementType_(e,"HTMLButtonElement")},goog.dom.asserts.assertIsHTMLLinkElement=function(e){return goog.dom.asserts.assertIsElementType_(e,"HTMLLinkElement")},goog.dom.asserts.assertIsHTMLImageElement=function(e){return goog.dom.asserts.assertIsElementType_(e,"HTMLImageElement")},goog.dom.asserts.assertIsHTMLAudioElement=function(e){return goog.dom.asserts.assertIsElementType_(e,"HTMLAudioElement")},goog.dom.asserts.assertIsHTMLVideoElement=function(e){return goog.dom.asserts.assertIsElementType_(e,"HTMLVideoElement")},goog.dom.asserts.assertIsHTMLInputElement=function(e){return goog.dom.asserts.assertIsElementType_(e,"HTMLInputElement")},goog.dom.asserts.assertIsHTMLTextAreaElement=function(e){return goog.dom.asserts.assertIsElementType_(e,"HTMLTextAreaElement")},goog.dom.asserts.assertIsHTMLCanvasElement=function(e){return goog.dom.asserts.assertIsElementType_(e,"HTMLCanvasElement")},goog.dom.asserts.assertIsHTMLEmbedElement=function(e){return goog.dom.asserts.assertIsElementType_(e,"HTMLEmbedElement")},goog.dom.asserts.assertIsHTMLFormElement=function(e){return goog.dom.asserts.assertIsElementType_(e,"HTMLFormElement")},goog.dom.asserts.assertIsHTMLFrameElement=function(e){return goog.dom.asserts.assertIsElementType_(e,"HTMLFrameElement")},goog.dom.asserts.assertIsHTMLIFrameElement=function(e){return goog.dom.asserts.assertIsElementType_(e,"HTMLIFrameElement")},goog.dom.asserts.assertIsHTMLObjectElement=function(e){return goog.dom.asserts.assertIsElementType_(e,"HTMLObjectElement")},goog.dom.asserts.assertIsHTMLScriptElement=function(e){return goog.dom.asserts.assertIsElementType_(e,"HTMLScriptElement")},goog.dom.asserts.debugStringForType_=function(e){if(!goog.isObject(e))return void 0===e?"undefined":null===e?"null":typeof e;try{return e.constructor.displayName||e.constructor.name||Object.prototype.toString.call(e)}catch(e){return"<object could not be stringified>"}},goog.dom.asserts.getWindow_=function(e){try{var t=e&&e.ownerDocument,o=t&&(t.defaultView||t.parentWindow);if((o=o||goog.global).Element&&o.Location)return o}catch(e){}return null},goog.functions={},goog.functions.constant=function(e){return function(){return e}},goog.functions.FALSE=function(){return!1},goog.functions.TRUE=function(){return!0},goog.functions.NULL=function(){return null},goog.functions.identity=function(e,t){return e},goog.functions.error=function(e){return function(){throw Error(e)}},goog.functions.fail=function(e){return function(){throw e}},goog.functions.lock=function(e,t){return t=t||0,function(){return e.apply(this,Array.prototype.slice.call(arguments,0,t))}},goog.functions.nth=function(e){return function(){return arguments[e]}},goog.functions.partialRight=function(e,t){var o=Array.prototype.slice.call(arguments,1);return function(){var t=Array.prototype.slice.call(arguments);return t.push.apply(t,o),e.apply(this,t)}},goog.functions.withReturnValue=function(e,t){return goog.functions.sequence(e,goog.functions.constant(t))},goog.functions.equalTo=function(e,t){return function(o){return t?e==o:e===o}},goog.functions.compose=function(e,t){var o=arguments,r=o.length;return function(){var e;r&&(e=o[r-1].apply(this,arguments));for(var t=r-2;0<=t;t--)e=o[t].call(this,e);return e}},goog.functions.sequence=function(e){var t=arguments,o=t.length;return function(){for(var e,r=0;r<o;r++)e=t[r].apply(this,arguments);return e}},goog.functions.and=function(e){var t=arguments,o=t.length;return function(){for(var e=0;e<o;e++)if(!t[e].apply(this,arguments))return!1;return!0}},goog.functions.or=function(e){var t=arguments,o=t.length;return function(){for(var e=0;e<o;e++)if(t[e].apply(this,arguments))return!0;return!1}},goog.functions.not=function(e){return function(){return!e.apply(this,arguments)}},goog.functions.create=function(e,t){var o=function(){};return o.prototype=e.prototype,o=new o,e.apply(o,Array.prototype.slice.call(arguments,1)),o},goog.functions.CACHE_RETURN_VALUE=!0,goog.functions.cacheReturnValue=function(e){var t,o=!1;return function(){return goog.functions.CACHE_RETURN_VALUE?(o||(t=e(),o=!0),t):e()}},goog.functions.once=function(e){var t=e;return function(){if(t){var e=t;t=null,e()}}},goog.functions.debounce=function(e,t,o){var r=0;return function(n){goog.global.clearTimeout(r);var i=arguments;r=goog.global.setTimeout((function(){e.apply(o,i)}),t)}},goog.functions.throttle=function(e,t,o){var r=0,n=!1,i=[],s=function(){r=0,n&&(n=!1,a())},a=function(){r=goog.global.setTimeout(s,t),e.apply(o,i)};return function(e){i=arguments,r?n=!0:a()}},goog.functions.rateLimit=function(e,t,o){var r=0,n=function(){r=0};return function(i){r||(r=goog.global.setTimeout(n,t),e.apply(o,arguments))}},goog.dom.safe={},goog.dom.safe.InsertAdjacentHtmlPosition={AFTERBEGIN:"afterbegin",AFTEREND:"afterend",BEFOREBEGIN:"beforebegin",BEFOREEND:"beforeend"},goog.dom.safe.insertAdjacentHtml=function(e,t,o){e.insertAdjacentHTML(t,goog.html.SafeHtml.unwrapTrustedHTML(o))},goog.dom.safe.SET_INNER_HTML_DISALLOWED_TAGS_={MATH:!0,SCRIPT:!0,STYLE:!0,SVG:!0,TEMPLATE:!0},goog.dom.safe.isInnerHtmlCleanupRecursive_=goog.functions.cacheReturnValue((function(){if(goog.DEBUG&&"undefined"==typeof document)return!1;var e=document.createElement("div"),t=document.createElement("div");return t.appendChild(document.createElement("div")),e.appendChild(t),!(goog.DEBUG&&!e.firstChild)&&(t=e.firstChild.firstChild,e.innerHTML=goog.html.SafeHtml.unwrapTrustedHTML(goog.html.SafeHtml.EMPTY),!t.parentElement)})),goog.dom.safe.unsafeSetInnerHtmlDoNotUseOrElse=function(e,t){if(goog.dom.safe.isInnerHtmlCleanupRecursive_())for(;e.lastChild;)e.removeChild(e.lastChild);e.innerHTML=goog.html.SafeHtml.unwrapTrustedHTML(t)},goog.dom.safe.setInnerHtml=function(e,t){if(goog.asserts.ENABLE_ASSERTS){var o=e.tagName.toUpperCase();if(goog.dom.safe.SET_INNER_HTML_DISALLOWED_TAGS_[o])throw Error("goog.dom.safe.setInnerHtml cannot be used to set content of "+e.tagName+".")}goog.dom.safe.unsafeSetInnerHtmlDoNotUseOrElse(e,t)},goog.dom.safe.setOuterHtml=function(e,t){e.outerHTML=goog.html.SafeHtml.unwrapTrustedHTML(t)},goog.dom.safe.setFormElementAction=function(e,t){t=t instanceof goog.html.SafeUrl?t:goog.html.SafeUrl.sanitizeAssertUnchanged(t),goog.dom.asserts.assertIsHTMLFormElement(e).action=goog.html.SafeUrl.unwrapTrustedURL(t)},goog.dom.safe.setButtonFormAction=function(e,t){t=t instanceof goog.html.SafeUrl?t:goog.html.SafeUrl.sanitizeAssertUnchanged(t),goog.dom.asserts.assertIsHTMLButtonElement(e).formAction=goog.html.SafeUrl.unwrapTrustedURL(t)},goog.dom.safe.setInputFormAction=function(e,t){t=t instanceof goog.html.SafeUrl?t:goog.html.SafeUrl.sanitizeAssertUnchanged(t),goog.dom.asserts.assertIsHTMLInputElement(e).formAction=goog.html.SafeUrl.unwrapTrustedURL(t)},goog.dom.safe.setStyle=function(e,t){e.style.cssText=goog.html.SafeStyle.unwrap(t)},goog.dom.safe.documentWrite=function(e,t){e.write(goog.html.SafeHtml.unwrapTrustedHTML(t))},goog.dom.safe.setAnchorHref=function(e,t){goog.dom.asserts.assertIsHTMLAnchorElement(e),t=t instanceof goog.html.SafeUrl?t:goog.html.SafeUrl.sanitizeAssertUnchanged(t),e.href=goog.html.SafeUrl.unwrapTrustedURL(t)},goog.dom.safe.setImageSrc=function(e,t){if(goog.dom.asserts.assertIsHTMLImageElement(e),!(t instanceof goog.html.SafeUrl)){var o=/^data:image\//i.test(t);t=goog.html.SafeUrl.sanitizeAssertUnchanged(t,o)}e.src=goog.html.SafeUrl.unwrapTrustedURL(t)},goog.dom.safe.setAudioSrc=function(e,t){if(goog.dom.asserts.assertIsHTMLAudioElement(e),!(t instanceof goog.html.SafeUrl)){var o=/^data:audio\//i.test(t);t=goog.html.SafeUrl.sanitizeAssertUnchanged(t,o)}e.src=goog.html.SafeUrl.unwrapTrustedURL(t)},goog.dom.safe.setVideoSrc=function(e,t){if(goog.dom.asserts.assertIsHTMLVideoElement(e),!(t instanceof goog.html.SafeUrl)){var o=/^data:video\//i.test(t);t=goog.html.SafeUrl.sanitizeAssertUnchanged(t,o)}e.src=goog.html.SafeUrl.unwrapTrustedURL(t)},goog.dom.safe.setEmbedSrc=function(e,t){goog.dom.asserts.assertIsHTMLEmbedElement(e),e.src=goog.html.TrustedResourceUrl.unwrapTrustedScriptURL(t)},goog.dom.safe.setFrameSrc=function(e,t){goog.dom.asserts.assertIsHTMLFrameElement(e),e.src=goog.html.TrustedResourceUrl.unwrapTrustedURL(t)},goog.dom.safe.setIframeSrc=function(e,t){goog.dom.asserts.assertIsHTMLIFrameElement(e),e.src=goog.html.TrustedResourceUrl.unwrapTrustedURL(t)},goog.dom.safe.setIframeSrcdoc=function(e,t){goog.dom.asserts.assertIsHTMLIFrameElement(e),e.srcdoc=goog.html.SafeHtml.unwrapTrustedHTML(t)},goog.dom.safe.setLinkHrefAndRel=function(e,t,o){goog.dom.asserts.assertIsHTMLLinkElement(e),e.rel=o,goog.string.internal.caseInsensitiveContains(o,"stylesheet")?(goog.asserts.assert(t instanceof goog.html.TrustedResourceUrl,'URL must be TrustedResourceUrl because "rel" contains "stylesheet"'),e.href=goog.html.TrustedResourceUrl.unwrapTrustedURL(t)):e.href=t instanceof goog.html.TrustedResourceUrl?goog.html.TrustedResourceUrl.unwrapTrustedURL(t):t instanceof goog.html.SafeUrl?goog.html.SafeUrl.unwrapTrustedURL(t):goog.html.SafeUrl.unwrapTrustedURL(goog.html.SafeUrl.sanitizeAssertUnchanged(t))},goog.dom.safe.setObjectData=function(e,t){goog.dom.asserts.assertIsHTMLObjectElement(e),e.data=goog.html.TrustedResourceUrl.unwrapTrustedScriptURL(t)},goog.dom.safe.setScriptSrc=function(e,t){goog.dom.asserts.assertIsHTMLScriptElement(e),e.src=goog.html.TrustedResourceUrl.unwrapTrustedScriptURL(t),(t=goog.getScriptNonce())&&e.setAttribute("nonce",t)},goog.dom.safe.setScriptContent=function(e,t){goog.dom.asserts.assertIsHTMLScriptElement(e),e.text=goog.html.SafeScript.unwrapTrustedScript(t),(t=goog.getScriptNonce())&&e.setAttribute("nonce",t)},goog.dom.safe.setLocationHref=function(e,t){goog.dom.asserts.assertIsLocation(e),t=t instanceof goog.html.SafeUrl?t:goog.html.SafeUrl.sanitizeAssertUnchanged(t),e.href=goog.html.SafeUrl.unwrapTrustedURL(t)},goog.dom.safe.assignLocation=function(e,t){goog.dom.asserts.assertIsLocation(e),t=t instanceof goog.html.SafeUrl?t:goog.html.SafeUrl.sanitizeAssertUnchanged(t),e.assign(goog.html.SafeUrl.unwrapTrustedURL(t))},goog.dom.safe.replaceLocation=function(e,t){goog.dom.asserts.assertIsLocation(e),t=t instanceof goog.html.SafeUrl?t:goog.html.SafeUrl.sanitizeAssertUnchanged(t),e.replace(goog.html.SafeUrl.unwrapTrustedURL(t))},goog.dom.safe.openInWindow=function(e,t,o,r,n){return e=e instanceof goog.html.SafeUrl?e:goog.html.SafeUrl.sanitizeAssertUnchanged(e),(t||goog.global).open(goog.html.SafeUrl.unwrapTrustedURL(e),o?goog.string.Const.unwrap(o):"",r,n)},goog.dom.safe.parseFromStringHtml=function(e,t){return goog.dom.safe.parseFromString(e,t,"text/html")},goog.dom.safe.parseFromString=function(e,t,o){return e.parseFromString(goog.html.SafeHtml.unwrapTrustedHTML(t),o)},goog.dom.safe.createImageFromBlob=function(e){if(!/^image\/.*/g.test(e.type))throw Error("goog.dom.safe.createImageFromBlob only accepts MIME type image/.*.");var t=goog.global.URL.createObjectURL(e);return(e=new goog.global.Image).onload=function(){goog.global.URL.revokeObjectURL(t)},goog.dom.safe.setImageSrc(e,goog.html.uncheckedconversions.safeUrlFromStringKnownToSatisfyTypeContract(goog.string.Const.from("Image blob URL."),t)),e},goog.string.DETECT_DOUBLE_ESCAPING=!1,goog.string.FORCE_NON_DOM_HTML_UNESCAPING=!1,goog.string.Unicode={NBSP:" "},goog.string.startsWith=goog.string.internal.startsWith,goog.string.endsWith=goog.string.internal.endsWith,goog.string.caseInsensitiveStartsWith=goog.string.internal.caseInsensitiveStartsWith,goog.string.caseInsensitiveEndsWith=goog.string.internal.caseInsensitiveEndsWith,goog.string.caseInsensitiveEquals=goog.string.internal.caseInsensitiveEquals,goog.string.subs=function(e,t){for(var o=e.split("%s"),r="",n=Array.prototype.slice.call(arguments,1);n.length&&1<o.length;)r+=o.shift()+n.shift();return r+o.join("%s")},goog.string.collapseWhitespace=function(e){return e.replace(/[\s\xa0]+/g," ").replace(/^\s+|\s+$/g,"")},goog.string.isEmptyOrWhitespace=goog.string.internal.isEmptyOrWhitespace,goog.string.isEmptyString=function(e){return 0==e.length},goog.string.isEmpty=goog.string.isEmptyOrWhitespace,goog.string.isEmptyOrWhitespaceSafe=function(e){return goog.string.isEmptyOrWhitespace(goog.string.makeSafe(e))},goog.string.isEmptySafe=goog.string.isEmptyOrWhitespaceSafe,goog.string.isBreakingWhitespace=function(e){return!/[^\t\n\r ]/.test(e)},goog.string.isAlpha=function(e){return!/[^a-zA-Z]/.test(e)},goog.string.isNumeric=function(e){return!/[^0-9]/.test(e)},goog.string.isAlphaNumeric=function(e){return!/[^a-zA-Z0-9]/.test(e)},goog.string.isSpace=function(e){return" "==e},goog.string.isUnicodeChar=function(e){return 1==e.length&&" "<=e&&"~">=e||""<=e&&"�">=e},goog.string.stripNewlines=function(e){return e.replace(/(\r\n|\r|\n)+/g," ")},goog.string.canonicalizeNewlines=function(e){return e.replace(/(\r\n|\r|\n)/g,"\n")},goog.string.normalizeWhitespace=function(e){return e.replace(/\xa0|\s/g," ")},goog.string.normalizeSpaces=function(e){return e.replace(/\xa0|[ \t]+/g," ")},goog.string.collapseBreakingSpaces=function(e){return e.replace(/[\t\r\n ]+/g," ").replace(/^[\t\r\n ]+|[\t\r\n ]+$/g,"")},goog.string.trim=goog.string.internal.trim,goog.string.trimLeft=function(e){return e.replace(/^[\s\xa0]+/,"")},goog.string.trimRight=function(e){return e.replace(/[\s\xa0]+$/,"")},goog.string.caseInsensitiveCompare=goog.string.internal.caseInsensitiveCompare,goog.string.numberAwareCompare_=function(e,t,o){if(e==t)return 0;if(!e)return-1;if(!t)return 1;for(var r=e.toLowerCase().match(o),n=t.toLowerCase().match(o),i=Math.min(r.length,n.length),s=0;s<i;s++){o=r[s];var a=n[s];if(o!=a)return e=parseInt(o,10),!isNaN(e)&&(t=parseInt(a,10),!isNaN(t)&&e-t)?e-t:o<a?-1:1}return r.length!=n.length?r.length-n.length:e<t?-1:1},goog.string.intAwareCompare=function(e,t){return goog.string.numberAwareCompare_(e,t,/\d+|\D+/g)},goog.string.floatAwareCompare=function(e,t){return goog.string.numberAwareCompare_(e,t,/\d+|\.\d+|\D+/g)},goog.string.numerateCompare=goog.string.floatAwareCompare,goog.string.urlEncode=function(e){return encodeURIComponent(String(e))},goog.string.urlDecode=function(e){return decodeURIComponent(e.replace(/\+/g," "))},goog.string.newLineToBr=goog.string.internal.newLineToBr,goog.string.htmlEscape=function(e,t){return e=goog.string.internal.htmlEscape(e,t),goog.string.DETECT_DOUBLE_ESCAPING&&(e=e.replace(goog.string.E_RE_,"&#101;")),e},goog.string.E_RE_=/e/g,goog.string.unescapeEntities=function(e){return goog.string.contains(e,"&")?!goog.string.FORCE_NON_DOM_HTML_UNESCAPING&&"document"in goog.global?goog.string.unescapeEntitiesUsingDom_(e):goog.string.unescapePureXmlEntities_(e):e},goog.string.unescapeEntitiesWithDocument=function(e,t){return goog.string.contains(e,"&")?goog.string.unescapeEntitiesUsingDom_(e,t):e},goog.string.unescapeEntitiesUsingDom_=function(e,t){var o={"&amp;":"&","&lt;":"<","&gt;":">","&quot;":'"'},r=t?t.createElement("div"):goog.global.document.createElement("div");return e.replace(goog.string.HTML_ENTITY_PATTERN_,(function(e,t){var n=o[e];return n||("#"==t.charAt(0)&&(t=Number("0"+t.substr(1)),isNaN(t)||(n=String.fromCharCode(t))),n||(goog.dom.safe.setInnerHtml(r,goog.html.uncheckedconversions.safeHtmlFromStringKnownToSatisfyTypeContract(goog.string.Const.from("Single HTML entity."),e+" ")),n=r.firstChild.nodeValue.slice(0,-1)),o[e]=n)}))},goog.string.unescapePureXmlEntities_=function(e){return e.replace(/&([^;]+);/g,(function(e,t){switch(t){case"amp":return"&";case"lt":return"<";case"gt":return">";case"quot":return'"';default:return"#"!=t.charAt(0)||(t=Number("0"+t.substr(1)),isNaN(t))?e:String.fromCharCode(t)}}))},goog.string.HTML_ENTITY_PATTERN_=/&([^;\s<&]+);?/g,goog.string.whitespaceEscape=function(e,t){return goog.string.newLineToBr(e.replace(/  /g," &#160;"),t)},goog.string.preserveSpaces=function(e){return e.replace(/(^|[\n ]) /g,"$1"+goog.string.Unicode.NBSP)},goog.string.stripQuotes=function(e,t){for(var o=t.length,r=0;r<o;r++){var n=1==o?t:t.charAt(r);if(e.charAt(0)==n&&e.charAt(e.length-1)==n)return e.substring(1,e.length-1)}return e},goog.string.truncate=function(e,t,o){return o&&(e=goog.string.unescapeEntities(e)),e.length>t&&(e=e.substring(0,t-3)+"..."),o&&(e=goog.string.htmlEscape(e)),e},goog.string.truncateMiddle=function(e,t,o,r){if(o&&(e=goog.string.unescapeEntities(e)),r&&e.length>t){r>t&&(r=t);var n=e.length-r;e=e.substring(0,t-r)+"..."+e.substring(n)}else e.length>t&&(r=Math.floor(t/2),n=e.length-r,e=e.substring(0,r+t%2)+"..."+e.substring(n));return o&&(e=goog.string.htmlEscape(e)),e},goog.string.specialEscapeChars_={"\0":"\\0","\b":"\\b","\f":"\\f","\n":"\\n","\r":"\\r","\t":"\\t","\v":"\\x0B",'"':'\\"',"\\":"\\\\","<":"\\u003C"},goog.string.jsEscapeCache_={"'":"\\'"},goog.string.quote=function(e){e=String(e);for(var t=['"'],o=0;o<e.length;o++){var r=e.charAt(o),n=r.charCodeAt(0);t[o+1]=goog.string.specialEscapeChars_[r]||(31<n&&127>n?r:goog.string.escapeChar(r))}return t.push('"'),t.join("")},goog.string.escapeString=function(e){for(var t=[],o=0;o<e.length;o++)t[o]=goog.string.escapeChar(e.charAt(o));return t.join("")},goog.string.escapeChar=function(e){if(e in goog.string.jsEscapeCache_)return goog.string.jsEscapeCache_[e];if(e in goog.string.specialEscapeChars_)return goog.string.jsEscapeCache_[e]=goog.string.specialEscapeChars_[e];var t=e.charCodeAt(0);if(31<t&&127>t)var o=e;else 256>t?(o="\\x",(16>t||256<t)&&(o+="0")):(o="\\u",4096>t&&(o+="0")),o+=t.toString(16).toUpperCase();return goog.string.jsEscapeCache_[e]=o},goog.string.contains=goog.string.internal.contains,goog.string.caseInsensitiveContains=goog.string.internal.caseInsensitiveContains,goog.string.countOf=function(e,t){return e&&t?e.split(t).length-1:0},goog.string.removeAt=function(e,t,o){var r=e;return 0<=t&&t<e.length&&0<o&&(r=e.substr(0,t)+e.substr(t+o,e.length-t-o)),r},goog.string.remove=function(e,t){return e.replace(t,"")},goog.string.removeAll=function(e,t){return t=new RegExp(goog.string.regExpEscape(t),"g"),e.replace(t,"")},goog.string.replaceAll=function(e,t,o){return t=new RegExp(goog.string.regExpEscape(t),"g"),e.replace(t,o.replace(/\$/g,"$$$$"))},goog.string.regExpEscape=function(e){return String(e).replace(/([-()\[\]{}+?*.$\^|,:#<!\\])/g,"\\$1").replace(/\x08/g,"\\x08")},goog.string.repeat=String.prototype.repeat?function(e,t){return e.repeat(t)}:function(e,t){return Array(t+1).join(e)},goog.string.padNumber=function(e,t,o){return-1==(o=(e=goog.isDef(o)?e.toFixed(o):String(e)).indexOf("."))&&(o=e.length),goog.string.repeat("0",Math.max(0,t-o))+e},goog.string.makeSafe=function(e){return null==e?"":String(e)},goog.string.buildString=function(e){return Array.prototype.join.call(arguments,"")},goog.string.getRandomString=function(){return Math.floor(2147483648*Math.random()).toString(36)+Math.abs(Math.floor(2147483648*Math.random())^goog.now()).toString(36)},goog.string.compareVersions=goog.string.internal.compareVersions,goog.string.hashCode=function(e){for(var t=0,o=0;o<e.length;++o)t=31*t+e.charCodeAt(o)>>>0;return t},goog.string.uniqueStringCounter_=2147483648*Math.random()|0,goog.string.createUniqueString=function(){return"goog_"+goog.string.uniqueStringCounter_++},goog.string.toNumber=function(e){var t=Number(e);return 0==t&&goog.string.isEmptyOrWhitespace(e)?NaN:t},goog.string.isLowerCamelCase=function(e){return/^[a-z]+([A-Z][a-z]*)*$/.test(e)},goog.string.isUpperCamelCase=function(e){return/^([A-Z][a-z]*)+$/.test(e)},goog.string.toCamelCase=function(e){return String(e).replace(/\-([a-z])/g,(function(e,t){return t.toUpperCase()}))},goog.string.toSelectorCase=function(e){return String(e).replace(/([A-Z])/g,"-$1").toLowerCase()},goog.string.toTitleCase=function(e,t){return t=goog.isString(t)?goog.string.regExpEscape(t):"\\s",e.replace(new RegExp("(^"+(t?"|["+t+"]+":"")+")([a-z])","g"),(function(e,t,o){return t+o.toUpperCase()}))},goog.string.capitalize=function(e){return String(e.charAt(0)).toUpperCase()+String(e.substr(1)).toLowerCase()},goog.string.parseInt=function(e){return isFinite(e)&&(e=String(e)),goog.isString(e)?/^\s*-?0x/i.test(e)?parseInt(e,16):parseInt(e,10):NaN},goog.string.splitLimit=function(e,t,o){e=e.split(t);for(var r=[];0<o&&e.length;)r.push(e.shift()),o--;return e.length&&r.push(e.join(t)),r},goog.string.lastComponent=function(e,t){if(!t)return e;"string"==typeof t&&(t=[t]);for(var o=-1,r=0;r<t.length;r++)if(""!=t[r]){var n=e.lastIndexOf(t[r]);n>o&&(o=n)}return-1==o?e:e.slice(o+1)},goog.string.editDistance=function(e,t){var o=[],r=[];if(e==t)return 0;if(!e.length||!t.length)return Math.max(e.length,t.length);for(var n=0;n<t.length+1;n++)o[n]=n;for(n=0;n<e.length;n++){r[0]=n+1;for(var i=0;i<t.length;i++)r[i+1]=Math.min(r[i]+1,o[i+1]+1,o[i]+Number(e[n]!=t[i]));for(i=0;i<o.length;i++)o[i]=r[i]}return r[t.length]},goog.labs.userAgent.platform={},goog.labs.userAgent.platform.isAndroid=function(){return goog.labs.userAgent.util.matchUserAgent("Android")},goog.labs.userAgent.platform.isIpod=function(){return goog.labs.userAgent.util.matchUserAgent("iPod")},goog.labs.userAgent.platform.isIphone=function(){return goog.labs.userAgent.util.matchUserAgent("iPhone")&&!goog.labs.userAgent.util.matchUserAgent("iPod")&&!goog.labs.userAgent.util.matchUserAgent("iPad")},goog.labs.userAgent.platform.isIpad=function(){return goog.labs.userAgent.util.matchUserAgent("iPad")},goog.labs.userAgent.platform.isIos=function(){return goog.labs.userAgent.platform.isIphone()||goog.labs.userAgent.platform.isIpad()||goog.labs.userAgent.platform.isIpod()},goog.labs.userAgent.platform.isMacintosh=function(){return goog.labs.userAgent.util.matchUserAgent("Macintosh")},goog.labs.userAgent.platform.isLinux=function(){return goog.labs.userAgent.util.matchUserAgent("Linux")},goog.labs.userAgent.platform.isWindows=function(){return goog.labs.userAgent.util.matchUserAgent("Windows")},goog.labs.userAgent.platform.isChromeOS=function(){return goog.labs.userAgent.util.matchUserAgent("CrOS")},goog.labs.userAgent.platform.isChromecast=function(){return goog.labs.userAgent.util.matchUserAgent("CrKey")},goog.labs.userAgent.platform.isKaiOS=function(){return goog.labs.userAgent.util.matchUserAgentIgnoreCase("KaiOS")},goog.labs.userAgent.platform.isGo2Phone=function(){return goog.labs.userAgent.util.matchUserAgentIgnoreCase("GAFP")},goog.labs.userAgent.platform.getVersion=function(){var e=goog.labs.userAgent.util.getUserAgent(),t="";return goog.labs.userAgent.platform.isWindows()?t=(e=(t=/Windows (?:NT|Phone) ([0-9.]+)/).exec(e))?e[1]:"0.0":goog.labs.userAgent.platform.isIos()?t=(e=(t=/(?:iPhone|iPod|iPad|CPU)\s+OS\s+(\S+)/).exec(e))&&e[1].replace(/_/g,"."):goog.labs.userAgent.platform.isMacintosh()?t=(e=(t=/Mac OS X ([0-9_.]+)/).exec(e))?e[1].replace(/_/g,"."):"10":goog.labs.userAgent.platform.isKaiOS()?t=(e=(t=/(?:KaiOS)\/(\S+)/i).exec(e))&&e[1]:goog.labs.userAgent.platform.isAndroid()?t=(e=(t=/Android\s+([^\);]+)(\)|;)/).exec(e))&&e[1]:goog.labs.userAgent.platform.isChromeOS()&&(t=(e=(t=/(?:CrOS\s+(?:i686|x86_64)\s+([0-9.]+))/).exec(e))&&e[1]),t||""},goog.labs.userAgent.platform.isVersionOrHigher=function(e){return 0<=goog.string.compareVersions(goog.labs.userAgent.platform.getVersion(),e)},goog.reflect={},goog.reflect.object=function(e,t){return t},goog.reflect.objectProperty=function(e,t){return e},goog.reflect.sinkValue=function(e){return goog.reflect.sinkValue[" "](e),e},goog.reflect.sinkValue[" "]=goog.nullFunction,goog.reflect.canAccessProperty=function(e,t){try{return goog.reflect.sinkValue(e[t]),!0}catch(e){}return!1},goog.reflect.cache=function(e,t,o,r){return r=r?r(t):t,Object.prototype.hasOwnProperty.call(e,r)?e[r]:e[r]=o(t)},goog.labs.userAgent.engine={},goog.labs.userAgent.engine.isPresto=function(){return goog.labs.userAgent.util.matchUserAgent("Presto")},goog.labs.userAgent.engine.isTrident=function(){return goog.labs.userAgent.util.matchUserAgent("Trident")||goog.labs.userAgent.util.matchUserAgent("MSIE")},goog.labs.userAgent.engine.isEdge=function(){return goog.labs.userAgent.util.matchUserAgent("Edge")},goog.labs.userAgent.engine.isWebKit=function(){return goog.labs.userAgent.util.matchUserAgentIgnoreCase("WebKit")&&!goog.labs.userAgent.engine.isEdge()},goog.labs.userAgent.engine.isGecko=function(){return goog.labs.userAgent.util.matchUserAgent("Gecko")&&!goog.labs.userAgent.engine.isWebKit()&&!goog.labs.userAgent.engine.isTrident()&&!goog.labs.userAgent.engine.isEdge()},goog.labs.userAgent.engine.getVersion=function(){var e=goog.labs.userAgent.util.getUserAgent();if(e){e=goog.labs.userAgent.util.extractVersionTuples(e);var t,o=goog.labs.userAgent.engine.getEngineTuple_(e);if(o)return"Gecko"==o[0]?goog.labs.userAgent.engine.getVersionForKey_(e,"Firefox"):o[1];if((e=e[0])&&(t=e[2])&&(t=/Trident\/([^\s;]+)/.exec(t)))return t[1]}return""},goog.labs.userAgent.engine.getEngineTuple_=function(e){if(!goog.labs.userAgent.engine.isEdge())return e[1];for(var t=0;t<e.length;t++){var o=e[t];if("Edge"==o[0])return o}},goog.labs.userAgent.engine.isVersionOrHigher=function(e){return 0<=goog.string.compareVersions(goog.labs.userAgent.engine.getVersion(),e)},goog.labs.userAgent.engine.getVersionForKey_=function(e,t){return(e=goog.array.find(e,(function(e){return t==e[0]})))&&e[1]||""},goog.userAgent={},goog.userAgent.ASSUME_IE=!1,goog.userAgent.ASSUME_EDGE=!1,goog.userAgent.ASSUME_GECKO=!1,goog.userAgent.ASSUME_WEBKIT=!1,goog.userAgent.ASSUME_MOBILE_WEBKIT=!1,goog.userAgent.ASSUME_OPERA=!1,goog.userAgent.ASSUME_ANY_VERSION=!1,goog.userAgent.BROWSER_KNOWN_=goog.userAgent.ASSUME_IE||goog.userAgent.ASSUME_EDGE||goog.userAgent.ASSUME_GECKO||goog.userAgent.ASSUME_MOBILE_WEBKIT||goog.userAgent.ASSUME_WEBKIT||goog.userAgent.ASSUME_OPERA,goog.userAgent.getUserAgentString=function(){return goog.labs.userAgent.util.getUserAgent()},goog.userAgent.getNavigatorTyped=function(){return goog.global.navigator||null},goog.userAgent.getNavigator=function(){return goog.userAgent.getNavigatorTyped()},goog.userAgent.OPERA=goog.userAgent.BROWSER_KNOWN_?goog.userAgent.ASSUME_OPERA:goog.labs.userAgent.browser.isOpera(),goog.userAgent.IE=goog.userAgent.BROWSER_KNOWN_?goog.userAgent.ASSUME_IE:goog.labs.userAgent.browser.isIE(),goog.userAgent.EDGE=goog.userAgent.BROWSER_KNOWN_?goog.userAgent.ASSUME_EDGE:goog.labs.userAgent.engine.isEdge(),goog.userAgent.EDGE_OR_IE=goog.userAgent.EDGE||goog.userAgent.IE,goog.userAgent.GECKO=goog.userAgent.BROWSER_KNOWN_?goog.userAgent.ASSUME_GECKO:goog.labs.userAgent.engine.isGecko();goog.userAgent.WEBKIT=goog.userAgent.BROWSER_KNOWN_?goog.userAgent.ASSUME_WEBKIT||goog.userAgent.ASSUME_MOBILE_WEBKIT:goog.labs.userAgent.engine.isWebKit(),goog.userAgent.isMobile_=function(){return goog.userAgent.WEBKIT&&goog.labs.userAgent.util.matchUserAgent("Mobile")},goog.userAgent.MOBILE=goog.userAgent.ASSUME_MOBILE_WEBKIT||goog.userAgent.isMobile_(),goog.userAgent.SAFARI=goog.userAgent.WEBKIT,goog.userAgent.determinePlatform_=function(){var e=goog.userAgent.getNavigatorTyped();return e&&e.platform||""},goog.userAgent.PLATFORM=goog.userAgent.determinePlatform_(),goog.userAgent.ASSUME_MAC=!1,goog.userAgent.ASSUME_WINDOWS=!1,goog.userAgent.ASSUME_LINUX=!1,goog.userAgent.ASSUME_X11=!1,goog.userAgent.ASSUME_ANDROID=!1,goog.userAgent.ASSUME_IPHONE=!1,goog.userAgent.ASSUME_IPAD=!1,goog.userAgent.ASSUME_IPOD=!1,goog.userAgent.ASSUME_KAIOS=!1,goog.userAgent.ASSUME_GO2PHONE=!1,goog.userAgent.PLATFORM_KNOWN_=goog.userAgent.ASSUME_MAC||goog.userAgent.ASSUME_WINDOWS||goog.userAgent.ASSUME_LINUX||goog.userAgent.ASSUME_X11||goog.userAgent.ASSUME_ANDROID||goog.userAgent.ASSUME_IPHONE||goog.userAgent.ASSUME_IPAD||goog.userAgent.ASSUME_IPOD,goog.userAgent.MAC=goog.userAgent.PLATFORM_KNOWN_?goog.userAgent.ASSUME_MAC:goog.labs.userAgent.platform.isMacintosh(),goog.userAgent.WINDOWS=goog.userAgent.PLATFORM_KNOWN_?goog.userAgent.ASSUME_WINDOWS:goog.labs.userAgent.platform.isWindows(),goog.userAgent.isLegacyLinux_=function(){return goog.labs.userAgent.platform.isLinux()||goog.labs.userAgent.platform.isChromeOS()},goog.userAgent.LINUX=goog.userAgent.PLATFORM_KNOWN_?goog.userAgent.ASSUME_LINUX:goog.userAgent.isLegacyLinux_(),goog.userAgent.isX11_=function(){var e=goog.userAgent.getNavigatorTyped();return!!e&&goog.string.contains(e.appVersion||"","X11")},goog.userAgent.X11=goog.userAgent.PLATFORM_KNOWN_?goog.userAgent.ASSUME_X11:goog.userAgent.isX11_(),goog.userAgent.ANDROID=goog.userAgent.PLATFORM_KNOWN_?goog.userAgent.ASSUME_ANDROID:goog.labs.userAgent.platform.isAndroid(),goog.userAgent.IPHONE=goog.userAgent.PLATFORM_KNOWN_?goog.userAgent.ASSUME_IPHONE:goog.labs.userAgent.platform.isIphone(),goog.userAgent.IPAD=goog.userAgent.PLATFORM_KNOWN_?goog.userAgent.ASSUME_IPAD:goog.labs.userAgent.platform.isIpad(),goog.userAgent.IPOD=goog.userAgent.PLATFORM_KNOWN_?goog.userAgent.ASSUME_IPOD:goog.labs.userAgent.platform.isIpod(),goog.userAgent.IOS=goog.userAgent.PLATFORM_KNOWN_?goog.userAgent.ASSUME_IPHONE||goog.userAgent.ASSUME_IPAD||goog.userAgent.ASSUME_IPOD:goog.labs.userAgent.platform.isIos(),goog.userAgent.KAIOS=goog.userAgent.PLATFORM_KNOWN_?goog.userAgent.ASSUME_KAIOS:goog.labs.userAgent.platform.isKaiOS(),goog.userAgent.GO2PHONE=goog.userAgent.PLATFORM_KNOWN_?goog.userAgent.ASSUME_GO2PHONE:goog.labs.userAgent.platform.isGo2Phone(),goog.userAgent.determineVersion_=function(){var e="",t=goog.userAgent.getVersionRegexResult_();return t&&(e=t?t[1]:""),goog.userAgent.IE&&(null!=(t=goog.userAgent.getDocumentMode_())&&t>parseFloat(e))?String(t):e},goog.userAgent.getVersionRegexResult_=function(){var e=goog.userAgent.getUserAgentString();return goog.userAgent.GECKO?/rv:([^\);]+)(\)|;)/.exec(e):goog.userAgent.EDGE?/Edge\/([\d\.]+)/.exec(e):goog.userAgent.IE?/\b(?:MSIE|rv)[: ]([^\);]+)(\)|;)/.exec(e):goog.userAgent.WEBKIT?/WebKit\/(\S+)/.exec(e):goog.userAgent.OPERA?/(?:Version)[ \/]?(\S+)/.exec(e):void 0},goog.userAgent.getDocumentMode_=function(){var e=goog.global.document;return e?e.documentMode:void 0},goog.userAgent.VERSION=goog.userAgent.determineVersion_(),goog.userAgent.compare=function(e,t){return goog.string.compareVersions(e,t)},goog.userAgent.isVersionOrHigherCache_={},goog.userAgent.isVersionOrHigher=function(e){return goog.userAgent.ASSUME_ANY_VERSION||goog.reflect.cache(goog.userAgent.isVersionOrHigherCache_,e,(function(){return 0<=goog.string.compareVersions(goog.userAgent.VERSION,e)}))},goog.userAgent.isVersion=goog.userAgent.isVersionOrHigher,goog.userAgent.isDocumentModeOrHigher=function(e){return Number(goog.userAgent.DOCUMENT_MODE)>=e},goog.userAgent.isDocumentMode=goog.userAgent.isDocumentModeOrHigher,goog.userAgent.DOCUMENT_MODE=function(){if(goog.global.document&&goog.userAgent.IE)return goog.userAgent.getDocumentMode_()}(),goog.userAgent.product={},goog.userAgent.product.ASSUME_FIREFOX=!1,goog.userAgent.product.ASSUME_IPHONE=!1,goog.userAgent.product.ASSUME_IPAD=!1,goog.userAgent.product.ASSUME_ANDROID=!1,goog.userAgent.product.ASSUME_CHROME=!1,goog.userAgent.product.ASSUME_SAFARI=!1,goog.userAgent.product.PRODUCT_KNOWN_=goog.userAgent.ASSUME_IE||goog.userAgent.ASSUME_EDGE||goog.userAgent.ASSUME_OPERA||goog.userAgent.product.ASSUME_FIREFOX||goog.userAgent.product.ASSUME_IPHONE||goog.userAgent.product.ASSUME_IPAD||goog.userAgent.product.ASSUME_ANDROID||goog.userAgent.product.ASSUME_CHROME||goog.userAgent.product.ASSUME_SAFARI,goog.userAgent.product.OPERA=goog.userAgent.OPERA,goog.userAgent.product.IE=goog.userAgent.IE,goog.userAgent.product.EDGE=goog.userAgent.EDGE,goog.userAgent.product.FIREFOX=goog.userAgent.product.PRODUCT_KNOWN_?goog.userAgent.product.ASSUME_FIREFOX:goog.labs.userAgent.browser.isFirefox(),goog.userAgent.product.isIphoneOrIpod_=function(){return goog.labs.userAgent.platform.isIphone()||goog.labs.userAgent.platform.isIpod()},goog.userAgent.product.IPHONE=goog.userAgent.product.PRODUCT_KNOWN_?goog.userAgent.product.ASSUME_IPHONE:goog.userAgent.product.isIphoneOrIpod_(),goog.userAgent.product.IPAD=goog.userAgent.product.PRODUCT_KNOWN_?goog.userAgent.product.ASSUME_IPAD:goog.labs.userAgent.platform.isIpad(),goog.userAgent.product.ANDROID=goog.userAgent.product.PRODUCT_KNOWN_?goog.userAgent.product.ASSUME_ANDROID:goog.labs.userAgent.browser.isAndroidBrowser(),goog.userAgent.product.CHROME=goog.userAgent.product.PRODUCT_KNOWN_?goog.userAgent.product.ASSUME_CHROME:goog.labs.userAgent.browser.isChrome(),goog.userAgent.product.isSafariDesktop_=function(){return goog.labs.userAgent.browser.isSafari()&&!goog.labs.userAgent.platform.isIos()},goog.userAgent.product.SAFARI=goog.userAgent.product.PRODUCT_KNOWN_?goog.userAgent.product.ASSUME_SAFARI:goog.userAgent.product.isSafariDesktop_(),goog.crypt.base64={},goog.crypt.base64.DEFAULT_ALPHABET_COMMON_="ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789",goog.crypt.base64.ENCODED_VALS=goog.crypt.base64.DEFAULT_ALPHABET_COMMON_+"+/=",goog.crypt.base64.ENCODED_VALS_WEBSAFE=goog.crypt.base64.DEFAULT_ALPHABET_COMMON_+"-_.",goog.crypt.base64.Alphabet={DEFAULT:0,NO_PADDING:1,WEBSAFE:2,WEBSAFE_DOT_PADDING:3,WEBSAFE_NO_PADDING:4},goog.crypt.base64.paddingChars_="=.",goog.crypt.base64.isPadding_=function(e){return goog.string.contains(goog.crypt.base64.paddingChars_,e)},goog.crypt.base64.byteToCharMaps_={},goog.crypt.base64.charToByteMap_=null,goog.crypt.base64.ASSUME_NATIVE_SUPPORT_=goog.userAgent.GECKO||goog.userAgent.WEBKIT&&!goog.userAgent.product.SAFARI||goog.userAgent.OPERA,goog.crypt.base64.HAS_NATIVE_ENCODE_=goog.crypt.base64.ASSUME_NATIVE_SUPPORT_||"function"==typeof goog.global.btoa,goog.crypt.base64.HAS_NATIVE_DECODE_=goog.crypt.base64.ASSUME_NATIVE_SUPPORT_||!goog.userAgent.product.SAFARI&&!goog.userAgent.IE&&"function"==typeof goog.global.atob,goog.crypt.base64.encodeByteArray=function(e,t){goog.asserts.assert(goog.isArrayLike(e),"encodeByteArray takes an array as a parameter"),void 0===t&&(t=goog.crypt.base64.Alphabet.DEFAULT),goog.crypt.base64.init_(),t=goog.crypt.base64.byteToCharMaps_[t];for(var o=[],r=0;r<e.length;r+=3){var n=e[r],i=r+1<e.length,s=i?e[r+1]:0,a=r+2<e.length,g=a?e[r+2]:0,p=n>>2;n=(3&n)<<4|s>>4,s=(15&s)<<2|g>>6,g&=63,a||(g=64,i||(s=64)),o.push(t[p],t[n],t[s]||"",t[g]||"")}return o.join("")},goog.crypt.base64.encodeString=function(e,t){return goog.crypt.base64.HAS_NATIVE_ENCODE_&&!t?goog.global.btoa(e):goog.crypt.base64.encodeByteArray(goog.crypt.stringToByteArray(e),t)},goog.crypt.base64.decodeString=function(e,t){if(goog.crypt.base64.HAS_NATIVE_DECODE_&&!t)return goog.global.atob(e);var o="";return goog.crypt.base64.decodeStringInternal_(e,(function(e){o+=String.fromCharCode(e)})),o},goog.crypt.base64.decodeStringToByteArray=function(e,t){var o=[];return goog.crypt.base64.decodeStringInternal_(e,(function(e){o.push(e)})),o},goog.crypt.base64.decodeStringToUint8Array=function(e){goog.asserts.assert(!goog.userAgent.IE||goog.userAgent.isVersionOrHigher("10"),"Browser does not support typed arrays");var t=e.length,o=3*t/4;o%3?o=Math.floor(o):goog.crypt.base64.isPadding_(e[t-1])&&(o=goog.crypt.base64.isPadding_(e[t-2])?o-2:o-1);var r=new Uint8Array(o),n=0;return goog.crypt.base64.decodeStringInternal_(e,(function(e){r[n++]=e})),r.subarray(0,n)},goog.crypt.base64.decodeStringInternal_=function(e,t){function o(t){for(;r<e.length;){var o=e.charAt(r++),n=goog.crypt.base64.charToByteMap_[o];if(null!=n)return n;if(!goog.string.isEmptyOrWhitespace(o))throw Error("Unknown base64 encoding at char: "+o)}return t}goog.crypt.base64.init_();for(var r=0;;){var n=o(-1),i=o(0),s=o(64),a=o(64);if(64===a&&-1===n)break;t(n<<2|i>>4),64!=s&&(t(i<<4&240|s>>2),64!=a&&t(s<<6&192|a))}},goog.crypt.base64.init_=function(){if(!goog.crypt.base64.charToByteMap_){goog.crypt.base64.charToByteMap_={};for(var e=goog.crypt.base64.DEFAULT_ALPHABET_COMMON_.split(""),t=["+/=","+/","-_=","-_.","-_"],o=0;5>o;o++){var r=e.concat(t[o].split(""));goog.crypt.base64.byteToCharMaps_[o]=r;for(var n=0;n<r.length;n++){var i=r[n],s=goog.crypt.base64.charToByteMap_[i];void 0===s?goog.crypt.base64.charToByteMap_[i]=n:goog.asserts.assert(s===n)}}}},jspb.utils={},jspb.utils.split64Low=0,jspb.utils.split64High=0,jspb.utils.splitUint64=function(e){var t=e>>>0;e=Math.floor((e-t)/jspb.BinaryConstants.TWO_TO_32)>>>0,jspb.utils.split64Low=t,jspb.utils.split64High=e},jspb.utils.splitInt64=function(e){var t=0>e,o=(e=Math.abs(e))>>>0;e=Math.floor((e-o)/jspb.BinaryConstants.TWO_TO_32),e>>>=0,t&&(e=~e>>>0,4294967295<(o=1+(~o>>>0))&&(o=0,4294967295<++e&&(e=0))),jspb.utils.split64Low=o,jspb.utils.split64High=e},jspb.utils.splitZigzag64=function(e){var t=0>e;e=2*Math.abs(e),jspb.utils.splitUint64(e),e=jspb.utils.split64Low;var o=jspb.utils.split64High;t&&(0==e?0==o?o=e=4294967295:(o--,e=4294967295):e--),jspb.utils.split64Low=e,jspb.utils.split64High=o},jspb.utils.splitFloat32=function(e){var t=0>e?1:0;if(0===(e=t?-e:e))0<1/e?(jspb.utils.split64High=0,jspb.utils.split64Low=0):(jspb.utils.split64High=0,jspb.utils.split64Low=2147483648);else if(isNaN(e))jspb.utils.split64High=0,jspb.utils.split64Low=2147483647;else if(e>jspb.BinaryConstants.FLOAT32_MAX)jspb.utils.split64High=0,jspb.utils.split64Low=(t<<31|2139095040)>>>0;else if(e<jspb.BinaryConstants.FLOAT32_MIN)e=Math.round(e/Math.pow(2,-149)),jspb.utils.split64High=0,jspb.utils.split64Low=(t<<31|e)>>>0;else{var o=Math.floor(Math.log(e)/Math.LN2);e*=Math.pow(2,-o),e=8388607&Math.round(e*jspb.BinaryConstants.TWO_TO_23),jspb.utils.split64High=0,jspb.utils.split64Low=(t<<31|o+127<<23|e)>>>0}},jspb.utils.splitFloat64=function(e){var t=0>e?1:0;if(0===(e=t?-e:e))jspb.utils.split64High=0<1/e?0:2147483648,jspb.utils.split64Low=0;else if(isNaN(e))jspb.utils.split64High=2147483647,jspb.utils.split64Low=4294967295;else if(e>jspb.BinaryConstants.FLOAT64_MAX)jspb.utils.split64High=(t<<31|2146435072)>>>0,jspb.utils.split64Low=0;else if(e<jspb.BinaryConstants.FLOAT64_MIN){var o=e/Math.pow(2,-1074);e=o/jspb.BinaryConstants.TWO_TO_32,jspb.utils.split64High=(t<<31|e)>>>0,jspb.utils.split64Low=o>>>0}else{var r=0;if(2<=(o=e))for(;2<=o&&1023>r;)r++,o/=2;else for(;1>o&&-1022<r;)o*=2,r--;e=(o=e*Math.pow(2,-r))*jspb.BinaryConstants.TWO_TO_20&1048575,o=o*jspb.BinaryConstants.TWO_TO_52>>>0,jspb.utils.split64High=(t<<31|r+1023<<20|e)>>>0,jspb.utils.split64Low=o}},jspb.utils.splitHash64=function(e){var t=e.charCodeAt(0),o=e.charCodeAt(1),r=e.charCodeAt(2),n=e.charCodeAt(3),i=e.charCodeAt(4),s=e.charCodeAt(5),a=e.charCodeAt(6);e=e.charCodeAt(7),jspb.utils.split64Low=t+(o<<8)+(r<<16)+(n<<24)>>>0,jspb.utils.split64High=i+(s<<8)+(a<<16)+(e<<24)>>>0},jspb.utils.joinUint64=function(e,t){return t*jspb.BinaryConstants.TWO_TO_32+(e>>>0)},jspb.utils.joinInt64=function(e,t){var o=2147483648&t;return o&&(t=~t>>>0,0==(e=1+~e>>>0)&&(t=t+1>>>0)),e=jspb.utils.joinUint64(e,t),o?-e:e},jspb.utils.toZigzag64=function(e,t,o){var r=t>>31;return o(e<<1^r,(t<<1|e>>>31)^r)},jspb.utils.joinZigzag64=function(e,t){return jspb.utils.fromZigzag64(e,t,jspb.utils.joinInt64)},jspb.utils.fromZigzag64=function(e,t,o){var r=-(1&e);return o((e>>>1|t<<31)^r,t>>>1^r)},jspb.utils.joinFloat32=function(e,t){t=2*(e>>31)+1;var o=e>>>23&255;return e&=8388607,255==o?e?NaN:1/0*t:0==o?t*Math.pow(2,-149)*e:t*Math.pow(2,o-150)*(e+Math.pow(2,23))},jspb.utils.joinFloat64=function(e,t){var o=2*(t>>31)+1,r=t>>>20&2047;return e=jspb.BinaryConstants.TWO_TO_32*(1048575&t)+e,2047==r?e?NaN:1/0*o:0==r?o*Math.pow(2,-1074)*e:o*Math.pow(2,r-1075)*(e+jspb.BinaryConstants.TWO_TO_52)},jspb.utils.joinHash64=function(e,t){return String.fromCharCode(e>>>0&255,e>>>8&255,e>>>16&255,e>>>24&255,t>>>0&255,t>>>8&255,t>>>16&255,t>>>24&255)},jspb.utils.DIGITS="0123456789abcdef".split(""),jspb.utils.ZERO_CHAR_CODE_=48,jspb.utils.A_CHAR_CODE_=97,jspb.utils.joinUnsignedDecimalString=function(e,t){function o(e,t){return e=e?String(e):"",t?"0000000".slice(e.length)+e:e}if(2097151>=t)return""+(jspb.BinaryConstants.TWO_TO_32*t+e);var r=(e>>>24|t<<8)>>>0&16777215;return e=(16777215&e)+6777216*r+6710656*(t=t>>16&65535),r+=8147497*t,t*=2,1e7<=e&&(r+=Math.floor(e/1e7),e%=1e7),1e7<=r&&(t+=Math.floor(r/1e7),r%=1e7),o(t,0)+o(r,t)+o(e,1)},jspb.utils.joinSignedDecimalString=function(e,t){var o=2147483648&t;return o&&(t=~t+(0==(e=1+~e>>>0)?1:0)>>>0),e=jspb.utils.joinUnsignedDecimalString(e,t),o?"-"+e:e},jspb.utils.hash64ToDecimalString=function(e,t){jspb.utils.splitHash64(e),e=jspb.utils.split64Low;var o=jspb.utils.split64High;return t?jspb.utils.joinSignedDecimalString(e,o):jspb.utils.joinUnsignedDecimalString(e,o)},jspb.utils.hash64ArrayToDecimalStrings=function(e,t){for(var o=Array(e.length),r=0;r<e.length;r++)o[r]=jspb.utils.hash64ToDecimalString(e[r],t);return o},jspb.utils.decimalStringToHash64=function(e){function t(e,t){for(var o=0;8>o&&(1!==e||0<t);o++)t=e*r[o]+t,r[o]=255&t,t>>>=8}goog.asserts.assert(0<e.length);var o=!1;"-"===e[0]&&(o=!0,e=e.slice(1));for(var r=[0,0,0,0,0,0,0,0],n=0;n<e.length;n++)t(10,e.charCodeAt(n)-jspb.utils.ZERO_CHAR_CODE_);return o&&(function(){for(var e=0;8>e;e++)r[e]=255&~r[e]}(),t(1,1)),goog.crypt.byteArrayToString(r)},jspb.utils.splitDecimalString=function(e){jspb.utils.splitHash64(jspb.utils.decimalStringToHash64(e))},jspb.utils.toHexDigit_=function(e){return String.fromCharCode(10>e?jspb.utils.ZERO_CHAR_CODE_+e:jspb.utils.A_CHAR_CODE_-10+e)},jspb.utils.fromHexCharCode_=function(e){return e>=jspb.utils.A_CHAR_CODE_?e-jspb.utils.A_CHAR_CODE_+10:e-jspb.utils.ZERO_CHAR_CODE_},jspb.utils.hash64ToHexString=function(e){var t=Array(18);t[0]="0",t[1]="x";for(var o=0;8>o;o++){var r=e.charCodeAt(7-o);t[2*o+2]=jspb.utils.toHexDigit_(r>>4),t[2*o+3]=jspb.utils.toHexDigit_(15&r)}return t.join("")},jspb.utils.hexStringToHash64=function(e){e=e.toLowerCase(),goog.asserts.assert(18==e.length),goog.asserts.assert("0"==e[0]),goog.asserts.assert("x"==e[1]);for(var t="",o=0;8>o;o++){var r=jspb.utils.fromHexCharCode_(e.charCodeAt(2*o+2)),n=jspb.utils.fromHexCharCode_(e.charCodeAt(2*o+3));t=String.fromCharCode(16*r+n)+t}return t},jspb.utils.hash64ToNumber=function(e,t){jspb.utils.splitHash64(e),e=jspb.utils.split64Low;var o=jspb.utils.split64High;return t?jspb.utils.joinInt64(e,o):jspb.utils.joinUint64(e,o)},jspb.utils.numberToHash64=function(e){return jspb.utils.splitInt64(e),jspb.utils.joinHash64(jspb.utils.split64Low,jspb.utils.split64High)},jspb.utils.countVarints=function(e,t,o){for(var r=0,n=t;n<o;n++)r+=e[n]>>7;return o-t-r},jspb.utils.countVarintFields=function(e,t,o,r){var n=0;if(128>(r=8*r+jspb.BinaryConstants.WireType.VARINT))for(;t<o&&e[t++]==r;)for(n++;;){var i=e[t++];if(0==(128&i))break}else for(;t<o;){for(i=r;128<i;){if(e[t]!=(127&i|128))return n;t++,i>>=7}if(e[t++]!=i)break;for(n++;0!=(128&(i=e[t++])););}return n},jspb.utils.countFixedFields_=function(e,t,o,r,n){var i=0;if(128>r)for(;t<o&&e[t++]==r;)i++,t+=n;else for(;t<o;){for(var s=r;128<s;){if(e[t++]!=(127&s|128))return i;s>>=7}if(e[t++]!=s)break;i++,t+=n}return i},jspb.utils.countFixed32Fields=function(e,t,o,r){return jspb.utils.countFixedFields_(e,t,o,8*r+jspb.BinaryConstants.WireType.FIXED32,4)},jspb.utils.countFixed64Fields=function(e,t,o,r){return jspb.utils.countFixedFields_(e,t,o,8*r+jspb.BinaryConstants.WireType.FIXED64,8)},jspb.utils.countDelimitedFields=function(e,t,o,r){var n=0;for(r=8*r+jspb.BinaryConstants.WireType.DELIMITED;t<o;){for(var i=r;128<i;){if(e[t++]!=(127&i|128))return n;i>>=7}if(e[t++]!=i)break;n++;for(var s=0,a=1;s+=(127&(i=e[t++]))*a,a*=128,0!=(128&i););t+=s}return n},jspb.utils.debugBytesToTextFormat=function(e){var t='"';if(e){e=jspb.utils.byteSourceToUint8Array(e);for(var o=0;o<e.length;o++)t+="\\x",16>e[o]&&(t+="0"),t+=e[o].toString(16)}return t+'"'},jspb.utils.debugScalarToTextFormat=function(e){return"string"==typeof e?goog.string.quote(e):e.toString()},jspb.utils.stringToByteArray=function(e){for(var t=new Uint8Array(e.length),o=0;o<e.length;o++){var r=e.charCodeAt(o);if(255<r)throw Error("Conversion error: string contains codepoint outside of byte range");t[o]=r}return t},jspb.utils.byteSourceToUint8Array=function(e){return e.constructor===Uint8Array?e:e.constructor===ArrayBuffer||void 0!==Buffer&&e.constructor===Buffer||e.constructor===Array?new Uint8Array(e):e.constructor===String?goog.crypt.base64.decodeStringToUint8Array(e):(goog.asserts.fail("Type not convertible to Uint8Array."),new Uint8Array(0))},jspb.BinaryDecoder=function(e,t,o){this.bytes_=null,this.cursor_=this.end_=this.start_=0,this.error_=!1,e&&this.setBlock(e,t,o)},jspb.BinaryDecoder.instanceCache_=[],jspb.BinaryDecoder.alloc=function(e,t,o){if(jspb.BinaryDecoder.instanceCache_.length){var r=jspb.BinaryDecoder.instanceCache_.pop();return e&&r.setBlock(e,t,o),r}return new jspb.BinaryDecoder(e,t,o)},jspb.BinaryDecoder.prototype.free=function(){this.clear(),100>jspb.BinaryDecoder.instanceCache_.length&&jspb.BinaryDecoder.instanceCache_.push(this)},jspb.BinaryDecoder.prototype.clone=function(){return jspb.BinaryDecoder.alloc(this.bytes_,this.start_,this.end_-this.start_)},jspb.BinaryDecoder.prototype.clear=function(){this.bytes_=null,this.cursor_=this.end_=this.start_=0,this.error_=!1},jspb.BinaryDecoder.prototype.getBuffer=function(){return this.bytes_},jspb.BinaryDecoder.prototype.setBlock=function(e,t,o){this.bytes_=jspb.utils.byteSourceToUint8Array(e),this.start_=void 0!==t?t:0,this.end_=void 0!==o?this.start_+o:this.bytes_.length,this.cursor_=this.start_},jspb.BinaryDecoder.prototype.getEnd=function(){return this.end_},jspb.BinaryDecoder.prototype.setEnd=function(e){this.end_=e},jspb.BinaryDecoder.prototype.reset=function(){this.cursor_=this.start_},jspb.BinaryDecoder.prototype.getCursor=function(){return this.cursor_},jspb.BinaryDecoder.prototype.setCursor=function(e){this.cursor_=e},jspb.BinaryDecoder.prototype.advance=function(e){this.cursor_+=e,goog.asserts.assert(this.cursor_<=this.end_)},jspb.BinaryDecoder.prototype.atEnd=function(){return this.cursor_==this.end_},jspb.BinaryDecoder.prototype.pastEnd=function(){return this.cursor_>this.end_},jspb.BinaryDecoder.prototype.getError=function(){return this.error_||0>this.cursor_||this.cursor_>this.end_},jspb.BinaryDecoder.prototype.readSplitVarint64=function(e){for(var t=128,o=0,r=0,n=0;4>n&&128<=t;n++)o|=(127&(t=this.bytes_[this.cursor_++]))<<7*n;if(128<=t&&(o|=(127&(t=this.bytes_[this.cursor_++]))<<28,r|=(127&t)>>4),128<=t)for(n=0;5>n&&128<=t;n++)r|=(127&(t=this.bytes_[this.cursor_++]))<<7*n+3;if(128>t)return e(o>>>0,r>>>0);goog.asserts.fail("Failed to read varint, encoding is invalid."),this.error_=!0},jspb.BinaryDecoder.prototype.readSplitZigzagVarint64=function(e){return this.readSplitVarint64((function(t,o){return jspb.utils.fromZigzag64(t,o,e)}))},jspb.BinaryDecoder.prototype.readSplitFixed64=function(e){var t=this.bytes_,o=this.cursor_;this.cursor_+=8;for(var r=0,n=0,i=o+7;i>=o;i--)r=r<<8|t[i],n=n<<8|t[i+4];return e(r,n)},jspb.BinaryDecoder.prototype.skipVarint=function(){for(;128&this.bytes_[this.cursor_];)this.cursor_++;this.cursor_++},jspb.BinaryDecoder.prototype.unskipVarint=function(e){for(;128<e;)this.cursor_--,e>>>=7;this.cursor_--},jspb.BinaryDecoder.prototype.readUnsignedVarint32=function(){var e=this.bytes_,t=e[this.cursor_+0],o=127&t;return 128>t?(this.cursor_+=1,goog.asserts.assert(this.cursor_<=this.end_),o):(o|=(127&(t=e[this.cursor_+1]))<<7,128>t?(this.cursor_+=2,goog.asserts.assert(this.cursor_<=this.end_),o):(o|=(127&(t=e[this.cursor_+2]))<<14,128>t?(this.cursor_+=3,goog.asserts.assert(this.cursor_<=this.end_),o):(o|=(127&(t=e[this.cursor_+3]))<<21,128>t?(this.cursor_+=4,goog.asserts.assert(this.cursor_<=this.end_),o):(o|=(15&(t=e[this.cursor_+4]))<<28,128>t?(this.cursor_+=5,goog.asserts.assert(this.cursor_<=this.end_),o>>>0):(this.cursor_+=5,128<=e[this.cursor_++]&&128<=e[this.cursor_++]&&128<=e[this.cursor_++]&&128<=e[this.cursor_++]&&128<=e[this.cursor_++]&&goog.asserts.assert(!1),goog.asserts.assert(this.cursor_<=this.end_),o)))))},jspb.BinaryDecoder.prototype.readSignedVarint32=jspb.BinaryDecoder.prototype.readUnsignedVarint32,jspb.BinaryDecoder.prototype.readUnsignedVarint32String=function(){return this.readUnsignedVarint32().toString()},jspb.BinaryDecoder.prototype.readSignedVarint32String=function(){return this.readSignedVarint32().toString()},jspb.BinaryDecoder.prototype.readZigzagVarint32=function(){var e=this.readUnsignedVarint32();return e>>>1^-(1&e)},jspb.BinaryDecoder.prototype.readUnsignedVarint64=function(){return this.readSplitVarint64(jspb.utils.joinUint64)},jspb.BinaryDecoder.prototype.readUnsignedVarint64String=function(){return this.readSplitVarint64(jspb.utils.joinUnsignedDecimalString)},jspb.BinaryDecoder.prototype.readSignedVarint64=function(){return this.readSplitVarint64(jspb.utils.joinInt64)},jspb.BinaryDecoder.prototype.readSignedVarint64String=function(){return this.readSplitVarint64(jspb.utils.joinSignedDecimalString)},jspb.BinaryDecoder.prototype.readZigzagVarint64=function(){return this.readSplitVarint64(jspb.utils.joinZigzag64)},jspb.BinaryDecoder.prototype.readZigzagVarintHash64=function(){return this.readSplitZigzagVarint64(jspb.utils.joinHash64)},jspb.BinaryDecoder.prototype.readZigzagVarint64String=function(){return this.readSplitZigzagVarint64(jspb.utils.joinSignedDecimalString)},jspb.BinaryDecoder.prototype.readUint8=function(){var e=this.bytes_[this.cursor_+0];return this.cursor_+=1,goog.asserts.assert(this.cursor_<=this.end_),e},jspb.BinaryDecoder.prototype.readUint16=function(){var e=this.bytes_[this.cursor_+0],t=this.bytes_[this.cursor_+1];return this.cursor_+=2,goog.asserts.assert(this.cursor_<=this.end_),e<<0|t<<8},jspb.BinaryDecoder.prototype.readUint32=function(){var e=this.bytes_[this.cursor_+0],t=this.bytes_[this.cursor_+1],o=this.bytes_[this.cursor_+2],r=this.bytes_[this.cursor_+3];return this.cursor_+=4,goog.asserts.assert(this.cursor_<=this.end_),(e<<0|t<<8|o<<16|r<<24)>>>0},jspb.BinaryDecoder.prototype.readUint64=function(){var e=this.readUint32(),t=this.readUint32();return jspb.utils.joinUint64(e,t)},jspb.BinaryDecoder.prototype.readUint64String=function(){var e=this.readUint32(),t=this.readUint32();return jspb.utils.joinUnsignedDecimalString(e,t)},jspb.BinaryDecoder.prototype.readInt8=function(){var e=this.bytes_[this.cursor_+0];return this.cursor_+=1,goog.asserts.assert(this.cursor_<=this.end_),e<<24>>24},jspb.BinaryDecoder.prototype.readInt16=function(){var e=this.bytes_[this.cursor_+0],t=this.bytes_[this.cursor_+1];return this.cursor_+=2,goog.asserts.assert(this.cursor_<=this.end_),(e<<0|t<<8)<<16>>16},jspb.BinaryDecoder.prototype.readInt32=function(){var e=this.bytes_[this.cursor_+0],t=this.bytes_[this.cursor_+1],o=this.bytes_[this.cursor_+2],r=this.bytes_[this.cursor_+3];return this.cursor_+=4,goog.asserts.assert(this.cursor_<=this.end_),e<<0|t<<8|o<<16|r<<24},jspb.BinaryDecoder.prototype.readInt64=function(){var e=this.readUint32(),t=this.readUint32();return jspb.utils.joinInt64(e,t)},jspb.BinaryDecoder.prototype.readInt64String=function(){var e=this.readUint32(),t=this.readUint32();return jspb.utils.joinSignedDecimalString(e,t)},jspb.BinaryDecoder.prototype.readFloat=function(){var e=this.readUint32();return jspb.utils.joinFloat32(e,0)},jspb.BinaryDecoder.prototype.readDouble=function(){var e=this.readUint32(),t=this.readUint32();return jspb.utils.joinFloat64(e,t)},jspb.BinaryDecoder.prototype.readBool=function(){return!!this.bytes_[this.cursor_++]},jspb.BinaryDecoder.prototype.readEnum=function(){return this.readSignedVarint32()},jspb.BinaryDecoder.prototype.readString=function(e){var t=this.bytes_,o=this.cursor_;e=o+e;for(var r=[],n="";o<e;){var i=t[o++];if(128>i)r.push(i);else{if(192>i)continue;if(224>i){var s=t[o++];r.push((31&i)<<6|63&s)}else if(240>i){s=t[o++];var a=t[o++];r.push((15&i)<<12|(63&s)<<6|63&a)}else if(248>i){i=(7&i)<<18|(63&(s=t[o++]))<<12|(63&(a=t[o++]))<<6|63&t[o++],i-=65536,r.push(55296+(i>>10&1023),56320+(1023&i))}}8192<=r.length&&(n+=String.fromCharCode.apply(null,r),r.length=0)}return n+=goog.crypt.byteArrayToString(r),this.cursor_=o,n},jspb.BinaryDecoder.prototype.readStringWithLength=function(){var e=this.readUnsignedVarint32();return this.readString(e)},jspb.BinaryDecoder.prototype.readBytes=function(e){if(0>e||this.cursor_+e>this.bytes_.length)return this.error_=!0,goog.asserts.fail("Invalid byte length!"),new Uint8Array(0);var t=this.bytes_.subarray(this.cursor_,this.cursor_+e);return this.cursor_+=e,goog.asserts.assert(this.cursor_<=this.end_),t},jspb.BinaryDecoder.prototype.readVarintHash64=function(){return this.readSplitVarint64(jspb.utils.joinHash64)},jspb.BinaryDecoder.prototype.readFixedHash64=function(){var e=this.bytes_,t=this.cursor_,o=e[t+0],r=e[t+1],n=e[t+2],i=e[t+3],s=e[t+4],a=e[t+5],g=e[t+6];return e=e[t+7],this.cursor_+=8,String.fromCharCode(o,r,n,i,s,a,g,e)},jspb.BinaryReader=function(e,t,o){this.decoder_=jspb.BinaryDecoder.alloc(e,t,o),this.fieldCursor_=this.decoder_.getCursor(),this.nextField_=jspb.BinaryConstants.INVALID_FIELD_NUMBER,this.nextWireType_=jspb.BinaryConstants.WireType.INVALID,this.error_=!1,this.readCallbacks_=null},jspb.BinaryReader.instanceCache_=[],jspb.BinaryReader.alloc=function(e,t,o){if(jspb.BinaryReader.instanceCache_.length){var r=jspb.BinaryReader.instanceCache_.pop();return e&&r.decoder_.setBlock(e,t,o),r}return new jspb.BinaryReader(e,t,o)},jspb.BinaryReader.prototype.alloc=jspb.BinaryReader.alloc,jspb.BinaryReader.prototype.free=function(){this.decoder_.clear(),this.nextField_=jspb.BinaryConstants.INVALID_FIELD_NUMBER,this.nextWireType_=jspb.BinaryConstants.WireType.INVALID,this.error_=!1,this.readCallbacks_=null,100>jspb.BinaryReader.instanceCache_.length&&jspb.BinaryReader.instanceCache_.push(this)},jspb.BinaryReader.prototype.getFieldCursor=function(){return this.fieldCursor_},jspb.BinaryReader.prototype.getCursor=function(){return this.decoder_.getCursor()},jspb.BinaryReader.prototype.getBuffer=function(){return this.decoder_.getBuffer()},jspb.BinaryReader.prototype.getFieldNumber=function(){return this.nextField_},jspb.BinaryReader.prototype.getWireType=function(){return this.nextWireType_},jspb.BinaryReader.prototype.isDelimited=function(){return this.nextWireType_==jspb.BinaryConstants.WireType.DELIMITED},jspb.BinaryReader.prototype.isEndGroup=function(){return this.nextWireType_==jspb.BinaryConstants.WireType.END_GROUP},jspb.BinaryReader.prototype.getError=function(){return this.error_||this.decoder_.getError()},jspb.BinaryReader.prototype.setBlock=function(e,t,o){this.decoder_.setBlock(e,t,o),this.nextField_=jspb.BinaryConstants.INVALID_FIELD_NUMBER,this.nextWireType_=jspb.BinaryConstants.WireType.INVALID},jspb.BinaryReader.prototype.reset=function(){this.decoder_.reset(),this.nextField_=jspb.BinaryConstants.INVALID_FIELD_NUMBER,this.nextWireType_=jspb.BinaryConstants.WireType.INVALID},jspb.BinaryReader.prototype.advance=function(e){this.decoder_.advance(e)},jspb.BinaryReader.prototype.nextField=function(){if(this.decoder_.atEnd())return!1;if(this.getError())return goog.asserts.fail("Decoder hit an error"),!1;this.fieldCursor_=this.decoder_.getCursor();var e=this.decoder_.readUnsignedVarint32(),t=e>>>3;return(e&=7)!=jspb.BinaryConstants.WireType.VARINT&&e!=jspb.BinaryConstants.WireType.FIXED32&&e!=jspb.BinaryConstants.WireType.FIXED64&&e!=jspb.BinaryConstants.WireType.DELIMITED&&e!=jspb.BinaryConstants.WireType.START_GROUP&&e!=jspb.BinaryConstants.WireType.END_GROUP?(goog.asserts.fail("Invalid wire type: %s (at position %s)",e,this.fieldCursor_),this.error_=!0,!1):(this.nextField_=t,this.nextWireType_=e,!0)},jspb.BinaryReader.prototype.unskipHeader=function(){this.decoder_.unskipVarint(this.nextField_<<3|this.nextWireType_)},jspb.BinaryReader.prototype.skipMatchingFields=function(){var e=this.nextField_;for(this.unskipHeader();this.nextField()&&this.getFieldNumber()==e;)this.skipField();this.decoder_.atEnd()||this.unskipHeader()},jspb.BinaryReader.prototype.skipVarintField=function(){this.nextWireType_!=jspb.BinaryConstants.WireType.VARINT?(goog.asserts.fail("Invalid wire type for skipVarintField"),this.skipField()):this.decoder_.skipVarint()},jspb.BinaryReader.prototype.skipDelimitedField=function(){if(this.nextWireType_!=jspb.BinaryConstants.WireType.DELIMITED)goog.asserts.fail("Invalid wire type for skipDelimitedField"),this.skipField();else{var e=this.decoder_.readUnsignedVarint32();this.decoder_.advance(e)}},jspb.BinaryReader.prototype.skipFixed32Field=function(){this.nextWireType_!=jspb.BinaryConstants.WireType.FIXED32?(goog.asserts.fail("Invalid wire type for skipFixed32Field"),this.skipField()):this.decoder_.advance(4)},jspb.BinaryReader.prototype.skipFixed64Field=function(){this.nextWireType_!=jspb.BinaryConstants.WireType.FIXED64?(goog.asserts.fail("Invalid wire type for skipFixed64Field"),this.skipField()):this.decoder_.advance(8)},jspb.BinaryReader.prototype.skipGroup=function(){for(var e=this.nextField_;;){if(!this.nextField()){goog.asserts.fail("Unmatched start-group tag: stream EOF"),this.error_=!0;break}if(this.nextWireType_==jspb.BinaryConstants.WireType.END_GROUP){this.nextField_!=e&&(goog.asserts.fail("Unmatched end-group tag"),this.error_=!0);break}this.skipField()}},jspb.BinaryReader.prototype.skipField=function(){switch(this.nextWireType_){case jspb.BinaryConstants.WireType.VARINT:this.skipVarintField();break;case jspb.BinaryConstants.WireType.FIXED64:this.skipFixed64Field();break;case jspb.BinaryConstants.WireType.DELIMITED:this.skipDelimitedField();break;case jspb.BinaryConstants.WireType.FIXED32:this.skipFixed32Field();break;case jspb.BinaryConstants.WireType.START_GROUP:this.skipGroup();break;default:goog.asserts.fail("Invalid wire encoding for field.")}},jspb.BinaryReader.prototype.registerReadCallback=function(e,t){null===this.readCallbacks_&&(this.readCallbacks_={}),goog.asserts.assert(!this.readCallbacks_[e]),this.readCallbacks_[e]=t},jspb.BinaryReader.prototype.runReadCallback=function(e){return goog.asserts.assert(null!==this.readCallbacks_),e=this.readCallbacks_[e],goog.asserts.assert(e),e(this)},jspb.BinaryReader.prototype.readAny=function(e){this.nextWireType_=jspb.BinaryConstants.FieldTypeToWireType(e);var t=jspb.BinaryConstants.FieldType;switch(e){case t.DOUBLE:return this.readDouble();case t.FLOAT:return this.readFloat();case t.INT64:return this.readInt64();case t.UINT64:return this.readUint64();case t.INT32:return this.readInt32();case t.FIXED64:return this.readFixed64();case t.FIXED32:return this.readFixed32();case t.BOOL:return this.readBool();case t.STRING:return this.readString();case t.GROUP:goog.asserts.fail("Group field type not supported in readAny()");case t.MESSAGE:goog.asserts.fail("Message field type not supported in readAny()");case t.BYTES:return this.readBytes();case t.UINT32:return this.readUint32();case t.ENUM:return this.readEnum();case t.SFIXED32:return this.readSfixed32();case t.SFIXED64:return this.readSfixed64();case t.SINT32:return this.readSint32();case t.SINT64:return this.readSint64();case t.FHASH64:return this.readFixedHash64();case t.VHASH64:return this.readVarintHash64();default:goog.asserts.fail("Invalid field type in readAny()")}return 0},jspb.BinaryReader.prototype.readMessage=function(e,t){goog.asserts.assert(this.nextWireType_==jspb.BinaryConstants.WireType.DELIMITED);var o=this.decoder_.getEnd(),r=this.decoder_.readUnsignedVarint32();r=this.decoder_.getCursor()+r,this.decoder_.setEnd(r),t(e,this),this.decoder_.setCursor(r),this.decoder_.setEnd(o)},jspb.BinaryReader.prototype.readGroup=function(e,t,o){goog.asserts.assert(this.nextWireType_==jspb.BinaryConstants.WireType.START_GROUP),goog.asserts.assert(this.nextField_==e),o(t,this),this.error_||this.nextWireType_==jspb.BinaryConstants.WireType.END_GROUP||(goog.asserts.fail("Group submessage did not end with an END_GROUP tag"),this.error_=!0)},jspb.BinaryReader.prototype.getFieldDecoder=function(){goog.asserts.assert(this.nextWireType_==jspb.BinaryConstants.WireType.DELIMITED);var e=this.decoder_.readUnsignedVarint32(),t=this.decoder_.getCursor(),o=t+e;return e=jspb.BinaryDecoder.alloc(this.decoder_.getBuffer(),t,e),this.decoder_.setCursor(o),e},jspb.BinaryReader.prototype.readInt32=function(){return goog.asserts.assert(this.nextWireType_==jspb.BinaryConstants.WireType.VARINT),this.decoder_.readSignedVarint32()},jspb.BinaryReader.prototype.readInt32String=function(){return goog.asserts.assert(this.nextWireType_==jspb.BinaryConstants.WireType.VARINT),this.decoder_.readSignedVarint32String()},jspb.BinaryReader.prototype.readInt64=function(){return goog.asserts.assert(this.nextWireType_==jspb.BinaryConstants.WireType.VARINT),this.decoder_.readSignedVarint64()},jspb.BinaryReader.prototype.readInt64String=function(){return goog.asserts.assert(this.nextWireType_==jspb.BinaryConstants.WireType.VARINT),this.decoder_.readSignedVarint64String()},jspb.BinaryReader.prototype.readUint32=function(){return goog.asserts.assert(this.nextWireType_==jspb.BinaryConstants.WireType.VARINT),this.decoder_.readUnsignedVarint32()},jspb.BinaryReader.prototype.readUint32String=function(){return goog.asserts.assert(this.nextWireType_==jspb.BinaryConstants.WireType.VARINT),this.decoder_.readUnsignedVarint32String()},jspb.BinaryReader.prototype.readUint64=function(){return goog.asserts.assert(this.nextWireType_==jspb.BinaryConstants.WireType.VARINT),this.decoder_.readUnsignedVarint64()},jspb.BinaryReader.prototype.readUint64String=function(){return goog.asserts.assert(this.nextWireType_==jspb.BinaryConstants.WireType.VARINT),this.decoder_.readUnsignedVarint64String()},jspb.BinaryReader.prototype.readSint32=function(){return goog.asserts.assert(this.nextWireType_==jspb.BinaryConstants.WireType.VARINT),this.decoder_.readZigzagVarint32()},jspb.BinaryReader.prototype.readSint64=function(){return goog.asserts.assert(this.nextWireType_==jspb.BinaryConstants.WireType.VARINT),this.decoder_.readZigzagVarint64()},jspb.BinaryReader.prototype.readSint64String=function(){return goog.asserts.assert(this.nextWireType_==jspb.BinaryConstants.WireType.VARINT),this.decoder_.readZigzagVarint64String()},jspb.BinaryReader.prototype.readFixed32=function(){return goog.asserts.assert(this.nextWireType_==jspb.BinaryConstants.WireType.FIXED32),this.decoder_.readUint32()},jspb.BinaryReader.prototype.readFixed64=function(){return goog.asserts.assert(this.nextWireType_==jspb.BinaryConstants.WireType.FIXED64),this.decoder_.readUint64()},jspb.BinaryReader.prototype.readFixed64String=function(){return goog.asserts.assert(this.nextWireType_==jspb.BinaryConstants.WireType.FIXED64),this.decoder_.readUint64String()},jspb.BinaryReader.prototype.readSfixed32=function(){return goog.asserts.assert(this.nextWireType_==jspb.BinaryConstants.WireType.FIXED32),this.decoder_.readInt32()},jspb.BinaryReader.prototype.readSfixed32String=function(){return goog.asserts.assert(this.nextWireType_==jspb.BinaryConstants.WireType.FIXED32),this.decoder_.readInt32().toString()},jspb.BinaryReader.prototype.readSfixed64=function(){return goog.asserts.assert(this.nextWireType_==jspb.BinaryConstants.WireType.FIXED64),this.decoder_.readInt64()},jspb.BinaryReader.prototype.readSfixed64String=function(){return goog.asserts.assert(this.nextWireType_==jspb.BinaryConstants.WireType.FIXED64),this.decoder_.readInt64String()},jspb.BinaryReader.prototype.readFloat=function(){return goog.asserts.assert(this.nextWireType_==jspb.BinaryConstants.WireType.FIXED32),this.decoder_.readFloat()},jspb.BinaryReader.prototype.readDouble=function(){return goog.asserts.assert(this.nextWireType_==jspb.BinaryConstants.WireType.FIXED64),this.decoder_.readDouble()},jspb.BinaryReader.prototype.readBool=function(){return goog.asserts.assert(this.nextWireType_==jspb.BinaryConstants.WireType.VARINT),!!this.decoder_.readUnsignedVarint32()},jspb.BinaryReader.prototype.readEnum=function(){return goog.asserts.assert(this.nextWireType_==jspb.BinaryConstants.WireType.VARINT),this.decoder_.readSignedVarint64()},jspb.BinaryReader.prototype.readString=function(){goog.asserts.assert(this.nextWireType_==jspb.BinaryConstants.WireType.DELIMITED);var e=this.decoder_.readUnsignedVarint32();return this.decoder_.readString(e)},jspb.BinaryReader.prototype.readBytes=function(){goog.asserts.assert(this.nextWireType_==jspb.BinaryConstants.WireType.DELIMITED);var e=this.decoder_.readUnsignedVarint32();return this.decoder_.readBytes(e)},jspb.BinaryReader.prototype.readVarintHash64=function(){return goog.asserts.assert(this.nextWireType_==jspb.BinaryConstants.WireType.VARINT),this.decoder_.readVarintHash64()},jspb.BinaryReader.prototype.readSintHash64=function(){return goog.asserts.assert(this.nextWireType_==jspb.BinaryConstants.WireType.VARINT),this.decoder_.readZigzagVarintHash64()},jspb.BinaryReader.prototype.readSplitVarint64=function(e){return goog.asserts.assert(this.nextWireType_==jspb.BinaryConstants.WireType.VARINT),this.decoder_.readSplitVarint64(e)},jspb.BinaryReader.prototype.readSplitZigzagVarint64=function(e){return goog.asserts.assert(this.nextWireType_==jspb.BinaryConstants.WireType.VARINT),this.decoder_.readSplitVarint64((function(t,o){return jspb.utils.fromZigzag64(t,o,e)}))},jspb.BinaryReader.prototype.readFixedHash64=function(){return goog.asserts.assert(this.nextWireType_==jspb.BinaryConstants.WireType.FIXED64),this.decoder_.readFixedHash64()},jspb.BinaryReader.prototype.readSplitFixed64=function(e){return goog.asserts.assert(this.nextWireType_==jspb.BinaryConstants.WireType.FIXED64),this.decoder_.readSplitFixed64(e)},jspb.BinaryReader.prototype.readPackedField_=function(e){goog.asserts.assert(this.nextWireType_==jspb.BinaryConstants.WireType.DELIMITED);var t=this.decoder_.readUnsignedVarint32();t=this.decoder_.getCursor()+t;for(var o=[];this.decoder_.getCursor()<t;)o.push(e.call(this.decoder_));return o},jspb.BinaryReader.prototype.readPackedInt32=function(){return this.readPackedField_(this.decoder_.readSignedVarint32)},jspb.BinaryReader.prototype.readPackedInt32String=function(){return this.readPackedField_(this.decoder_.readSignedVarint32String)},jspb.BinaryReader.prototype.readPackedInt64=function(){return this.readPackedField_(this.decoder_.readSignedVarint64)},jspb.BinaryReader.prototype.readPackedInt64String=function(){return this.readPackedField_(this.decoder_.readSignedVarint64String)},jspb.BinaryReader.prototype.readPackedUint32=function(){return this.readPackedField_(this.decoder_.readUnsignedVarint32)},jspb.BinaryReader.prototype.readPackedUint32String=function(){return this.readPackedField_(this.decoder_.readUnsignedVarint32String)},jspb.BinaryReader.prototype.readPackedUint64=function(){return this.readPackedField_(this.decoder_.readUnsignedVarint64)},jspb.BinaryReader.prototype.readPackedUint64String=function(){return this.readPackedField_(this.decoder_.readUnsignedVarint64String)},jspb.BinaryReader.prototype.readPackedSint32=function(){return this.readPackedField_(this.decoder_.readZigzagVarint32)},jspb.BinaryReader.prototype.readPackedSint64=function(){return this.readPackedField_(this.decoder_.readZigzagVarint64)},jspb.BinaryReader.prototype.readPackedSint64String=function(){return this.readPackedField_(this.decoder_.readZigzagVarint64String)},jspb.BinaryReader.prototype.readPackedFixed32=function(){return this.readPackedField_(this.decoder_.readUint32)},jspb.BinaryReader.prototype.readPackedFixed64=function(){return this.readPackedField_(this.decoder_.readUint64)},jspb.BinaryReader.prototype.readPackedFixed64String=function(){return this.readPackedField_(this.decoder_.readUint64String)},jspb.BinaryReader.prototype.readPackedSfixed32=function(){return this.readPackedField_(this.decoder_.readInt32)},jspb.BinaryReader.prototype.readPackedSfixed64=function(){return this.readPackedField_(this.decoder_.readInt64)},jspb.BinaryReader.prototype.readPackedSfixed64String=function(){return this.readPackedField_(this.decoder_.readInt64String)},jspb.BinaryReader.prototype.readPackedFloat=function(){return this.readPackedField_(this.decoder_.readFloat)},jspb.BinaryReader.prototype.readPackedDouble=function(){return this.readPackedField_(this.decoder_.readDouble)},jspb.BinaryReader.prototype.readPackedBool=function(){return this.readPackedField_(this.decoder_.readBool)},jspb.BinaryReader.prototype.readPackedEnum=function(){return this.readPackedField_(this.decoder_.readEnum)},jspb.BinaryReader.prototype.readPackedVarintHash64=function(){return this.readPackedField_(this.decoder_.readVarintHash64)},jspb.BinaryReader.prototype.readPackedFixedHash64=function(){return this.readPackedField_(this.decoder_.readFixedHash64)},jspb.Map=function(e,t){this.arr_=e,this.valueCtor_=t,this.map_={},this.arrClean=!0,0<this.arr_.length&&this.loadFromArray_()},jspb.Map.prototype.loadFromArray_=function(){for(var e=0;e<this.arr_.length;e++){var t=this.arr_[e],o=t[0];this.map_[o.toString()]=new jspb.Map.Entry_(o,t[1])}this.arrClean=!0},jspb.Map.prototype.toArray=function(){if(this.arrClean){if(this.valueCtor_){var e,t=this.map_;for(e in t)if(Object.prototype.hasOwnProperty.call(t,e)){var o=t[e].valueWrapper;o&&o.toArray()}}}else{for(this.arr_.length=0,(t=this.stringKeys_()).sort(),e=0;e<t.length;e++){var r=this.map_[t[e]];(o=r.valueWrapper)&&o.toArray(),this.arr_.push([r.key,r.value])}this.arrClean=!0}return this.arr_},jspb.Map.prototype.toObject=function(e,t){for(var o=this.toArray(),r=[],n=0;n<o.length;n++){var i=this.map_[o[n][0].toString()];this.wrapEntry_(i);var s=i.valueWrapper;s?(goog.asserts.assert(t),r.push([i.key,t(e,s)])):r.push([i.key,i.value])}return r},jspb.Map.fromObject=function(e,t,o){t=new jspb.Map([],t);for(var r=0;r<e.length;r++){var n=e[r][0],i=o(e[r][1]);t.set(n,i)}return t},jspb.Map.ArrayIteratorIterable_=function(e){this.idx_=0,this.arr_=e},jspb.Map.ArrayIteratorIterable_.prototype.next=function(){return this.idx_<this.arr_.length?{done:!1,value:this.arr_[this.idx_++]}:{done:!0,value:void 0}},"undefined"!=typeof Symbol&&(jspb.Map.ArrayIteratorIterable_.prototype[Symbol.iterator]=function(){return this}),jspb.Map.prototype.getLength=function(){return this.stringKeys_().length},jspb.Map.prototype.clear=function(){this.map_={},this.arrClean=!1},jspb.Map.prototype.del=function(e){e=e.toString();var t=this.map_.hasOwnProperty(e);return delete this.map_[e],this.arrClean=!1,t},jspb.Map.prototype.getEntryList=function(){var e=[],t=this.stringKeys_();t.sort();for(var o=0;o<t.length;o++){var r=this.map_[t[o]];e.push([r.key,r.value])}return e},jspb.Map.prototype.entries=function(){var e=[],t=this.stringKeys_();t.sort();for(var o=0;o<t.length;o++){var r=this.map_[t[o]];e.push([r.key,this.wrapEntry_(r)])}return new jspb.Map.ArrayIteratorIterable_(e)},jspb.Map.prototype.keys=function(){var e=[],t=this.stringKeys_();t.sort();for(var o=0;o<t.length;o++)e.push(this.map_[t[o]].key);return new jspb.Map.ArrayIteratorIterable_(e)},jspb.Map.prototype.values=function(){var e=[],t=this.stringKeys_();t.sort();for(var o=0;o<t.length;o++)e.push(this.wrapEntry_(this.map_[t[o]]));return new jspb.Map.ArrayIteratorIterable_(e)},jspb.Map.prototype.forEach=function(e,t){var o=this.stringKeys_();o.sort();for(var r=0;r<o.length;r++){var n=this.map_[o[r]];e.call(t,this.wrapEntry_(n),n.key,this)}},jspb.Map.prototype.set=function(e,t){var o=new jspb.Map.Entry_(e);return this.valueCtor_?(o.valueWrapper=t,o.value=t.toArray()):o.value=t,this.map_[e.toString()]=o,this.arrClean=!1,this},jspb.Map.prototype.wrapEntry_=function(e){return this.valueCtor_?(e.valueWrapper||(e.valueWrapper=new this.valueCtor_(e.value)),e.valueWrapper):e.value},jspb.Map.prototype.get=function(e){if(e=this.map_[e.toString()])return this.wrapEntry_(e)},jspb.Map.prototype.has=function(e){return e.toString()in this.map_},jspb.Map.prototype.serializeBinary=function(e,t,o,r,n){var i=this.stringKeys_();i.sort();for(var s=0;s<i.length;s++){var a=this.map_[i[s]];t.beginSubMessage(e),o.call(t,1,a.key),this.valueCtor_?r.call(t,2,this.wrapEntry_(a),n):r.call(t,2,a.value),t.endSubMessage()}},jspb.Map.deserializeBinary=function(e,t,o,r,n,i,s){for(;t.nextField()&&!t.isEndGroup();){var a=t.getFieldNumber();1==a?i=o.call(t):2==a&&(e.valueCtor_?(goog.asserts.assert(n),s||(s=new e.valueCtor_),r.call(t,s,n)):s=r.call(t))}goog.asserts.assert(null!=i),goog.asserts.assert(null!=s),e.set(i,s)},jspb.Map.prototype.stringKeys_=function(){var e,t=this.map_,o=[];for(e in t)Object.prototype.hasOwnProperty.call(t,e)&&o.push(e);return o},jspb.Map.Entry_=function(e,t){this.key=e,this.value=t,this.valueWrapper=void 0},jspb.ExtensionFieldInfo=function(e,t,o,r,n){this.fieldIndex=e,this.fieldName=t,this.ctor=o,this.toObjectFn=r,this.isRepeated=n},jspb.ExtensionFieldBinaryInfo=function(e,t,o,r,n,i){this.fieldInfo=e,this.binaryReaderFn=t,this.binaryWriterFn=o,this.binaryMessageSerializeFn=r,this.binaryMessageDeserializeFn=n,this.isPacked=i},jspb.ExtensionFieldInfo.prototype.isMessageType=function(){return!!this.ctor},jspb.Message=function(){},jspb.Message.GENERATE_TO_OBJECT=!0,jspb.Message.GENERATE_FROM_OBJECT=!goog.DISALLOW_TEST_ONLY_CODE,jspb.Message.GENERATE_TO_STRING=!0,jspb.Message.ASSUME_LOCAL_ARRAYS=!1,jspb.Message.SERIALIZE_EMPTY_TRAILING_FIELDS=!0,jspb.Message.SUPPORTS_UINT8ARRAY_="function"==typeof Uint8Array,jspb.Message.prototype.getJsPbMessageId=function(){return this.messageId_},jspb.Message.getIndex_=function(e,t){return t+e.arrayIndexOffset_},jspb.Message.hiddenES6Property_=function(){},jspb.Message.getFieldNumber_=function(e,t){return t-e.arrayIndexOffset_},jspb.Message.initialize=function(e,t,o,r,n,i){if(e.wrappers_=null,t||(t=o?[o]:[]),e.messageId_=o?String(o):void 0,e.arrayIndexOffset_=0===o?-1:0,e.array=t,jspb.Message.initPivotAndExtensionObject_(e,r),e.convertedPrimitiveFields_={},jspb.Message.SERIALIZE_EMPTY_TRAILING_FIELDS||(e.repeatedFields=n),n)for(t=0;t<n.length;t++)(o=n[t])<e.pivot_?(o=jspb.Message.getIndex_(e,o),e.array[o]=e.array[o]||jspb.Message.EMPTY_LIST_SENTINEL_):(jspb.Message.maybeInitEmptyExtensionObject_(e),e.extensionObject_[o]=e.extensionObject_[o]||jspb.Message.EMPTY_LIST_SENTINEL_);if(i&&i.length)for(t=0;t<i.length;t++)jspb.Message.computeOneofCase(e,i[t])},jspb.Message.EMPTY_LIST_SENTINEL_=goog.DEBUG&&Object.freeze?Object.freeze([]):[],jspb.Message.isArray_=function(e){return jspb.Message.ASSUME_LOCAL_ARRAYS?e instanceof Array:Array.isArray(e)},jspb.Message.isExtensionObject_=function(e){return!(null===e||"object"!=typeof e||jspb.Message.isArray_(e)||jspb.Message.SUPPORTS_UINT8ARRAY_&&e instanceof Uint8Array)},jspb.Message.initPivotAndExtensionObject_=function(e,t){var o=e.array.length,r=-1;if(o&&(r=o-1,o=e.array[r],jspb.Message.isExtensionObject_(o)))return e.pivot_=jspb.Message.getFieldNumber_(e,r),void(e.extensionObject_=o);-1<t?(e.pivot_=Math.max(t,jspb.Message.getFieldNumber_(e,r+1)),e.extensionObject_=null):e.pivot_=Number.MAX_VALUE},jspb.Message.maybeInitEmptyExtensionObject_=function(e){var t=jspb.Message.getIndex_(e,e.pivot_);e.array[t]||(e.extensionObject_=e.array[t]={})},jspb.Message.toObjectList=function(e,t,o){for(var r=[],n=0;n<e.length;n++)r[n]=t.call(e[n],o,e[n]);return r},jspb.Message.toObjectExtension=function(e,t,o,r,n){for(var i in o){var s=o[i],a=r.call(e,s);if(null!=a){for(var g in s.fieldName)if(s.fieldName.hasOwnProperty(g))break;t[g]=s.toObjectFn?s.isRepeated?jspb.Message.toObjectList(a,s.toObjectFn,n):s.toObjectFn(n,a):a}}},jspb.Message.serializeBinaryExtensions=function(e,t,o,r){for(var n in o){var i=o[n],s=i.fieldInfo;if(!i.binaryWriterFn)throw Error("Message extension present that was generated without binary serialization support");var a=r.call(e,s);if(null!=a)if(s.isMessageType()){if(!i.binaryMessageSerializeFn)throw Error("Message extension present holding submessage without binary support enabled, and message is being serialized to binary format");i.binaryWriterFn.call(t,s.fieldIndex,a,i.binaryMessageSerializeFn)}else i.binaryWriterFn.call(t,s.fieldIndex,a)}},jspb.Message.readBinaryExtension=function(e,t,o,r,n){var i=o[t.getFieldNumber()];if(i){if(o=i.fieldInfo,!i.binaryReaderFn)throw Error("Deserializing extension whose generated code does not support binary format");if(o.isMessageType()){var s=new o.ctor;i.binaryReaderFn.call(t,s,i.binaryMessageDeserializeFn)}else s=i.binaryReaderFn.call(t);o.isRepeated&&!i.isPacked?(t=r.call(e,o))?t.push(s):n.call(e,o,[s]):n.call(e,o,s)}else t.skipField()},jspb.Message.getField=function(e,t){if(t<e.pivot_){t=jspb.Message.getIndex_(e,t);var o=e.array[t];return o===jspb.Message.EMPTY_LIST_SENTINEL_?e.array[t]=[]:o}if(e.extensionObject_)return(o=e.extensionObject_[t])===jspb.Message.EMPTY_LIST_SENTINEL_?e.extensionObject_[t]=[]:o},jspb.Message.getRepeatedField=function(e,t){return jspb.Message.getField(e,t)},jspb.Message.getOptionalFloatingPointField=function(e,t){return null==(e=jspb.Message.getField(e,t))?e:+e},jspb.Message.getBooleanField=function(e,t){return null==(e=jspb.Message.getField(e,t))?e:!!e},jspb.Message.getRepeatedFloatingPointField=function(e,t){var o=jspb.Message.getRepeatedField(e,t);if(e.convertedPrimitiveFields_||(e.convertedPrimitiveFields_={}),!e.convertedPrimitiveFields_[t]){for(var r=0;r<o.length;r++)o[r]=+o[r];e.convertedPrimitiveFields_[t]=!0}return o},jspb.Message.getRepeatedBooleanField=function(e,t){var o=jspb.Message.getRepeatedField(e,t);if(e.convertedPrimitiveFields_||(e.convertedPrimitiveFields_={}),!e.convertedPrimitiveFields_[t]){for(var r=0;r<o.length;r++)o[r]=!!o[r];e.convertedPrimitiveFields_[t]=!0}return o},jspb.Message.bytesAsB64=function(e){return null==e||"string"==typeof e?e:jspb.Message.SUPPORTS_UINT8ARRAY_&&e instanceof Uint8Array?goog.crypt.base64.encodeByteArray(e):(goog.asserts.fail("Cannot coerce to b64 string: "+goog.typeOf(e)),null)},jspb.Message.bytesAsU8=function(e){return null==e||e instanceof Uint8Array?e:"string"==typeof e?goog.crypt.base64.decodeStringToUint8Array(e):(goog.asserts.fail("Cannot coerce to Uint8Array: "+goog.typeOf(e)),null)},jspb.Message.bytesListAsB64=function(e){return jspb.Message.assertConsistentTypes_(e),e.length&&"string"!=typeof e[0]?goog.array.map(e,jspb.Message.bytesAsB64):e},jspb.Message.bytesListAsU8=function(e){return jspb.Message.assertConsistentTypes_(e),!e.length||e[0]instanceof Uint8Array?e:goog.array.map(e,jspb.Message.bytesAsU8)},jspb.Message.assertConsistentTypes_=function(e){if(goog.DEBUG&&e&&1<e.length){var t=goog.typeOf(e[0]);goog.array.forEach(e,(function(e){goog.typeOf(e)!=t&&goog.asserts.fail("Inconsistent type in JSPB repeated field array. Got "+goog.typeOf(e)+" expected "+t)}))}},jspb.Message.getFieldWithDefault=function(e,t,o){return null==(e=jspb.Message.getField(e,t))?o:e},jspb.Message.getBooleanFieldWithDefault=function(e,t,o){return null==(e=jspb.Message.getBooleanField(e,t))?o:e},jspb.Message.getFloatingPointFieldWithDefault=function(e,t,o){return null==(e=jspb.Message.getOptionalFloatingPointField(e,t))?o:e},jspb.Message.getFieldProto3=jspb.Message.getFieldWithDefault,jspb.Message.getMapField=function(e,t,o,r){if(e.wrappers_||(e.wrappers_={}),t in e.wrappers_)return e.wrappers_[t];var n=jspb.Message.getField(e,t);if(!n){if(o)return;n=[],jspb.Message.setField(e,t,n)}return e.wrappers_[t]=new jspb.Map(n,r)},jspb.Message.setField=function(e,t,o){return goog.asserts.assertInstanceof(e,jspb.Message),t<e.pivot_?e.array[jspb.Message.getIndex_(e,t)]=o:(jspb.Message.maybeInitEmptyExtensionObject_(e),e.extensionObject_[t]=o),e},jspb.Message.setProto3IntField=function(e,t,o){return jspb.Message.setFieldIgnoringDefault_(e,t,o,0)},jspb.Message.setProto3FloatField=function(e,t,o){return jspb.Message.setFieldIgnoringDefault_(e,t,o,0)},jspb.Message.setProto3BooleanField=function(e,t,o){return jspb.Message.setFieldIgnoringDefault_(e,t,o,!1)},jspb.Message.setProto3StringField=function(e,t,o){return jspb.Message.setFieldIgnoringDefault_(e,t,o,"")},jspb.Message.setProto3BytesField=function(e,t,o){return jspb.Message.setFieldIgnoringDefault_(e,t,o,"")},jspb.Message.setProto3EnumField=function(e,t,o){return jspb.Message.setFieldIgnoringDefault_(e,t,o,0)},jspb.Message.setProto3StringIntField=function(e,t,o){return jspb.Message.setFieldIgnoringDefault_(e,t,o,"0")},jspb.Message.setFieldIgnoringDefault_=function(e,t,o,r){return goog.asserts.assertInstanceof(e,jspb.Message),o!==r?jspb.Message.setField(e,t,o):t<e.pivot_?e.array[jspb.Message.getIndex_(e,t)]=null:(jspb.Message.maybeInitEmptyExtensionObject_(e),delete e.extensionObject_[t]),e},jspb.Message.addToRepeatedField=function(e,t,o,r){return goog.asserts.assertInstanceof(e,jspb.Message),t=jspb.Message.getRepeatedField(e,t),null!=r?t.splice(r,0,o):t.push(o),e},jspb.Message.setOneofField=function(e,t,o,r){return goog.asserts.assertInstanceof(e,jspb.Message),(o=jspb.Message.computeOneofCase(e,o))&&o!==t&&void 0!==r&&(e.wrappers_&&o in e.wrappers_&&(e.wrappers_[o]=void 0),jspb.Message.setField(e,o,void 0)),jspb.Message.setField(e,t,r)},jspb.Message.computeOneofCase=function(e,t){for(var o,r,n=0;n<t.length;n++){var i=t[n],s=jspb.Message.getField(e,i);null!=s&&(o=i,r=s,jspb.Message.setField(e,i,void 0))}return o?(jspb.Message.setField(e,o,r),o):0},jspb.Message.getWrapperField=function(e,t,o,r){if(e.wrappers_||(e.wrappers_={}),!e.wrappers_[o]){var n=jspb.Message.getField(e,o);(r||n)&&(e.wrappers_[o]=new t(n))}return e.wrappers_[o]},jspb.Message.getRepeatedWrapperField=function(e,t,o){return jspb.Message.wrapRepeatedField_(e,t,o),(t=e.wrappers_[o])==jspb.Message.EMPTY_LIST_SENTINEL_&&(t=e.wrappers_[o]=[]),t},jspb.Message.wrapRepeatedField_=function(e,t,o){if(e.wrappers_||(e.wrappers_={}),!e.wrappers_[o]){for(var r=jspb.Message.getRepeatedField(e,o),n=[],i=0;i<r.length;i++)n[i]=new t(r[i]);e.wrappers_[o]=n}},jspb.Message.setWrapperField=function(e,t,o){goog.asserts.assertInstanceof(e,jspb.Message),e.wrappers_||(e.wrappers_={});var r=o?o.toArray():o;return e.wrappers_[t]=o,jspb.Message.setField(e,t,r)},jspb.Message.setOneofWrapperField=function(e,t,o,r){goog.asserts.assertInstanceof(e,jspb.Message),e.wrappers_||(e.wrappers_={});var n=r?r.toArray():r;return e.wrappers_[t]=r,jspb.Message.setOneofField(e,t,o,n)},jspb.Message.setRepeatedWrapperField=function(e,t,o){goog.asserts.assertInstanceof(e,jspb.Message),e.wrappers_||(e.wrappers_={}),o=o||[];for(var r=[],n=0;n<o.length;n++)r[n]=o[n].toArray();return e.wrappers_[t]=o,jspb.Message.setField(e,t,r)},jspb.Message.addToRepeatedWrapperField=function(e,t,o,r,n){jspb.Message.wrapRepeatedField_(e,r,t);var i=e.wrappers_[t];return i||(i=e.wrappers_[t]=[]),o=o||new r,e=jspb.Message.getRepeatedField(e,t),null!=n?(i.splice(n,0,o),e.splice(n,0,o.toArray())):(i.push(o),e.push(o.toArray())),o},jspb.Message.toMap=function(e,t,o,r){for(var n={},i=0;i<e.length;i++)n[t.call(e[i])]=o?o.call(e[i],r,e[i]):e[i];return n},jspb.Message.prototype.syncMapFields_=function(){if(this.wrappers_)for(var e in this.wrappers_){var t=this.wrappers_[e];if(Array.isArray(t))for(var o=0;o<t.length;o++)t[o]&&t[o].toArray();else t&&t.toArray()}},jspb.Message.prototype.toArray=function(){return this.syncMapFields_(),this.array},jspb.Message.GENERATE_TO_STRING&&(jspb.Message.prototype.toString=function(){return this.syncMapFields_(),this.array.toString()}),jspb.Message.prototype.getExtension=function(e){if(this.extensionObject_){this.wrappers_||(this.wrappers_={});var t=e.fieldIndex;if(e.isRepeated){if(e.isMessageType())return this.wrappers_[t]||(this.wrappers_[t]=goog.array.map(this.extensionObject_[t]||[],(function(t){return new e.ctor(t)}))),this.wrappers_[t]}else if(e.isMessageType())return!this.wrappers_[t]&&this.extensionObject_[t]&&(this.wrappers_[t]=new e.ctor(this.extensionObject_[t])),this.wrappers_[t];return this.extensionObject_[t]}},jspb.Message.prototype.setExtension=function(e,t){this.wrappers_||(this.wrappers_={}),jspb.Message.maybeInitEmptyExtensionObject_(this);var o=e.fieldIndex;return e.isRepeated?(t=t||[],e.isMessageType()?(this.wrappers_[o]=t,this.extensionObject_[o]=goog.array.map(t,(function(e){return e.toArray()}))):this.extensionObject_[o]=t):e.isMessageType()?(this.wrappers_[o]=t,this.extensionObject_[o]=t?t.toArray():t):this.extensionObject_[o]=t,this},jspb.Message.difference=function(e,t){if(!(e instanceof t.constructor))throw Error("Messages have different types.");var o=e.toArray();t=t.toArray();var r=[],n=0,i=o.length>t.length?o.length:t.length;for(e.getJsPbMessageId()&&(r[0]=e.getJsPbMessageId(),n=1);n<i;n++)jspb.Message.compareFields(o[n],t[n])||(r[n]=t[n]);return new e.constructor(r)},jspb.Message.equals=function(e,t){return e==t||!(!e||!t)&&e instanceof t.constructor&&jspb.Message.compareFields(e.toArray(),t.toArray())},jspb.Message.compareExtensions=function(e,t){e=e||{},t=t||{};var o,r={};for(o in e)r[o]=0;for(o in t)r[o]=0;for(o in r)if(!jspb.Message.compareFields(e[o],t[o]))return!1;return!0},jspb.Message.compareFields=function(e,t){if(e==t)return!0;if(!goog.isObject(e)||!goog.isObject(t))return!!("number"==typeof e&&isNaN(e)||"number"==typeof t&&isNaN(t))&&String(e)==String(t);if(e.constructor!=t.constructor)return!1;if(jspb.Message.SUPPORTS_UINT8ARRAY_&&e.constructor===Uint8Array){if(e.length!=t.length)return!1;for(var o=0;o<e.length;o++)if(e[o]!=t[o])return!1;return!0}if(e.constructor===Array){var r=void 0,n=void 0,i=Math.max(e.length,t.length);for(o=0;o<i;o++){var s=e[o],a=t[o];if(s&&s.constructor==Object&&(goog.asserts.assert(void 0===r),goog.asserts.assert(o===e.length-1),r=s,s=void 0),a&&a.constructor==Object&&(goog.asserts.assert(void 0===n),goog.asserts.assert(o===t.length-1),n=a,a=void 0),!jspb.Message.compareFields(s,a))return!1}return!r&&!n||(r=r||{},n=n||{},jspb.Message.compareExtensions(r,n))}if(e.constructor===Object)return jspb.Message.compareExtensions(e,t);throw Error("Invalid type in JSPB array")},jspb.Message.prototype.cloneMessage=function(){return jspb.Message.cloneMessage(this)},jspb.Message.prototype.clone=function(){return jspb.Message.cloneMessage(this)},jspb.Message.clone=function(e){return jspb.Message.cloneMessage(e)},jspb.Message.cloneMessage=function(e){return new e.constructor(jspb.Message.clone_(e.toArray()))},jspb.Message.copyInto=function(e,t){goog.asserts.assertInstanceof(e,jspb.Message),goog.asserts.assertInstanceof(t,jspb.Message),goog.asserts.assert(e.constructor==t.constructor,"Copy source and target message should have the same type."),e=jspb.Message.clone(e);for(var o=t.toArray(),r=e.toArray(),n=o.length=0;n<r.length;n++)o[n]=r[n];t.wrappers_=e.wrappers_,t.extensionObject_=e.extensionObject_},jspb.Message.clone_=function(e){if(Array.isArray(e)){for(var t=Array(e.length),o=0;o<e.length;o++){var r=e[o];null!=r&&(t[o]="object"==typeof r?jspb.Message.clone_(goog.asserts.assert(r)):r)}return t}if(jspb.Message.SUPPORTS_UINT8ARRAY_&&e instanceof Uint8Array)return new Uint8Array(e);for(o in t={},e)null!=(r=e[o])&&(t[o]="object"==typeof r?jspb.Message.clone_(goog.asserts.assert(r)):r);return t},jspb.Message.registerMessageType=function(e,t){t.messageId=e},jspb.Message.messageSetExtensions={},jspb.Message.messageSetExtensionsBinary={},jspb.arith={},jspb.arith.UInt64=function(e,t){this.lo=e,this.hi=t},jspb.arith.UInt64.prototype.cmp=function(e){return this.hi<e.hi||this.hi==e.hi&&this.lo<e.lo?-1:this.hi==e.hi&&this.lo==e.lo?0:1},jspb.arith.UInt64.prototype.rightShift=function(){return new jspb.arith.UInt64((this.lo>>>1|(1&this.hi)<<31)>>>0,this.hi>>>1>>>0)},jspb.arith.UInt64.prototype.leftShift=function(){return new jspb.arith.UInt64(this.lo<<1>>>0,(this.hi<<1|this.lo>>>31)>>>0)},jspb.arith.UInt64.prototype.msb=function(){return!!(2147483648&this.hi)},jspb.arith.UInt64.prototype.lsb=function(){return!!(1&this.lo)},jspb.arith.UInt64.prototype.zero=function(){return 0==this.lo&&0==this.hi},jspb.arith.UInt64.prototype.add=function(e){return new jspb.arith.UInt64((this.lo+e.lo&4294967295)>>>0>>>0,((this.hi+e.hi&4294967295)>>>0)+(4294967296<=this.lo+e.lo?1:0)>>>0)},jspb.arith.UInt64.prototype.sub=function(e){return new jspb.arith.UInt64((this.lo-e.lo&4294967295)>>>0>>>0,((this.hi-e.hi&4294967295)>>>0)-(0>this.lo-e.lo?1:0)>>>0)},jspb.arith.UInt64.mul32x32=function(e,t){var o=65535&e,r=65535&t,n=t>>>16;for(t=o*r+65536*(o*n&65535)+65536*((e>>>=16)*r&65535),o=e*n+(o*n>>>16)+(e*r>>>16);4294967296<=t;)t-=4294967296,o+=1;return new jspb.arith.UInt64(t>>>0,o>>>0)},jspb.arith.UInt64.prototype.mul=function(e){var t=jspb.arith.UInt64.mul32x32(this.lo,e);return(e=jspb.arith.UInt64.mul32x32(this.hi,e)).hi=e.lo,e.lo=0,t.add(e)},jspb.arith.UInt64.prototype.div=function(e){if(0==e)return[];var t=new jspb.arith.UInt64(0,0),o=new jspb.arith.UInt64(this.lo,this.hi);e=new jspb.arith.UInt64(e,0);for(var r=new jspb.arith.UInt64(1,0);!e.msb();)e=e.leftShift(),r=r.leftShift();for(;!r.zero();)0>=e.cmp(o)&&(t=t.add(r),o=o.sub(e)),e=e.rightShift(),r=r.rightShift();return[t,o]},jspb.arith.UInt64.prototype.toString=function(){for(var e="",t=this;!t.zero();){var o=(t=t.div(10))[0];e=t[1].lo+e,t=o}return""==e&&(e="0"),e},jspb.arith.UInt64.fromString=function(e){for(var t=new jspb.arith.UInt64(0,0),o=new jspb.arith.UInt64(0,0),r=0;r<e.length;r++){if("0">e[r]||"9"<e[r])return null;var n=parseInt(e[r],10);o.lo=n,t=t.mul(10).add(o)}return t},jspb.arith.UInt64.prototype.clone=function(){return new jspb.arith.UInt64(this.lo,this.hi)},jspb.arith.Int64=function(e,t){this.lo=e,this.hi=t},jspb.arith.Int64.prototype.add=function(e){return new jspb.arith.Int64((this.lo+e.lo&4294967295)>>>0>>>0,((this.hi+e.hi&4294967295)>>>0)+(4294967296<=this.lo+e.lo?1:0)>>>0)},jspb.arith.Int64.prototype.sub=function(e){return new jspb.arith.Int64((this.lo-e.lo&4294967295)>>>0>>>0,((this.hi-e.hi&4294967295)>>>0)-(0>this.lo-e.lo?1:0)>>>0)},jspb.arith.Int64.prototype.clone=function(){return new jspb.arith.Int64(this.lo,this.hi)},jspb.arith.Int64.prototype.toString=function(){var e=0!=(2147483648&this.hi),t=new jspb.arith.UInt64(this.lo,this.hi);return e&&(t=new jspb.arith.UInt64(0,0).sub(t)),(e?"-":"")+t.toString()},jspb.arith.Int64.fromString=function(e){var t=0<e.length&&"-"==e[0];return t&&(e=e.substring(1)),null===(e=jspb.arith.UInt64.fromString(e))?null:(t&&(e=new jspb.arith.UInt64(0,0).sub(e)),new jspb.arith.Int64(e.lo,e.hi))},jspb.BinaryEncoder=function(){this.buffer_=[]},jspb.BinaryEncoder.prototype.length=function(){return this.buffer_.length},jspb.BinaryEncoder.prototype.end=function(){var e=this.buffer_;return this.buffer_=[],e},jspb.BinaryEncoder.prototype.writeSplitVarint64=function(e,t){for(goog.asserts.assert(e==Math.floor(e)),goog.asserts.assert(t==Math.floor(t)),goog.asserts.assert(0<=e&&e<jspb.BinaryConstants.TWO_TO_32),goog.asserts.assert(0<=t&&t<jspb.BinaryConstants.TWO_TO_32);0<t||127<e;)this.buffer_.push(127&e|128),e=(e>>>7|t<<25)>>>0,t>>>=7;this.buffer_.push(e)},jspb.BinaryEncoder.prototype.writeSplitFixed64=function(e,t){goog.asserts.assert(e==Math.floor(e)),goog.asserts.assert(t==Math.floor(t)),goog.asserts.assert(0<=e&&e<jspb.BinaryConstants.TWO_TO_32),goog.asserts.assert(0<=t&&t<jspb.BinaryConstants.TWO_TO_32),this.writeUint32(e),this.writeUint32(t)},jspb.BinaryEncoder.prototype.writeUnsignedVarint32=function(e){for(goog.asserts.assert(e==Math.floor(e)),goog.asserts.assert(0<=e&&e<jspb.BinaryConstants.TWO_TO_32);127<e;)this.buffer_.push(127&e|128),e>>>=7;this.buffer_.push(e)},jspb.BinaryEncoder.prototype.writeSignedVarint32=function(e){if(goog.asserts.assert(e==Math.floor(e)),goog.asserts.assert(e>=-jspb.BinaryConstants.TWO_TO_31&&e<jspb.BinaryConstants.TWO_TO_31),0<=e)this.writeUnsignedVarint32(e);else{for(var t=0;9>t;t++)this.buffer_.push(127&e|128),e>>=7;this.buffer_.push(1)}},jspb.BinaryEncoder.prototype.writeUnsignedVarint64=function(e){goog.asserts.assert(e==Math.floor(e)),goog.asserts.assert(0<=e&&e<jspb.BinaryConstants.TWO_TO_64),jspb.utils.splitInt64(e),this.writeSplitVarint64(jspb.utils.split64Low,jspb.utils.split64High)},jspb.BinaryEncoder.prototype.writeSignedVarint64=function(e){goog.asserts.assert(e==Math.floor(e)),goog.asserts.assert(e>=-jspb.BinaryConstants.TWO_TO_63&&e<jspb.BinaryConstants.TWO_TO_63),jspb.utils.splitInt64(e),this.writeSplitVarint64(jspb.utils.split64Low,jspb.utils.split64High)},jspb.BinaryEncoder.prototype.writeZigzagVarint32=function(e){goog.asserts.assert(e==Math.floor(e)),goog.asserts.assert(e>=-jspb.BinaryConstants.TWO_TO_31&&e<jspb.BinaryConstants.TWO_TO_31),this.writeUnsignedVarint32((e<<1^e>>31)>>>0)},jspb.BinaryEncoder.prototype.writeZigzagVarint64=function(e){goog.asserts.assert(e==Math.floor(e)),goog.asserts.assert(e>=-jspb.BinaryConstants.TWO_TO_63&&e<jspb.BinaryConstants.TWO_TO_63),jspb.utils.splitZigzag64(e),this.writeSplitVarint64(jspb.utils.split64Low,jspb.utils.split64High)},jspb.BinaryEncoder.prototype.writeZigzagVarint64String=function(e){this.writeZigzagVarintHash64(jspb.utils.decimalStringToHash64(e))},jspb.BinaryEncoder.prototype.writeZigzagVarintHash64=function(e){var t=this;jspb.utils.splitHash64(e),jspb.utils.toZigzag64(jspb.utils.split64Low,jspb.utils.split64High,(function(e,o){t.writeSplitVarint64(e>>>0,o>>>0)}))},jspb.BinaryEncoder.prototype.writeUint8=function(e){goog.asserts.assert(e==Math.floor(e)),goog.asserts.assert(0<=e&&256>e),this.buffer_.push(e>>>0&255)},jspb.BinaryEncoder.prototype.writeUint16=function(e){goog.asserts.assert(e==Math.floor(e)),goog.asserts.assert(0<=e&&65536>e),this.buffer_.push(e>>>0&255),this.buffer_.push(e>>>8&255)},jspb.BinaryEncoder.prototype.writeUint32=function(e){goog.asserts.assert(e==Math.floor(e)),goog.asserts.assert(0<=e&&e<jspb.BinaryConstants.TWO_TO_32),this.buffer_.push(e>>>0&255),this.buffer_.push(e>>>8&255),this.buffer_.push(e>>>16&255),this.buffer_.push(e>>>24&255)},jspb.BinaryEncoder.prototype.writeUint64=function(e){goog.asserts.assert(e==Math.floor(e)),goog.asserts.assert(0<=e&&e<jspb.BinaryConstants.TWO_TO_64),jspb.utils.splitUint64(e),this.writeUint32(jspb.utils.split64Low),this.writeUint32(jspb.utils.split64High)},jspb.BinaryEncoder.prototype.writeInt8=function(e){goog.asserts.assert(e==Math.floor(e)),goog.asserts.assert(-128<=e&&128>e),this.buffer_.push(e>>>0&255)},jspb.BinaryEncoder.prototype.writeInt16=function(e){goog.asserts.assert(e==Math.floor(e)),goog.asserts.assert(-32768<=e&&32768>e),this.buffer_.push(e>>>0&255),this.buffer_.push(e>>>8&255)},jspb.BinaryEncoder.prototype.writeInt32=function(e){goog.asserts.assert(e==Math.floor(e)),goog.asserts.assert(e>=-jspb.BinaryConstants.TWO_TO_31&&e<jspb.BinaryConstants.TWO_TO_31),this.buffer_.push(e>>>0&255),this.buffer_.push(e>>>8&255),this.buffer_.push(e>>>16&255),this.buffer_.push(e>>>24&255)},jspb.BinaryEncoder.prototype.writeInt64=function(e){goog.asserts.assert(e==Math.floor(e)),goog.asserts.assert(e>=-jspb.BinaryConstants.TWO_TO_63&&e<jspb.BinaryConstants.TWO_TO_63),jspb.utils.splitInt64(e),this.writeSplitFixed64(jspb.utils.split64Low,jspb.utils.split64High)},jspb.BinaryEncoder.prototype.writeInt64String=function(e){goog.asserts.assert(e==Math.floor(e)),goog.asserts.assert(+e>=-jspb.BinaryConstants.TWO_TO_63&&+e<jspb.BinaryConstants.TWO_TO_63),jspb.utils.splitHash64(jspb.utils.decimalStringToHash64(e)),this.writeSplitFixed64(jspb.utils.split64Low,jspb.utils.split64High)},jspb.BinaryEncoder.prototype.writeFloat=function(e){goog.asserts.assert(1/0===e||-1/0===e||isNaN(e)||e>=-jspb.BinaryConstants.FLOAT32_MAX&&e<=jspb.BinaryConstants.FLOAT32_MAX),jspb.utils.splitFloat32(e),this.writeUint32(jspb.utils.split64Low)},jspb.BinaryEncoder.prototype.writeDouble=function(e){goog.asserts.assert(1/0===e||-1/0===e||isNaN(e)||e>=-jspb.BinaryConstants.FLOAT64_MAX&&e<=jspb.BinaryConstants.FLOAT64_MAX),jspb.utils.splitFloat64(e),this.writeUint32(jspb.utils.split64Low),this.writeUint32(jspb.utils.split64High)},jspb.BinaryEncoder.prototype.writeBool=function(e){goog.asserts.assert("boolean"==typeof e||"number"==typeof e),this.buffer_.push(e?1:0)},jspb.BinaryEncoder.prototype.writeEnum=function(e){goog.asserts.assert(e==Math.floor(e)),goog.asserts.assert(e>=-jspb.BinaryConstants.TWO_TO_31&&e<jspb.BinaryConstants.TWO_TO_31),this.writeSignedVarint32(e)},jspb.BinaryEncoder.prototype.writeBytes=function(e){this.buffer_.push.apply(this.buffer_,e)},jspb.BinaryEncoder.prototype.writeVarintHash64=function(e){jspb.utils.splitHash64(e),this.writeSplitVarint64(jspb.utils.split64Low,jspb.utils.split64High)},jspb.BinaryEncoder.prototype.writeFixedHash64=function(e){jspb.utils.splitHash64(e),this.writeUint32(jspb.utils.split64Low),this.writeUint32(jspb.utils.split64High)},jspb.BinaryEncoder.prototype.writeString=function(e){for(var t=this.buffer_.length,o=0;o<e.length;o++){var r=e.charCodeAt(o);if(128>r)this.buffer_.push(r);else if(2048>r)this.buffer_.push(r>>6|192),this.buffer_.push(63&r|128);else if(65536>r)if(55296<=r&&56319>=r&&o+1<e.length){var n=e.charCodeAt(o+1);56320<=n&&57343>=n&&(r=1024*(r-55296)+n-56320+65536,this.buffer_.push(r>>18|240),this.buffer_.push(r>>12&63|128),this.buffer_.push(r>>6&63|128),this.buffer_.push(63&r|128),o++)}else this.buffer_.push(r>>12|224),this.buffer_.push(r>>6&63|128),this.buffer_.push(63&r|128)}return this.buffer_.length-t},jspb.BinaryWriter=function(){this.blocks_=[],this.totalLength_=0,this.encoder_=new jspb.BinaryEncoder,this.bookmarks_=[]},jspb.BinaryWriter.prototype.appendUint8Array_=function(e){var t=this.encoder_.end();this.blocks_.push(t),this.blocks_.push(e),this.totalLength_+=t.length+e.length},jspb.BinaryWriter.prototype.beginDelimited_=function(e){return this.writeFieldHeader_(e,jspb.BinaryConstants.WireType.DELIMITED),e=this.encoder_.end(),this.blocks_.push(e),this.totalLength_+=e.length,e.push(this.totalLength_),e},jspb.BinaryWriter.prototype.endDelimited_=function(e){var t=e.pop();for(t=this.totalLength_+this.encoder_.length()-t,goog.asserts.assert(0<=t);127<t;)e.push(127&t|128),t>>>=7,this.totalLength_++;e.push(t),this.totalLength_++},jspb.BinaryWriter.prototype.writeSerializedMessage=function(e,t,o){this.appendUint8Array_(e.subarray(t,o))},jspb.BinaryWriter.prototype.maybeWriteSerializedMessage=function(e,t,o){null!=e&&null!=t&&null!=o&&this.writeSerializedMessage(e,t,o)},jspb.BinaryWriter.prototype.reset=function(){this.blocks_=[],this.encoder_.end(),this.totalLength_=0,this.bookmarks_=[]},jspb.BinaryWriter.prototype.getResultBuffer=function(){goog.asserts.assert(0==this.bookmarks_.length);for(var e=new Uint8Array(this.totalLength_+this.encoder_.length()),t=this.blocks_,o=t.length,r=0,n=0;n<o;n++){var i=t[n];e.set(i,r),r+=i.length}return t=this.encoder_.end(),e.set(t,r),r+=t.length,goog.asserts.assert(r==e.length),this.blocks_=[e],e},jspb.BinaryWriter.prototype.getResultBase64String=function(e){return goog.crypt.base64.encodeByteArray(this.getResultBuffer(),e)},jspb.BinaryWriter.prototype.beginSubMessage=function(e){this.bookmarks_.push(this.beginDelimited_(e))},jspb.BinaryWriter.prototype.endSubMessage=function(){goog.asserts.assert(0<=this.bookmarks_.length),this.endDelimited_(this.bookmarks_.pop())},jspb.BinaryWriter.prototype.writeFieldHeader_=function(e,t){goog.asserts.assert(1<=e&&e==Math.floor(e)),this.encoder_.writeUnsignedVarint32(8*e+t)},jspb.BinaryWriter.prototype.writeAny=function(e,t,o){var r=jspb.BinaryConstants.FieldType;switch(e){case r.DOUBLE:this.writeDouble(t,o);break;case r.FLOAT:this.writeFloat(t,o);break;case r.INT64:this.writeInt64(t,o);break;case r.UINT64:this.writeUint64(t,o);break;case r.INT32:this.writeInt32(t,o);break;case r.FIXED64:this.writeFixed64(t,o);break;case r.FIXED32:this.writeFixed32(t,o);break;case r.BOOL:this.writeBool(t,o);break;case r.STRING:this.writeString(t,o);break;case r.GROUP:goog.asserts.fail("Group field type not supported in writeAny()");break;case r.MESSAGE:goog.asserts.fail("Message field type not supported in writeAny()");break;case r.BYTES:this.writeBytes(t,o);break;case r.UINT32:this.writeUint32(t,o);break;case r.ENUM:this.writeEnum(t,o);break;case r.SFIXED32:this.writeSfixed32(t,o);break;case r.SFIXED64:this.writeSfixed64(t,o);break;case r.SINT32:this.writeSint32(t,o);break;case r.SINT64:this.writeSint64(t,o);break;case r.FHASH64:this.writeFixedHash64(t,o);break;case r.VHASH64:this.writeVarintHash64(t,o);break;default:goog.asserts.fail("Invalid field type in writeAny()")}},jspb.BinaryWriter.prototype.writeUnsignedVarint32_=function(e,t){null!=t&&(this.writeFieldHeader_(e,jspb.BinaryConstants.WireType.VARINT),this.encoder_.writeUnsignedVarint32(t))},jspb.BinaryWriter.prototype.writeSignedVarint32_=function(e,t){null!=t&&(this.writeFieldHeader_(e,jspb.BinaryConstants.WireType.VARINT),this.encoder_.writeSignedVarint32(t))},jspb.BinaryWriter.prototype.writeUnsignedVarint64_=function(e,t){null!=t&&(this.writeFieldHeader_(e,jspb.BinaryConstants.WireType.VARINT),this.encoder_.writeUnsignedVarint64(t))},jspb.BinaryWriter.prototype.writeSignedVarint64_=function(e,t){null!=t&&(this.writeFieldHeader_(e,jspb.BinaryConstants.WireType.VARINT),this.encoder_.writeSignedVarint64(t))},jspb.BinaryWriter.prototype.writeZigzagVarint32_=function(e,t){null!=t&&(this.writeFieldHeader_(e,jspb.BinaryConstants.WireType.VARINT),this.encoder_.writeZigzagVarint32(t))},jspb.BinaryWriter.prototype.writeZigzagVarint64_=function(e,t){null!=t&&(this.writeFieldHeader_(e,jspb.BinaryConstants.WireType.VARINT),this.encoder_.writeZigzagVarint64(t))},jspb.BinaryWriter.prototype.writeZigzagVarint64String_=function(e,t){null!=t&&(this.writeFieldHeader_(e,jspb.BinaryConstants.WireType.VARINT),this.encoder_.writeZigzagVarint64String(t))},jspb.BinaryWriter.prototype.writeZigzagVarintHash64_=function(e,t){null!=t&&(this.writeFieldHeader_(e,jspb.BinaryConstants.WireType.VARINT),this.encoder_.writeZigzagVarintHash64(t))},jspb.BinaryWriter.prototype.writeInt32=function(e,t){null!=t&&(goog.asserts.assert(t>=-jspb.BinaryConstants.TWO_TO_31&&t<jspb.BinaryConstants.TWO_TO_31),this.writeSignedVarint32_(e,t))},jspb.BinaryWriter.prototype.writeInt32String=function(e,t){null!=t&&(t=parseInt(t,10),goog.asserts.assert(t>=-jspb.BinaryConstants.TWO_TO_31&&t<jspb.BinaryConstants.TWO_TO_31),this.writeSignedVarint32_(e,t))},jspb.BinaryWriter.prototype.writeInt64=function(e,t){null!=t&&(goog.asserts.assert(t>=-jspb.BinaryConstants.TWO_TO_63&&t<jspb.BinaryConstants.TWO_TO_63),this.writeSignedVarint64_(e,t))},jspb.BinaryWriter.prototype.writeInt64String=function(e,t){null!=t&&(t=jspb.arith.Int64.fromString(t),this.writeFieldHeader_(e,jspb.BinaryConstants.WireType.VARINT),this.encoder_.writeSplitVarint64(t.lo,t.hi))},jspb.BinaryWriter.prototype.writeUint32=function(e,t){null!=t&&(goog.asserts.assert(0<=t&&t<jspb.BinaryConstants.TWO_TO_32),this.writeUnsignedVarint32_(e,t))},jspb.BinaryWriter.prototype.writeUint32String=function(e,t){null!=t&&(t=parseInt(t,10),goog.asserts.assert(0<=t&&t<jspb.BinaryConstants.TWO_TO_32),this.writeUnsignedVarint32_(e,t))},jspb.BinaryWriter.prototype.writeUint64=function(e,t){null!=t&&(goog.asserts.assert(0<=t&&t<jspb.BinaryConstants.TWO_TO_64),this.writeUnsignedVarint64_(e,t))},jspb.BinaryWriter.prototype.writeUint64String=function(e,t){null!=t&&(t=jspb.arith.UInt64.fromString(t),this.writeFieldHeader_(e,jspb.BinaryConstants.WireType.VARINT),this.encoder_.writeSplitVarint64(t.lo,t.hi))},jspb.BinaryWriter.prototype.writeSint32=function(e,t){null!=t&&(goog.asserts.assert(t>=-jspb.BinaryConstants.TWO_TO_31&&t<jspb.BinaryConstants.TWO_TO_31),this.writeZigzagVarint32_(e,t))},jspb.BinaryWriter.prototype.writeSint64=function(e,t){null!=t&&(goog.asserts.assert(t>=-jspb.BinaryConstants.TWO_TO_63&&t<jspb.BinaryConstants.TWO_TO_63),this.writeZigzagVarint64_(e,t))},jspb.BinaryWriter.prototype.writeSintHash64=function(e,t){null!=t&&this.writeZigzagVarintHash64_(e,t)},jspb.BinaryWriter.prototype.writeSint64String=function(e,t){null!=t&&this.writeZigzagVarint64String_(e,t)},jspb.BinaryWriter.prototype.writeFixed32=function(e,t){null!=t&&(goog.asserts.assert(0<=t&&t<jspb.BinaryConstants.TWO_TO_32),this.writeFieldHeader_(e,jspb.BinaryConstants.WireType.FIXED32),this.encoder_.writeUint32(t))},jspb.BinaryWriter.prototype.writeFixed64=function(e,t){null!=t&&(goog.asserts.assert(0<=t&&t<jspb.BinaryConstants.TWO_TO_64),this.writeFieldHeader_(e,jspb.BinaryConstants.WireType.FIXED64),this.encoder_.writeUint64(t))},jspb.BinaryWriter.prototype.writeFixed64String=function(e,t){null!=t&&(t=jspb.arith.UInt64.fromString(t),this.writeFieldHeader_(e,jspb.BinaryConstants.WireType.FIXED64),this.encoder_.writeSplitFixed64(t.lo,t.hi))},jspb.BinaryWriter.prototype.writeSfixed32=function(e,t){null!=t&&(goog.asserts.assert(t>=-jspb.BinaryConstants.TWO_TO_31&&t<jspb.BinaryConstants.TWO_TO_31),this.writeFieldHeader_(e,jspb.BinaryConstants.WireType.FIXED32),this.encoder_.writeInt32(t))},jspb.BinaryWriter.prototype.writeSfixed64=function(e,t){null!=t&&(goog.asserts.assert(t>=-jspb.BinaryConstants.TWO_TO_63&&t<jspb.BinaryConstants.TWO_TO_63),this.writeFieldHeader_(e,jspb.BinaryConstants.WireType.FIXED64),this.encoder_.writeInt64(t))},jspb.BinaryWriter.prototype.writeSfixed64String=function(e,t){null!=t&&(t=jspb.arith.Int64.fromString(t),this.writeFieldHeader_(e,jspb.BinaryConstants.WireType.FIXED64),this.encoder_.writeSplitFixed64(t.lo,t.hi))},jspb.BinaryWriter.prototype.writeFloat=function(e,t){null!=t&&(this.writeFieldHeader_(e,jspb.BinaryConstants.WireType.FIXED32),this.encoder_.writeFloat(t))},jspb.BinaryWriter.prototype.writeDouble=function(e,t){null!=t&&(this.writeFieldHeader_(e,jspb.BinaryConstants.WireType.FIXED64),this.encoder_.writeDouble(t))},jspb.BinaryWriter.prototype.writeBool=function(e,t){null!=t&&(goog.asserts.assert("boolean"==typeof t||"number"==typeof t),this.writeFieldHeader_(e,jspb.BinaryConstants.WireType.VARINT),this.encoder_.writeBool(t))},jspb.BinaryWriter.prototype.writeEnum=function(e,t){null!=t&&(goog.asserts.assert(t>=-jspb.BinaryConstants.TWO_TO_31&&t<jspb.BinaryConstants.TWO_TO_31),this.writeFieldHeader_(e,jspb.BinaryConstants.WireType.VARINT),this.encoder_.writeSignedVarint32(t))},jspb.BinaryWriter.prototype.writeString=function(e,t){null!=t&&(e=this.beginDelimited_(e),this.encoder_.writeString(t),this.endDelimited_(e))},jspb.BinaryWriter.prototype.writeBytes=function(e,t){null!=t&&(t=jspb.utils.byteSourceToUint8Array(t),this.writeFieldHeader_(e,jspb.BinaryConstants.WireType.DELIMITED),this.encoder_.writeUnsignedVarint32(t.length),this.appendUint8Array_(t))},jspb.BinaryWriter.prototype.writeMessage=function(e,t,o){null!=t&&(e=this.beginDelimited_(e),o(t,this),this.endDelimited_(e))},jspb.BinaryWriter.prototype.writeMessageSet=function(e,t,o){null!=t&&(this.writeFieldHeader_(1,jspb.BinaryConstants.WireType.START_GROUP),this.writeFieldHeader_(2,jspb.BinaryConstants.WireType.VARINT),this.encoder_.writeSignedVarint32(e),e=this.beginDelimited_(3),o(t,this),this.endDelimited_(e),this.writeFieldHeader_(1,jspb.BinaryConstants.WireType.END_GROUP))},jspb.BinaryWriter.prototype.writeGroup=function(e,t,o){null!=t&&(this.writeFieldHeader_(e,jspb.BinaryConstants.WireType.START_GROUP),o(t,this),this.writeFieldHeader_(e,jspb.BinaryConstants.WireType.END_GROUP))},jspb.BinaryWriter.prototype.writeFixedHash64=function(e,t){null!=t&&(goog.asserts.assert(8==t.length),this.writeFieldHeader_(e,jspb.BinaryConstants.WireType.FIXED64),this.encoder_.writeFixedHash64(t))},jspb.BinaryWriter.prototype.writeVarintHash64=function(e,t){null!=t&&(goog.asserts.assert(8==t.length),this.writeFieldHeader_(e,jspb.BinaryConstants.WireType.VARINT),this.encoder_.writeVarintHash64(t))},jspb.BinaryWriter.prototype.writeSplitFixed64=function(e,t,o){this.writeFieldHeader_(e,jspb.BinaryConstants.WireType.FIXED64),this.encoder_.writeSplitFixed64(t,o)},jspb.BinaryWriter.prototype.writeSplitVarint64=function(e,t,o){this.writeFieldHeader_(e,jspb.BinaryConstants.WireType.VARINT),this.encoder_.writeSplitVarint64(t,o)},jspb.BinaryWriter.prototype.writeSplitZigzagVarint64=function(e,t,o){this.writeFieldHeader_(e,jspb.BinaryConstants.WireType.VARINT);var r=this.encoder_;jspb.utils.toZigzag64(t,o,(function(e,t){r.writeSplitVarint64(e>>>0,t>>>0)}))},jspb.BinaryWriter.prototype.writeRepeatedInt32=function(e,t){if(null!=t)for(var o=0;o<t.length;o++)this.writeSignedVarint32_(e,t[o])},jspb.BinaryWriter.prototype.writeRepeatedInt32String=function(e,t){if(null!=t)for(var o=0;o<t.length;o++)this.writeInt32String(e,t[o])},jspb.BinaryWriter.prototype.writeRepeatedInt64=function(e,t){if(null!=t)for(var o=0;o<t.length;o++)this.writeSignedVarint64_(e,t[o])},jspb.BinaryWriter.prototype.writeRepeatedSplitFixed64=function(e,t,o,r){if(null!=t)for(var n=0;n<t.length;n++)this.writeSplitFixed64(e,o(t[n]),r(t[n]))},jspb.BinaryWriter.prototype.writeRepeatedSplitVarint64=function(e,t,o,r){if(null!=t)for(var n=0;n<t.length;n++)this.writeSplitVarint64(e,o(t[n]),r(t[n]))},jspb.BinaryWriter.prototype.writeRepeatedSplitZigzagVarint64=function(e,t,o,r){if(null!=t)for(var n=0;n<t.length;n++)this.writeSplitZigzagVarint64(e,o(t[n]),r(t[n]))},jspb.BinaryWriter.prototype.writeRepeatedInt64String=function(e,t){if(null!=t)for(var o=0;o<t.length;o++)this.writeInt64String(e,t[o])},jspb.BinaryWriter.prototype.writeRepeatedUint32=function(e,t){if(null!=t)for(var o=0;o<t.length;o++)this.writeUnsignedVarint32_(e,t[o])},jspb.BinaryWriter.prototype.writeRepeatedUint32String=function(e,t){if(null!=t)for(var o=0;o<t.length;o++)this.writeUint32String(e,t[o])},jspb.BinaryWriter.prototype.writeRepeatedUint64=function(e,t){if(null!=t)for(var o=0;o<t.length;o++)this.writeUnsignedVarint64_(e,t[o])},jspb.BinaryWriter.prototype.writeRepeatedUint64String=function(e,t){if(null!=t)for(var o=0;o<t.length;o++)this.writeUint64String(e,t[o])},jspb.BinaryWriter.prototype.writeRepeatedSint32=function(e,t){if(null!=t)for(var o=0;o<t.length;o++)this.writeZigzagVarint32_(e,t[o])},jspb.BinaryWriter.prototype.writeRepeatedSint64=function(e,t){if(null!=t)for(var o=0;o<t.length;o++)this.writeZigzagVarint64_(e,t[o])},jspb.BinaryWriter.prototype.writeRepeatedSint64String=function(e,t){if(null!=t)for(var o=0;o<t.length;o++)this.writeZigzagVarint64String_(e,t[o])},jspb.BinaryWriter.prototype.writeRepeatedSintHash64=function(e,t){if(null!=t)for(var o=0;o<t.length;o++)this.writeZigzagVarintHash64_(e,t[o])},jspb.BinaryWriter.prototype.writeRepeatedFixed32=function(e,t){if(null!=t)for(var o=0;o<t.length;o++)this.writeFixed32(e,t[o])},jspb.BinaryWriter.prototype.writeRepeatedFixed64=function(e,t){if(null!=t)for(var o=0;o<t.length;o++)this.writeFixed64(e,t[o])},jspb.BinaryWriter.prototype.writeRepeatedFixed64String=function(e,t){if(null!=t)for(var o=0;o<t.length;o++)this.writeFixed64String(e,t[o])},jspb.BinaryWriter.prototype.writeRepeatedSfixed32=function(e,t){if(null!=t)for(var o=0;o<t.length;o++)this.writeSfixed32(e,t[o])},jspb.BinaryWriter.prototype.writeRepeatedSfixed64=function(e,t){if(null!=t)for(var o=0;o<t.length;o++)this.writeSfixed64(e,t[o])},jspb.BinaryWriter.prototype.writeRepeatedSfixed64String=function(e,t){if(null!=t)for(var o=0;o<t.length;o++)this.writeSfixed64String(e,t[o])},jspb.BinaryWriter.prototype.writeRepeatedFloat=function(e,t){if(null!=t)for(var o=0;o<t.length;o++)this.writeFloat(e,t[o])},jspb.BinaryWriter.prototype.writeRepeatedDouble=function(e,t){if(null!=t)for(var o=0;o<t.length;o++)this.writeDouble(e,t[o])},jspb.BinaryWriter.prototype.writeRepeatedBool=function(e,t){if(null!=t)for(var o=0;o<t.length;o++)this.writeBool(e,t[o])},jspb.BinaryWriter.prototype.writeRepeatedEnum=function(e,t){if(null!=t)for(var o=0;o<t.length;o++)this.writeEnum(e,t[o])},jspb.BinaryWriter.prototype.writeRepeatedString=function(e,t){if(null!=t)for(var o=0;o<t.length;o++)this.writeString(e,t[o])},jspb.BinaryWriter.prototype.writeRepeatedBytes=function(e,t){if(null!=t)for(var o=0;o<t.length;o++)this.writeBytes(e,t[o])},jspb.BinaryWriter.prototype.writeRepeatedMessage=function(e,t,o){if(null!=t)for(var r=0;r<t.length;r++){var n=this.beginDelimited_(e);o(t[r],this),this.endDelimited_(n)}},jspb.BinaryWriter.prototype.writeRepeatedGroup=function(e,t,o){if(null!=t)for(var r=0;r<t.length;r++)this.writeFieldHeader_(e,jspb.BinaryConstants.WireType.START_GROUP),o(t[r],this),this.writeFieldHeader_(e,jspb.BinaryConstants.WireType.END_GROUP)},jspb.BinaryWriter.prototype.writeRepeatedFixedHash64=function(e,t){if(null!=t)for(var o=0;o<t.length;o++)this.writeFixedHash64(e,t[o])},jspb.BinaryWriter.prototype.writeRepeatedVarintHash64=function(e,t){if(null!=t)for(var o=0;o<t.length;o++)this.writeVarintHash64(e,t[o])},jspb.BinaryWriter.prototype.writePackedInt32=function(e,t){if(null!=t&&t.length){e=this.beginDelimited_(e);for(var o=0;o<t.length;o++)this.encoder_.writeSignedVarint32(t[o]);this.endDelimited_(e)}},jspb.BinaryWriter.prototype.writePackedInt32String=function(e,t){if(null!=t&&t.length){e=this.beginDelimited_(e);for(var o=0;o<t.length;o++)this.encoder_.writeSignedVarint32(parseInt(t[o],10));this.endDelimited_(e)}},jspb.BinaryWriter.prototype.writePackedInt64=function(e,t){if(null!=t&&t.length){e=this.beginDelimited_(e);for(var o=0;o<t.length;o++)this.encoder_.writeSignedVarint64(t[o]);this.endDelimited_(e)}},jspb.BinaryWriter.prototype.writePackedSplitFixed64=function(e,t,o,r){if(null!=t){e=this.beginDelimited_(e);for(var n=0;n<t.length;n++)this.encoder_.writeSplitFixed64(o(t[n]),r(t[n]));this.endDelimited_(e)}},jspb.BinaryWriter.prototype.writePackedSplitVarint64=function(e,t,o,r){if(null!=t){e=this.beginDelimited_(e);for(var n=0;n<t.length;n++)this.encoder_.writeSplitVarint64(o(t[n]),r(t[n]));this.endDelimited_(e)}},jspb.BinaryWriter.prototype.writePackedSplitZigzagVarint64=function(e,t,o,r){if(null!=t){e=this.beginDelimited_(e);for(var n=this.encoder_,i=0;i<t.length;i++)jspb.utils.toZigzag64(o(t[i]),r(t[i]),(function(e,t){n.writeSplitVarint64(e>>>0,t>>>0)}));this.endDelimited_(e)}},jspb.BinaryWriter.prototype.writePackedInt64String=function(e,t){if(null!=t&&t.length){e=this.beginDelimited_(e);for(var o=0;o<t.length;o++){var r=jspb.arith.Int64.fromString(t[o]);this.encoder_.writeSplitVarint64(r.lo,r.hi)}this.endDelimited_(e)}},jspb.BinaryWriter.prototype.writePackedUint32=function(e,t){if(null!=t&&t.length){e=this.beginDelimited_(e);for(var o=0;o<t.length;o++)this.encoder_.writeUnsignedVarint32(t[o]);this.endDelimited_(e)}},jspb.BinaryWriter.prototype.writePackedUint32String=function(e,t){if(null!=t&&t.length){e=this.beginDelimited_(e);for(var o=0;o<t.length;o++)this.encoder_.writeUnsignedVarint32(parseInt(t[o],10));this.endDelimited_(e)}},jspb.BinaryWriter.prototype.writePackedUint64=function(e,t){if(null!=t&&t.length){e=this.beginDelimited_(e);for(var o=0;o<t.length;o++)this.encoder_.writeUnsignedVarint64(t[o]);this.endDelimited_(e)}},jspb.BinaryWriter.prototype.writePackedUint64String=function(e,t){if(null!=t&&t.length){e=this.beginDelimited_(e);for(var o=0;o<t.length;o++){var r=jspb.arith.UInt64.fromString(t[o]);this.encoder_.writeSplitVarint64(r.lo,r.hi)}this.endDelimited_(e)}},jspb.BinaryWriter.prototype.writePackedSint32=function(e,t){if(null!=t&&t.length){e=this.beginDelimited_(e);for(var o=0;o<t.length;o++)this.encoder_.writeZigzagVarint32(t[o]);this.endDelimited_(e)}},jspb.BinaryWriter.prototype.writePackedSint64=function(e,t){if(null!=t&&t.length){e=this.beginDelimited_(e);for(var o=0;o<t.length;o++)this.encoder_.writeZigzagVarint64(t[o]);this.endDelimited_(e)}},jspb.BinaryWriter.prototype.writePackedSint64String=function(e,t){if(null!=t&&t.length){e=this.beginDelimited_(e);for(var o=0;o<t.length;o++)this.encoder_.writeZigzagVarintHash64(jspb.utils.decimalStringToHash64(t[o]));this.endDelimited_(e)}},jspb.BinaryWriter.prototype.writePackedSintHash64=function(e,t){if(null!=t&&t.length){e=this.beginDelimited_(e);for(var o=0;o<t.length;o++)this.encoder_.writeZigzagVarintHash64(t[o]);this.endDelimited_(e)}},jspb.BinaryWriter.prototype.writePackedFixed32=function(e,t){if(null!=t&&t.length)for(this.writeFieldHeader_(e,jspb.BinaryConstants.WireType.DELIMITED),this.encoder_.writeUnsignedVarint32(4*t.length),e=0;e<t.length;e++)this.encoder_.writeUint32(t[e])},jspb.BinaryWriter.prototype.writePackedFixed64=function(e,t){if(null!=t&&t.length)for(this.writeFieldHeader_(e,jspb.BinaryConstants.WireType.DELIMITED),this.encoder_.writeUnsignedVarint32(8*t.length),e=0;e<t.length;e++)this.encoder_.writeUint64(t[e])},jspb.BinaryWriter.prototype.writePackedFixed64String=function(e,t){if(null!=t&&t.length)for(this.writeFieldHeader_(e,jspb.BinaryConstants.WireType.DELIMITED),this.encoder_.writeUnsignedVarint32(8*t.length),e=0;e<t.length;e++){var o=jspb.arith.UInt64.fromString(t[e]);this.encoder_.writeSplitFixed64(o.lo,o.hi)}},jspb.BinaryWriter.prototype.writePackedSfixed32=function(e,t){if(null!=t&&t.length)for(this.writeFieldHeader_(e,jspb.BinaryConstants.WireType.DELIMITED),this.encoder_.writeUnsignedVarint32(4*t.length),e=0;e<t.length;e++)this.encoder_.writeInt32(t[e])},jspb.BinaryWriter.prototype.writePackedSfixed64=function(e,t){if(null!=t&&t.length)for(this.writeFieldHeader_(e,jspb.BinaryConstants.WireType.DELIMITED),this.encoder_.writeUnsignedVarint32(8*t.length),e=0;e<t.length;e++)this.encoder_.writeInt64(t[e])},jspb.BinaryWriter.prototype.writePackedSfixed64String=function(e,t){if(null!=t&&t.length)for(this.writeFieldHeader_(e,jspb.BinaryConstants.WireType.DELIMITED),this.encoder_.writeUnsignedVarint32(8*t.length),e=0;e<t.length;e++)this.encoder_.writeInt64String(t[e])},jspb.BinaryWriter.prototype.writePackedFloat=function(e,t){if(null!=t&&t.length)for(this.writeFieldHeader_(e,jspb.BinaryConstants.WireType.DELIMITED),this.encoder_.writeUnsignedVarint32(4*t.length),e=0;e<t.length;e++)this.encoder_.writeFloat(t[e])},jspb.BinaryWriter.prototype.writePackedDouble=function(e,t){if(null!=t&&t.length)for(this.writeFieldHeader_(e,jspb.BinaryConstants.WireType.DELIMITED),this.encoder_.writeUnsignedVarint32(8*t.length),e=0;e<t.length;e++)this.encoder_.writeDouble(t[e])},jspb.BinaryWriter.prototype.writePackedBool=function(e,t){if(null!=t&&t.length)for(this.writeFieldHeader_(e,jspb.BinaryConstants.WireType.DELIMITED),this.encoder_.writeUnsignedVarint32(t.length),e=0;e<t.length;e++)this.encoder_.writeBool(t[e])},jspb.BinaryWriter.prototype.writePackedEnum=function(e,t){if(null!=t&&t.length){e=this.beginDelimited_(e);for(var o=0;o<t.length;o++)this.encoder_.writeEnum(t[o]);this.endDelimited_(e)}},jspb.BinaryWriter.prototype.writePackedFixedHash64=function(e,t){if(null!=t&&t.length)for(this.writeFieldHeader_(e,jspb.BinaryConstants.WireType.DELIMITED),this.encoder_.writeUnsignedVarint32(8*t.length),e=0;e<t.length;e++)this.encoder_.writeFixedHash64(t[e])},jspb.BinaryWriter.prototype.writePackedVarintHash64=function(e,t){if(null!=t&&t.length){e=this.beginDelimited_(e);for(var o=0;o<t.length;o++)this.encoder_.writeVarintHash64(t[o]);this.endDelimited_(e)}},jspb.Export={},exports.Map=jspb.Map,exports.Message=jspb.Message,exports.BinaryReader=jspb.BinaryReader,exports.BinaryWriter=jspb.BinaryWriter,exports.ExtensionFieldInfo=jspb.ExtensionFieldInfo,exports.ExtensionFieldBinaryInfo=jspb.ExtensionFieldBinaryInfo,exports.exportSymbol=goog.exportSymbol,exports.inherits=goog.inherits,exports.object={extend:goog.object.extend},exports.typeOf=goog.typeOf}).call(this,__webpack_require__(3),__webpack_require__(9).Buffer)},function(e,t,o){e.exports=function(e){var t={};function o(r){if(t[r])return t[r].exports;var n=t[r]={i:r,l:!1,exports:{}};return e[r].call(n.exports,n,n.exports,o),n.l=!0,n.exports}return o.m=e,o.c=t,o.d=function(e,t,r){o.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:r})},o.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},o.t=function(e,t){if(1&t&&(e=o(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var r=Object.create(null);if(o.r(r),Object.defineProperty(r,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var n in e)o.d(r,n,function(t){return e[t]}.bind(null,n));return r},o.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return o.d(t,"a",t),t},o.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},o.p="",o(o.s=10)}([function(e,t,o){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=o(3);t.Metadata=r.BrowserHeaders},function(e,t,o){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.debug=function(){for(var e=[],t=0;t<arguments.length;t++)e[t]=arguments[t];console.debug?console.debug.apply(null,e):console.log.apply(null,e)}},function(e,t,o){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=o(0),n=o(8),i=o(9),s=o(1),a=o(4),g=o(14);t.client=function(e,t){return new p(e,t)};var p=function(){function e(e,t){this.started=!1,this.sentFirstMessage=!1,this.completed=!1,this.closed=!1,this.finishedSending=!1,this.onHeadersCallbacks=[],this.onMessageCallbacks=[],this.onEndCallbacks=[],this.parser=new n.ChunkParser,this.methodDefinition=e,this.props=t,this.createTransport()}return e.prototype.createTransport=function(){var e=this.props.host+"/"+this.methodDefinition.service.serviceName+"/"+this.methodDefinition.methodName,t={methodDefinition:this.methodDefinition,debug:this.props.debug||!1,url:e,onHeaders:this.onTransportHeaders.bind(this),onChunk:this.onTransportChunk.bind(this),onEnd:this.onTransportEnd.bind(this)};this.props.transport?this.transport=this.props.transport(t):this.transport=a.makeDefaultTransport(t)},e.prototype.onTransportHeaders=function(e,t){if(this.props.debug&&s.debug("onHeaders",e,t),this.closed)this.props.debug&&s.debug("grpc.onHeaders received after request was closed - ignoring");else if(0===t);else{this.responseHeaders=e,this.props.debug&&s.debug("onHeaders.responseHeaders",JSON.stringify(this.responseHeaders,null,2));var o=l(e);this.props.debug&&s.debug("onHeaders.gRPCStatus",o);var r=o&&o>=0?o:i.httpStatusToCode(t);this.props.debug&&s.debug("onHeaders.code",r);var n=e.get("grpc-message")||[];if(this.props.debug&&s.debug("onHeaders.gRPCMessage",n),this.rawOnHeaders(e),r!==i.Code.OK){var a=this.decodeGRPCStatus(n[0]);this.rawOnError(r,a,e)}}},e.prototype.onTransportChunk=function(e){var t=this;if(this.closed)this.props.debug&&s.debug("grpc.onChunk received after request was closed - ignoring");else{var o=[];try{o=this.parser.parse(e)}catch(e){return this.props.debug&&s.debug("onChunk.parsing error",e,e.message),void this.rawOnError(i.Code.Internal,"parsing error: "+e.message)}o.forEach((function(e){if(e.chunkType===n.ChunkType.MESSAGE){var o=t.methodDefinition.responseType.deserializeBinary(e.data);t.rawOnMessage(o)}else e.chunkType===n.ChunkType.TRAILERS&&(t.responseHeaders?(t.responseTrailers=new r.Metadata(e.trailers),t.props.debug&&s.debug("onChunk.trailers",t.responseTrailers)):(t.responseHeaders=new r.Metadata(e.trailers),t.rawOnHeaders(t.responseHeaders)))}))}},e.prototype.onTransportEnd=function(){if(this.props.debug&&s.debug("grpc.onEnd"),this.closed)this.props.debug&&s.debug("grpc.onEnd received after request was closed - ignoring");else if(void 0!==this.responseTrailers){var e=l(this.responseTrailers);if(null!==e){var t=this.responseTrailers.get("grpc-message"),o=this.decodeGRPCStatus(t[0]);this.rawOnEnd(e,o,this.responseTrailers)}else this.rawOnError(i.Code.Internal,"Response closed without grpc-status (Trailers provided)")}else{if(void 0===this.responseHeaders)return void this.rawOnError(i.Code.Unknown,"Response closed without headers");var r=l(this.responseHeaders),n=this.responseHeaders.get("grpc-message");if(this.props.debug&&s.debug("grpc.headers only response ",r,n),null===r)return void this.rawOnEnd(i.Code.Unknown,"Response closed without grpc-status (Headers only)",this.responseHeaders);var a=this.decodeGRPCStatus(n[0]);this.rawOnEnd(r,a,this.responseHeaders)}},e.prototype.decodeGRPCStatus=function(e){if(!e)return"";try{return decodeURIComponent(e)}catch(t){return e}},e.prototype.rawOnEnd=function(e,t,o){var r=this;this.props.debug&&s.debug("rawOnEnd",e,t,o),this.completed||(this.completed=!0,this.onEndCallbacks.forEach((function(n){if(!r.closed)try{n(e,t,o)}catch(e){setTimeout((function(){throw e}))}})))},e.prototype.rawOnHeaders=function(e){this.props.debug&&s.debug("rawOnHeaders",e),this.completed||this.onHeadersCallbacks.forEach((function(t){try{t(e)}catch(e){setTimeout((function(){throw e}))}}))},e.prototype.rawOnError=function(e,t,o){var n=this;void 0===o&&(o=new r.Metadata),this.props.debug&&s.debug("rawOnError",e,t),this.completed||(this.completed=!0,this.onEndCallbacks.forEach((function(r){if(!n.closed)try{r(e,t,o)}catch(e){setTimeout((function(){throw e}))}})))},e.prototype.rawOnMessage=function(e){var t=this;this.props.debug&&s.debug("rawOnMessage",e.toObject()),this.completed||this.closed||this.onMessageCallbacks.forEach((function(o){if(!t.closed)try{o(e)}catch(e){setTimeout((function(){throw e}))}}))},e.prototype.onHeaders=function(e){this.onHeadersCallbacks.push(e)},e.prototype.onMessage=function(e){this.onMessageCallbacks.push(e)},e.prototype.onEnd=function(e){this.onEndCallbacks.push(e)},e.prototype.start=function(e){if(this.started)throw new Error("Client already started - cannot .start()");this.started=!0;var t=new r.Metadata(e||{});t.set("content-type","application/grpc-web+proto"),t.set("x-grpc-web","1"),this.transport.start(t)},e.prototype.send=function(e){if(!this.started)throw new Error("Client not started - .start() must be called before .send()");if(this.closed)throw new Error("Client already closed - cannot .send()");if(this.finishedSending)throw new Error("Client already finished sending - cannot .send()");if(!this.methodDefinition.requestStream&&this.sentFirstMessage)throw new Error("Message already sent for non-client-streaming method - cannot .send()");this.sentFirstMessage=!0;var t=g.frameRequest(e);this.transport.sendMessage(t)},e.prototype.finishSend=function(){if(!this.started)throw new Error("Client not started - .finishSend() must be called before .close()");if(this.closed)throw new Error("Client already closed - cannot .send()");if(this.finishedSending)throw new Error("Client already finished sending - cannot .finishSend()");this.finishedSending=!0,this.transport.finishSend()},e.prototype.close=function(){if(!this.started)throw new Error("Client not started - .start() must be called before .close()");if(this.closed)throw new Error("Client already closed - cannot .close()");this.closed=!0,this.props.debug&&s.debug("request.abort aborting request"),this.transport.cancel()},e}();function l(e){var t=e.get("grpc-status")||[];if(t.length>0)try{var o=t[0];return parseInt(o,10)}catch(e){return null}return null}},function(e,t,o){var r;r=function(){return function(e){var t={};function o(r){if(t[r])return t[r].exports;var n=t[r]={i:r,l:!1,exports:{}};return e[r].call(n.exports,n,n.exports,o),n.l=!0,n.exports}return o.m=e,o.c=t,o.i=function(e){return e},o.d=function(e,t,r){o.o(e,t)||Object.defineProperty(e,t,{configurable:!1,enumerable:!0,get:r})},o.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return o.d(t,"a",t),t},o.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},o.p="",o(o.s=1)}([function(e,t,o){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=o(3),n=function(){function e(e,t){void 0===e&&(e={}),void 0===t&&(t={splitValues:!1});var o,n=this;this.headersMap={},e&&("undefined"!=typeof Headers&&e instanceof Headers?r.getHeaderKeys(e).forEach((function(o){r.getHeaderValues(e,o).forEach((function(e){t.splitValues?n.append(o,r.splitHeaderValue(e)):n.append(o,e)}))})):"object"==typeof(o=e)&&"object"==typeof o.headersMap&&"function"==typeof o.forEach?e.forEach((function(e,t){n.append(e,t)})):"undefined"!=typeof Map&&e instanceof Map?e.forEach((function(e,t){n.append(t,e)})):"string"==typeof e?this.appendFromString(e):"object"==typeof e&&Object.getOwnPropertyNames(e).forEach((function(t){var o=e[t];Array.isArray(o)?o.forEach((function(e){n.append(t,e)})):n.append(t,o)})))}return e.prototype.appendFromString=function(e){for(var t=e.split("\r\n"),o=0;o<t.length;o++){var r=t[o],n=r.indexOf(":");if(n>0){var i=r.substring(0,n).trim(),s=r.substring(n+1).trim();this.append(i,s)}}},e.prototype.delete=function(e,t){var o=r.normalizeName(e);if(void 0===t)delete this.headersMap[o];else{var n=this.headersMap[o];if(n){var i=n.indexOf(t);i>=0&&n.splice(i,1),0===n.length&&delete this.headersMap[o]}}},e.prototype.append=function(e,t){var o=this,n=r.normalizeName(e);Array.isArray(this.headersMap[n])||(this.headersMap[n]=[]),Array.isArray(t)?t.forEach((function(e){o.headersMap[n].push(r.normalizeValue(e))})):this.headersMap[n].push(r.normalizeValue(t))},e.prototype.set=function(e,t){var o=r.normalizeName(e);if(Array.isArray(t)){var n=[];t.forEach((function(e){n.push(r.normalizeValue(e))})),this.headersMap[o]=n}else this.headersMap[o]=[r.normalizeValue(t)]},e.prototype.has=function(e,t){var o=this.headersMap[r.normalizeName(e)];if(!Array.isArray(o))return!1;if(void 0!==t){var n=r.normalizeValue(t);return o.indexOf(n)>=0}return!0},e.prototype.get=function(e){var t=this.headersMap[r.normalizeName(e)];return void 0!==t?t.concat():[]},e.prototype.forEach=function(e){var t=this;Object.getOwnPropertyNames(this.headersMap).forEach((function(o){e(o,t.headersMap[o])}),this)},e.prototype.toHeaders=function(){if("undefined"!=typeof Headers){var e=new Headers;return this.forEach((function(t,o){o.forEach((function(o){e.append(t,o)}))})),e}throw new Error("Headers class is not defined")},e}();t.BrowserHeaders=n},function(e,t,o){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=o(0);t.BrowserHeaders=r.BrowserHeaders},function(e,t,o){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.iterateHeaders=function(e,t){for(var o=e[Symbol.iterator](),r=o.next();!r.done;)t(r.value[0]),r=o.next()},t.iterateHeadersKeys=function(e,t){for(var o=e.keys(),r=o.next();!r.done;)t(r.value),r=o.next()}},function(e,t,o){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=o(2);t.normalizeName=function(e){if("string"!=typeof e&&(e=String(e)),/[^a-z0-9\-#$%&'*+.\^_`|~]/i.test(e))throw new TypeError("Invalid character in header field name");return e.toLowerCase()},t.normalizeValue=function(e){return"string"!=typeof e&&(e=String(e)),e},t.getHeaderValues=function(e,t){var o=e;if(o instanceof Headers&&o.getAll)return o.getAll(t);var r=o.get(t);return r&&"string"==typeof r?[r]:r},t.getHeaderKeys=function(e){var t=e,o={},n=[];return t.keys?r.iterateHeadersKeys(t,(function(e){o[e]||(o[e]=!0,n.push(e))})):t.forEach?t.forEach((function(e,t){o[t]||(o[t]=!0,n.push(t))})):r.iterateHeaders(t,(function(e){var t=e[0];o[t]||(o[t]=!0,n.push(t))})),n},t.splitHeaderValue=function(e){var t=[];return e.split(", ").forEach((function(e){e.split(",").forEach((function(e){t.push(e)}))})),t}}])},e.exports=r()},function(e,t,o){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=o(5),n=function(e){return r.CrossBrowserHttpTransport({withCredentials:!1})(e)};t.setDefaultTransportFactory=function(e){n=e},t.makeDefaultTransport=function(e){return n(e)}},function(e,t,o){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=o(6),n=o(7);t.CrossBrowserHttpTransport=function(e){if(r.detectFetchSupport()){var t={credentials:e.withCredentials?"include":"same-origin"};return r.FetchReadableStreamTransport(t)}return n.XhrTransport({withCredentials:e.withCredentials})}},function(e,t,o){"use strict";var r=this&&this.__assign||function(){return(r=Object.assign||function(e){for(var t,o=1,r=arguments.length;o<r;o++)for(var n in t=arguments[o])Object.prototype.hasOwnProperty.call(t,n)&&(e[n]=t[n]);return e}).apply(this,arguments)};Object.defineProperty(t,"__esModule",{value:!0});var n=o(0),i=o(1);t.FetchReadableStreamTransport=function(e){return function(t){return function(e,t){return e.debug&&i.debug("fetchRequest",e),new s(e,t)}(t,e)}};var s=function(){function e(e,t){this.cancelled=!1,this.controller=self.AbortController&&new AbortController,this.options=e,this.init=t}return e.prototype.pump=function(e,t){var o=this;if(this.reader=e,this.cancelled)return this.options.debug&&i.debug("Fetch.pump.cancel at first pump"),void this.reader.cancel();this.reader.read().then((function(e){if(e.done)return o.options.onEnd(),t;o.options.onChunk(e.value),o.pump(o.reader,t)})).catch((function(e){o.cancelled?o.options.debug&&i.debug("Fetch.catch - request cancelled"):(o.cancelled=!0,o.options.debug&&i.debug("Fetch.catch",e.message),o.options.onEnd(e))}))},e.prototype.send=function(e){var t=this;fetch(this.options.url,r({},this.init,{headers:this.metadata.toHeaders(),method:"POST",body:e,signal:this.controller&&this.controller.signal})).then((function(e){if(t.options.debug&&i.debug("Fetch.response",e),t.options.onHeaders(new n.Metadata(e.headers),e.status),!e.body)return e;t.pump(e.body.getReader(),e)})).catch((function(e){t.cancelled?t.options.debug&&i.debug("Fetch.catch - request cancelled"):(t.cancelled=!0,t.options.debug&&i.debug("Fetch.catch",e.message),t.options.onEnd(e))}))},e.prototype.sendMessage=function(e){this.send(e)},e.prototype.finishSend=function(){},e.prototype.start=function(e){this.metadata=e},e.prototype.cancel=function(){this.cancelled?this.options.debug&&i.debug("Fetch.abort.cancel already cancelled"):(this.cancelled=!0,this.reader?(this.options.debug&&i.debug("Fetch.abort.cancel"),this.reader.cancel()):this.options.debug&&i.debug("Fetch.abort.cancel before reader"),this.controller&&this.controller.abort())},e}();t.detectFetchSupport=function(){return"undefined"!=typeof Response&&Response.prototype.hasOwnProperty("body")&&"function"==typeof Headers}},function(e,t,o){"use strict";var r,n=this&&this.__extends||(r=function(e,t){return(r=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var o in t)t.hasOwnProperty(o)&&(e[o]=t[o])})(e,t)},function(e,t){function o(){this.constructor=e}r(e,t),e.prototype=null===t?Object.create(t):(o.prototype=t.prototype,new o)});Object.defineProperty(t,"__esModule",{value:!0});var i=o(0),s=o(1),a=o(11);t.XhrTransport=function(e){return function(t){if(a.detectMozXHRSupport())return new p(t,e);if(a.detectXHROverrideMimeTypeSupport())return new g(t,e);throw new Error("This environment's XHR implementation cannot support binary transfer.")}};var g=function(){function e(e,t){this.options=e,this.init=t}return e.prototype.onProgressEvent=function(){this.options.debug&&s.debug("XHR.onProgressEvent.length: ",this.xhr.response.length);var e=this.xhr.response.substr(this.index);this.index=this.xhr.response.length;var t=u(e);this.options.onChunk(t)},e.prototype.onLoadEvent=function(){this.options.debug&&s.debug("XHR.onLoadEvent"),this.options.onEnd()},e.prototype.onStateChange=function(){this.options.debug&&s.debug("XHR.onStateChange",this.xhr.readyState),this.xhr.readyState===XMLHttpRequest.HEADERS_RECEIVED&&this.options.onHeaders(new i.Metadata(this.xhr.getAllResponseHeaders()),this.xhr.status)},e.prototype.sendMessage=function(e){this.xhr.send(e)},e.prototype.finishSend=function(){},e.prototype.start=function(e){var t=this;this.metadata=e;var o=new XMLHttpRequest;this.xhr=o,o.open("POST",this.options.url),this.configureXhr(),this.metadata.forEach((function(e,t){o.setRequestHeader(e,t.join(", "))})),o.withCredentials=Boolean(this.init.withCredentials),o.addEventListener("readystatechange",this.onStateChange.bind(this)),o.addEventListener("progress",this.onProgressEvent.bind(this)),o.addEventListener("loadend",this.onLoadEvent.bind(this)),o.addEventListener("error",(function(e){t.options.debug&&s.debug("XHR.error",e),t.options.onEnd(e.error)}))},e.prototype.configureXhr=function(){this.xhr.responseType="text",this.xhr.overrideMimeType("text/plain; charset=x-user-defined")},e.prototype.cancel=function(){this.options.debug&&s.debug("XHR.abort"),this.xhr.abort()},e}();t.XHR=g;var p=function(e){function t(){return null!==e&&e.apply(this,arguments)||this}return n(t,e),t.prototype.configureXhr=function(){this.options.debug&&s.debug("MozXHR.configureXhr: setting responseType to 'moz-chunked-arraybuffer'"),this.xhr.responseType="moz-chunked-arraybuffer"},t.prototype.onProgressEvent=function(){var e=this.xhr.response;this.options.debug&&s.debug("MozXHR.onProgressEvent: ",new Uint8Array(e)),this.options.onChunk(new Uint8Array(e))},t}(g);function l(e,t){var o=e.charCodeAt(t);if(o>=55296&&o<=56319){var r=e.charCodeAt(t+1);r>=56320&&r<=57343&&(o=65536+(o-55296<<10)+(r-56320))}return o}function u(e){for(var t=new Uint8Array(e.length),o=0,r=0;r<e.length;r++){var n=String.prototype.codePointAt?e.codePointAt(r):l(e,r);t[o++]=255&n}return t}t.MozChunkedArrayBufferXHR=p,t.stringToArrayBuffer=u},function(e,t,o){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r,n=o(0);function i(e){return function(e){return 9===e||10===e||13===e}(e)||e>=32&&e<=126}function s(e){for(var t=0;t!==e.length;++t)if(!i(e[t]))throw new Error("Metadata is not valid (printable) ASCII");return String.fromCharCode.apply(String,Array.prototype.slice.call(e))}function a(e){return 128==(128&e.getUint8(0))}function g(e){return e.getUint32(1,!1)}function p(e,t,o){return e.byteLength-t>=o}function l(e,t,o){if(e.slice)return e.slice(t,o);var r=e.length;void 0!==o&&(r=o);for(var n=new Uint8Array(r-t),i=0,s=t;s<r;s++)n[i++]=e[s];return n}t.decodeASCII=s,t.encodeASCII=function(e){for(var t=new Uint8Array(e.length),o=0;o!==e.length;++o){var r=e.charCodeAt(o);if(!i(r))throw new Error("Metadata contains invalid ASCII");t[o]=r}return t},function(e){e[e.MESSAGE=1]="MESSAGE",e[e.TRAILERS=2]="TRAILERS"}(r=t.ChunkType||(t.ChunkType={}));var u=function(){function e(){this.buffer=null,this.position=0}return e.prototype.parse=function(e,t){if(0===e.length&&t)return[];var o,i=[];if(null==this.buffer)this.buffer=e,this.position=0;else if(this.position===this.buffer.byteLength)this.buffer=e,this.position=0;else{var u=this.buffer.byteLength-this.position,c=new Uint8Array(u+e.byteLength),d=l(this.buffer,this.position);c.set(d,0);var f=new Uint8Array(e);c.set(f,u),this.buffer=c,this.position=0}for(;;){if(!p(this.buffer,this.position,5))return i;var h=l(this.buffer,this.position,this.position+5),b=new DataView(h.buffer,h.byteOffset,h.byteLength),y=g(b);if(!p(this.buffer,this.position,5+y))return i;var m=l(this.buffer,this.position+5,this.position+5+y);if(this.position+=5+y,a(b))return i.push({chunkType:r.TRAILERS,trailers:(o=m,new n.Metadata(s(o)))}),i;i.push({chunkType:r.MESSAGE,data:m})}},e}();t.ChunkParser=u},function(e,t,o){"use strict";var r;Object.defineProperty(t,"__esModule",{value:!0}),function(e){e[e.OK=0]="OK",e[e.Canceled=1]="Canceled",e[e.Unknown=2]="Unknown",e[e.InvalidArgument=3]="InvalidArgument",e[e.DeadlineExceeded=4]="DeadlineExceeded",e[e.NotFound=5]="NotFound",e[e.AlreadyExists=6]="AlreadyExists",e[e.PermissionDenied=7]="PermissionDenied",e[e.ResourceExhausted=8]="ResourceExhausted",e[e.FailedPrecondition=9]="FailedPrecondition",e[e.Aborted=10]="Aborted",e[e.OutOfRange=11]="OutOfRange",e[e.Unimplemented=12]="Unimplemented",e[e.Internal=13]="Internal",e[e.Unavailable=14]="Unavailable",e[e.DataLoss=15]="DataLoss",e[e.Unauthenticated=16]="Unauthenticated"}(r=t.Code||(t.Code={})),t.httpStatusToCode=function(e){switch(e){case 0:return r.Internal;case 200:return r.OK;case 400:return r.InvalidArgument;case 401:return r.Unauthenticated;case 403:return r.PermissionDenied;case 404:return r.NotFound;case 409:return r.Aborted;case 412:return r.FailedPrecondition;case 429:return r.ResourceExhausted;case 499:return r.Canceled;case 500:return r.Unknown;case 501:return r.Unimplemented;case 503:return r.Unavailable;case 504:return r.DeadlineExceeded;default:return r.Unknown}}},function(e,t,o){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=o(3),n=o(4),i=o(6),s=o(12),a=o(7),g=o(5),p=o(9),l=o(13),u=o(15),c=o(2);!function(e){e.setDefaultTransport=n.setDefaultTransportFactory,e.CrossBrowserHttpTransport=g.CrossBrowserHttpTransport,e.FetchReadableStreamTransport=i.FetchReadableStreamTransport,e.XhrTransport=a.XhrTransport,e.WebsocketTransport=s.WebsocketTransport,e.Code=p.Code,e.Metadata=r.BrowserHeaders,e.client=function(e,t){return c.client(e,t)},e.invoke=l.invoke,e.unary=u.unary}(t.grpc||(t.grpc={}))},function(e,t,o){"use strict";var r;function n(e){var t=function(){if(void 0!==r)return r;if(XMLHttpRequest){r=new XMLHttpRequest;try{r.open("GET","https://localhost")}catch(e){}}return r}();if(!t)return!1;try{return t.responseType=e,t.responseType===e}catch(e){}return!1}Object.defineProperty(t,"__esModule",{value:!0}),t.xhrSupportsResponseType=n,t.detectMozXHRSupport=function(){return"undefined"!=typeof XMLHttpRequest&&n("moz-chunked-arraybuffer")},t.detectXHROverrideMimeTypeSupport=function(){return"undefined"!=typeof XMLHttpRequest&&XMLHttpRequest.prototype.hasOwnProperty("overrideMimeType")}},function(e,t,o){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r,n=o(1),i=o(8);!function(e){e[e.FINISH_SEND=1]="FINISH_SEND"}(r||(r={}));var s=new Uint8Array([1]);t.WebsocketTransport=function(){return function(e){return function(e){e.debug&&n.debug("websocketRequest",e);var t,o=function(e){if("https://"===e.substr(0,8))return"wss://"+e.substr(8);if("http://"===e.substr(0,7))return"ws://"+e.substr(7);throw new Error("Websocket transport constructed with non-https:// or http:// host.")}(e.url),a=[];function g(e){if(e===r.FINISH_SEND)t.send(s);else{var o=e,n=new Int8Array(o.byteLength+1);n.set(new Uint8Array([0])),n.set(o,1),t.send(n)}}return{sendMessage:function(e){t&&t.readyState!==t.CONNECTING?g(e):a.push(e)},finishSend:function(){t&&t.readyState!==t.CONNECTING?g(r.FINISH_SEND):a.push(r.FINISH_SEND)},start:function(r){(t=new WebSocket(o,["grpc-websockets"])).binaryType="arraybuffer",t.onopen=function(){var o;e.debug&&n.debug("websocketRequest.onopen"),t.send((o="",r.forEach((function(e,t){o+=e+": "+t.join(", ")+"\r\n"})),i.encodeASCII(o))),a.forEach((function(e){g(e)}))},t.onclose=function(t){e.debug&&n.debug("websocketRequest.onclose",t),e.onEnd()},t.onerror=function(t){e.debug&&n.debug("websocketRequest.onerror",t)},t.onmessage=function(t){e.onChunk(new Uint8Array(t.data))}},cancel:function(){e.debug&&n.debug("websocket.abort"),t.close()}}}(e)}}},function(e,t,o){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=o(2);t.invoke=function(e,t){if(e.requestStream)throw new Error(".invoke cannot be used with client-streaming methods. Use .client instead.");var o=r.client(e,{host:t.host,transport:t.transport,debug:t.debug});return t.onHeaders&&o.onHeaders(t.onHeaders),t.onMessage&&o.onMessage(t.onMessage),t.onEnd&&o.onEnd(t.onEnd),o.start(t.metadata),o.send(t.request),o.finishSend(),{close:function(){o.close()}}}},function(e,t,o){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.frameRequest=function(e){var t=e.serializeBinary(),o=new ArrayBuffer(t.byteLength+5);return new DataView(o,1,4).setUint32(0,t.length,!1),new Uint8Array(o,5).set(t),new Uint8Array(o)}},function(e,t,o){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=o(0),n=o(2);t.unary=function(e,t){if(e.responseStream)throw new Error(".unary cannot be used with server-streaming methods. Use .invoke or .client instead.");if(e.requestStream)throw new Error(".unary cannot be used with client-streaming methods. Use .client instead.");var o=null,i=null,s=n.client(e,{host:t.host,transport:t.transport,debug:t.debug});return s.onHeaders((function(e){o=e})),s.onMessage((function(e){i=e})),s.onEnd((function(e,n,s){t.onEnd({status:e,statusMessage:n,headers:o||new r.Metadata,message:i,trailers:s})})),s.start(t.metadata),s.send(t.request),s.finishSend(),{close:function(){s.close()}}}}])},function(e,t,o){var r=o(0),n=r,i=Function("return this")(),s=o(4);n.object.extend(proto,s),n.exportSymbol("proto.proto.rpc.examples.echo.v1.EchoBiDiRequest",null,i),n.exportSymbol("proto.proto.rpc.examples.echo.v1.EchoBiDiResponse",null,i),n.exportSymbol("proto.proto.rpc.examples.echo.v1.EchoMultipleRequest",null,i),n.exportSymbol("proto.proto.rpc.examples.echo.v1.EchoMultipleResponse",null,i),n.exportSymbol("proto.proto.rpc.examples.echo.v1.EchoRequest",null,i),n.exportSymbol("proto.proto.rpc.examples.echo.v1.EchoResponse",null,i),proto.proto.rpc.examples.echo.v1.EchoRequest=function(e){r.Message.initialize(this,e,0,-1,null,null)},n.inherits(proto.proto.rpc.examples.echo.v1.EchoRequest,r.Message),n.DEBUG&&!COMPILED&&(proto.proto.rpc.examples.echo.v1.EchoRequest.displayName="proto.proto.rpc.examples.echo.v1.EchoRequest"),proto.proto.rpc.examples.echo.v1.EchoResponse=function(e){r.Message.initialize(this,e,0,-1,null,null)},n.inherits(proto.proto.rpc.examples.echo.v1.EchoResponse,r.Message),n.DEBUG&&!COMPILED&&(proto.proto.rpc.examples.echo.v1.EchoResponse.displayName="proto.proto.rpc.examples.echo.v1.EchoResponse"),proto.proto.rpc.examples.echo.v1.EchoMultipleRequest=function(e){r.Message.initialize(this,e,0,-1,null,null)},n.inherits(proto.proto.rpc.examples.echo.v1.EchoMultipleRequest,r.Message),n.DEBUG&&!COMPILED&&(proto.proto.rpc.examples.echo.v1.EchoMultipleRequest.displayName="proto.proto.rpc.examples.echo.v1.EchoMultipleRequest"),proto.proto.rpc.examples.echo.v1.EchoMultipleResponse=function(e){r.Message.initialize(this,e,0,-1,null,null)},n.inherits(proto.proto.rpc.examples.echo.v1.EchoMultipleResponse,r.Message),n.DEBUG&&!COMPILED&&(proto.proto.rpc.examples.echo.v1.EchoMultipleResponse.displayName="proto.proto.rpc.examples.echo.v1.EchoMultipleResponse"),proto.proto.rpc.examples.echo.v1.EchoBiDiRequest=function(e){r.Message.initialize(this,e,0,-1,null,null)},n.inherits(proto.proto.rpc.examples.echo.v1.EchoBiDiRequest,r.Message),n.DEBUG&&!COMPILED&&(proto.proto.rpc.examples.echo.v1.EchoBiDiRequest.displayName="proto.proto.rpc.examples.echo.v1.EchoBiDiRequest"),proto.proto.rpc.examples.echo.v1.EchoBiDiResponse=function(e){r.Message.initialize(this,e,0,-1,null,null)},n.inherits(proto.proto.rpc.examples.echo.v1.EchoBiDiResponse,r.Message),n.DEBUG&&!COMPILED&&(proto.proto.rpc.examples.echo.v1.EchoBiDiResponse.displayName="proto.proto.rpc.examples.echo.v1.EchoBiDiResponse"),r.Message.GENERATE_TO_OBJECT&&(proto.proto.rpc.examples.echo.v1.EchoRequest.prototype.toObject=function(e){return proto.proto.rpc.examples.echo.v1.EchoRequest.toObject(e,this)},proto.proto.rpc.examples.echo.v1.EchoRequest.toObject=function(e,t){var o={message:r.Message.getFieldWithDefault(t,1,"")};return e&&(o.$jspbMessageInstance=t),o}),proto.proto.rpc.examples.echo.v1.EchoRequest.deserializeBinary=function(e){var t=new r.BinaryReader(e),o=new proto.proto.rpc.examples.echo.v1.EchoRequest;return proto.proto.rpc.examples.echo.v1.EchoRequest.deserializeBinaryFromReader(o,t)},proto.proto.rpc.examples.echo.v1.EchoRequest.deserializeBinaryFromReader=function(e,t){for(;t.nextField()&&!t.isEndGroup();){switch(t.getFieldNumber()){case 1:var o=t.readString();e.setMessage(o);break;default:t.skipField()}}return e},proto.proto.rpc.examples.echo.v1.EchoRequest.prototype.serializeBinary=function(){var e=new r.BinaryWriter;return proto.proto.rpc.examples.echo.v1.EchoRequest.serializeBinaryToWriter(this,e),e.getResultBuffer()},proto.proto.rpc.examples.echo.v1.EchoRequest.serializeBinaryToWriter=function(e,t){var o;(o=e.getMessage()).length>0&&t.writeString(1,o)},proto.proto.rpc.examples.echo.v1.EchoRequest.prototype.getMessage=function(){return r.Message.getFieldWithDefault(this,1,"")},proto.proto.rpc.examples.echo.v1.EchoRequest.prototype.setMessage=function(e){return r.Message.setProto3StringField(this,1,e)},r.Message.GENERATE_TO_OBJECT&&(proto.proto.rpc.examples.echo.v1.EchoResponse.prototype.toObject=function(e){return proto.proto.rpc.examples.echo.v1.EchoResponse.toObject(e,this)},proto.proto.rpc.examples.echo.v1.EchoResponse.toObject=function(e,t){var o={message:r.Message.getFieldWithDefault(t,1,"")};return e&&(o.$jspbMessageInstance=t),o}),proto.proto.rpc.examples.echo.v1.EchoResponse.deserializeBinary=function(e){var t=new r.BinaryReader(e),o=new proto.proto.rpc.examples.echo.v1.EchoResponse;return proto.proto.rpc.examples.echo.v1.EchoResponse.deserializeBinaryFromReader(o,t)},proto.proto.rpc.examples.echo.v1.EchoResponse.deserializeBinaryFromReader=function(e,t){for(;t.nextField()&&!t.isEndGroup();){switch(t.getFieldNumber()){case 1:var o=t.readString();e.setMessage(o);break;default:t.skipField()}}return e},proto.proto.rpc.examples.echo.v1.EchoResponse.prototype.serializeBinary=function(){var e=new r.BinaryWriter;return proto.proto.rpc.examples.echo.v1.EchoResponse.serializeBinaryToWriter(this,e),e.getResultBuffer()},proto.proto.rpc.examples.echo.v1.EchoResponse.serializeBinaryToWriter=function(e,t){var o;(o=e.getMessage()).length>0&&t.writeString(1,o)},proto.proto.rpc.examples.echo.v1.EchoResponse.prototype.getMessage=function(){return r.Message.getFieldWithDefault(this,1,"")},proto.proto.rpc.examples.echo.v1.EchoResponse.prototype.setMessage=function(e){return r.Message.setProto3StringField(this,1,e)},r.Message.GENERATE_TO_OBJECT&&(proto.proto.rpc.examples.echo.v1.EchoMultipleRequest.prototype.toObject=function(e){return proto.proto.rpc.examples.echo.v1.EchoMultipleRequest.toObject(e,this)},proto.proto.rpc.examples.echo.v1.EchoMultipleRequest.toObject=function(e,t){var o={message:r.Message.getFieldWithDefault(t,1,"")};return e&&(o.$jspbMessageInstance=t),o}),proto.proto.rpc.examples.echo.v1.EchoMultipleRequest.deserializeBinary=function(e){var t=new r.BinaryReader(e),o=new proto.proto.rpc.examples.echo.v1.EchoMultipleRequest;return proto.proto.rpc.examples.echo.v1.EchoMultipleRequest.deserializeBinaryFromReader(o,t)},proto.proto.rpc.examples.echo.v1.EchoMultipleRequest.deserializeBinaryFromReader=function(e,t){for(;t.nextField()&&!t.isEndGroup();){switch(t.getFieldNumber()){case 1:var o=t.readString();e.setMessage(o);break;default:t.skipField()}}return e},proto.proto.rpc.examples.echo.v1.EchoMultipleRequest.prototype.serializeBinary=function(){var e=new r.BinaryWriter;return proto.proto.rpc.examples.echo.v1.EchoMultipleRequest.serializeBinaryToWriter(this,e),e.getResultBuffer()},proto.proto.rpc.examples.echo.v1.EchoMultipleRequest.serializeBinaryToWriter=function(e,t){var o;(o=e.getMessage()).length>0&&t.writeString(1,o)},proto.proto.rpc.examples.echo.v1.EchoMultipleRequest.prototype.getMessage=function(){return r.Message.getFieldWithDefault(this,1,"")},proto.proto.rpc.examples.echo.v1.EchoMultipleRequest.prototype.setMessage=function(e){return r.Message.setProto3StringField(this,1,e)},r.Message.GENERATE_TO_OBJECT&&(proto.proto.rpc.examples.echo.v1.EchoMultipleResponse.prototype.toObject=function(e){return proto.proto.rpc.examples.echo.v1.EchoMultipleResponse.toObject(e,this)},proto.proto.rpc.examples.echo.v1.EchoMultipleResponse.toObject=function(e,t){var o={message:r.Message.getFieldWithDefault(t,1,"")};return e&&(o.$jspbMessageInstance=t),o}),proto.proto.rpc.examples.echo.v1.EchoMultipleResponse.deserializeBinary=function(e){var t=new r.BinaryReader(e),o=new proto.proto.rpc.examples.echo.v1.EchoMultipleResponse;return proto.proto.rpc.examples.echo.v1.EchoMultipleResponse.deserializeBinaryFromReader(o,t)},proto.proto.rpc.examples.echo.v1.EchoMultipleResponse.deserializeBinaryFromReader=function(e,t){for(;t.nextField()&&!t.isEndGroup();){switch(t.getFieldNumber()){case 1:var o=t.readString();e.setMessage(o);break;default:t.skipField()}}return e},proto.proto.rpc.examples.echo.v1.EchoMultipleResponse.prototype.serializeBinary=function(){var e=new r.BinaryWriter;return proto.proto.rpc.examples.echo.v1.EchoMultipleResponse.serializeBinaryToWriter(this,e),e.getResultBuffer()},proto.proto.rpc.examples.echo.v1.EchoMultipleResponse.serializeBinaryToWriter=function(e,t){var o;(o=e.getMessage()).length>0&&t.writeString(1,o)},proto.proto.rpc.examples.echo.v1.EchoMultipleResponse.prototype.getMessage=function(){return r.Message.getFieldWithDefault(this,1,"")},proto.proto.rpc.examples.echo.v1.EchoMultipleResponse.prototype.setMessage=function(e){return r.Message.setProto3StringField(this,1,e)},r.Message.GENERATE_TO_OBJECT&&(proto.proto.rpc.examples.echo.v1.EchoBiDiRequest.prototype.toObject=function(e){return proto.proto.rpc.examples.echo.v1.EchoBiDiRequest.toObject(e,this)},proto.proto.rpc.examples.echo.v1.EchoBiDiRequest.toObject=function(e,t){var o={message:r.Message.getFieldWithDefault(t,1,"")};return e&&(o.$jspbMessageInstance=t),o}),proto.proto.rpc.examples.echo.v1.EchoBiDiRequest.deserializeBinary=function(e){var t=new r.BinaryReader(e),o=new proto.proto.rpc.examples.echo.v1.EchoBiDiRequest;return proto.proto.rpc.examples.echo.v1.EchoBiDiRequest.deserializeBinaryFromReader(o,t)},proto.proto.rpc.examples.echo.v1.EchoBiDiRequest.deserializeBinaryFromReader=function(e,t){for(;t.nextField()&&!t.isEndGroup();){switch(t.getFieldNumber()){case 1:var o=t.readString();e.setMessage(o);break;default:t.skipField()}}return e},proto.proto.rpc.examples.echo.v1.EchoBiDiRequest.prototype.serializeBinary=function(){var e=new r.BinaryWriter;return proto.proto.rpc.examples.echo.v1.EchoBiDiRequest.serializeBinaryToWriter(this,e),e.getResultBuffer()},proto.proto.rpc.examples.echo.v1.EchoBiDiRequest.serializeBinaryToWriter=function(e,t){var o;(o=e.getMessage()).length>0&&t.writeString(1,o)},proto.proto.rpc.examples.echo.v1.EchoBiDiRequest.prototype.getMessage=function(){return r.Message.getFieldWithDefault(this,1,"")},proto.proto.rpc.examples.echo.v1.EchoBiDiRequest.prototype.setMessage=function(e){return r.Message.setProto3StringField(this,1,e)},r.Message.GENERATE_TO_OBJECT&&(proto.proto.rpc.examples.echo.v1.EchoBiDiResponse.prototype.toObject=function(e){return proto.proto.rpc.examples.echo.v1.EchoBiDiResponse.toObject(e,this)},proto.proto.rpc.examples.echo.v1.EchoBiDiResponse.toObject=function(e,t){var o={message:r.Message.getFieldWithDefault(t,1,"")};return e&&(o.$jspbMessageInstance=t),o}),proto.proto.rpc.examples.echo.v1.EchoBiDiResponse.deserializeBinary=function(e){var t=new r.BinaryReader(e),o=new proto.proto.rpc.examples.echo.v1.EchoBiDiResponse;return proto.proto.rpc.examples.echo.v1.EchoBiDiResponse.deserializeBinaryFromReader(o,t)},proto.proto.rpc.examples.echo.v1.EchoBiDiResponse.deserializeBinaryFromReader=function(e,t){for(;t.nextField()&&!t.isEndGroup();){switch(t.getFieldNumber()){case 1:var o=t.readString();e.setMessage(o);break;default:t.skipField()}}return e},proto.proto.rpc.examples.echo.v1.EchoBiDiResponse.prototype.serializeBinary=function(){var e=new r.BinaryWriter;return proto.proto.rpc.examples.echo.v1.EchoBiDiResponse.serializeBinaryToWriter(this,e),e.getResultBuffer()},proto.proto.rpc.examples.echo.v1.EchoBiDiResponse.serializeBinaryToWriter=function(e,t){var o;(o=e.getMessage()).length>0&&t.writeString(1,o)},proto.proto.rpc.examples.echo.v1.EchoBiDiResponse.prototype.getMessage=function(){return r.Message.getFieldWithDefault(this,1,"")},proto.proto.rpc.examples.echo.v1.EchoBiDiResponse.prototype.setMessage=function(e){return r.Message.setProto3StringField(this,1,e)},n.object.extend(t,proto.proto.rpc.examples.echo.v1)},function(e,t){var o;o=function(){return this}();try{o=o||new Function("return this")()}catch(e){"object"==typeof window&&(o=window)}e.exports=o},function(e,t,o){var r=o(0),n=r,i=Function("return this")(),s=o(13);n.object.extend(proto,s);var a=o(14);n.object.extend(proto,a),n.exportSymbol("proto.google.api.http",null,i),proto.google.api.http=new r.ExtensionFieldInfo(72295728,{http:0},s.HttpRule,s.HttpRule.toObject,0),a.MethodOptions.extensionsBinary[72295728]=new r.ExtensionFieldBinaryInfo(proto.google.api.http,r.BinaryReader.prototype.readMessage,r.BinaryWriter.prototype.writeMessage,s.HttpRule.serializeBinaryToWriter,s.HttpRule.deserializeBinaryFromReader,!1),a.MethodOptions.extensions[72295728]=proto.google.api.http,n.object.extend(t,proto.google.api)},function(e,t,o){var r=o(0),n=r,i=Function("return this")(),s=o(4);n.object.extend(proto,s);var a=o(6);n.object.extend(proto,a),n.exportSymbol("proto.proto.rpc.webrtc.v1.AnswerRequest",null,i),n.exportSymbol("proto.proto.rpc.webrtc.v1.AnswerResponse",null,i),n.exportSymbol("proto.proto.rpc.webrtc.v1.CallRequest",null,i),n.exportSymbol("proto.proto.rpc.webrtc.v1.CallResponse",null,i),proto.proto.rpc.webrtc.v1.CallRequest=function(e){r.Message.initialize(this,e,0,-1,null,null)},n.inherits(proto.proto.rpc.webrtc.v1.CallRequest,r.Message),n.DEBUG&&!COMPILED&&(proto.proto.rpc.webrtc.v1.CallRequest.displayName="proto.proto.rpc.webrtc.v1.CallRequest"),proto.proto.rpc.webrtc.v1.CallResponse=function(e){r.Message.initialize(this,e,0,-1,null,null)},n.inherits(proto.proto.rpc.webrtc.v1.CallResponse,r.Message),n.DEBUG&&!COMPILED&&(proto.proto.rpc.webrtc.v1.CallResponse.displayName="proto.proto.rpc.webrtc.v1.CallResponse"),proto.proto.rpc.webrtc.v1.AnswerRequest=function(e){r.Message.initialize(this,e,0,-1,null,null)},n.inherits(proto.proto.rpc.webrtc.v1.AnswerRequest,r.Message),n.DEBUG&&!COMPILED&&(proto.proto.rpc.webrtc.v1.AnswerRequest.displayName="proto.proto.rpc.webrtc.v1.AnswerRequest"),proto.proto.rpc.webrtc.v1.AnswerResponse=function(e){r.Message.initialize(this,e,0,-1,null,null)},n.inherits(proto.proto.rpc.webrtc.v1.AnswerResponse,r.Message),n.DEBUG&&!COMPILED&&(proto.proto.rpc.webrtc.v1.AnswerResponse.displayName="proto.proto.rpc.webrtc.v1.AnswerResponse"),r.Message.GENERATE_TO_OBJECT&&(proto.proto.rpc.webrtc.v1.CallRequest.prototype.toObject=function(e){return proto.proto.rpc.webrtc.v1.CallRequest.toObject(e,this)},proto.proto.rpc.webrtc.v1.CallRequest.toObject=function(e,t){var o={sdp:r.Message.getFieldWithDefault(t,1,"")};return e&&(o.$jspbMessageInstance=t),o}),proto.proto.rpc.webrtc.v1.CallRequest.deserializeBinary=function(e){var t=new r.BinaryReader(e),o=new proto.proto.rpc.webrtc.v1.CallRequest;return proto.proto.rpc.webrtc.v1.CallRequest.deserializeBinaryFromReader(o,t)},proto.proto.rpc.webrtc.v1.CallRequest.deserializeBinaryFromReader=function(e,t){for(;t.nextField()&&!t.isEndGroup();){switch(t.getFieldNumber()){case 1:var o=t.readString();e.setSdp(o);break;default:t.skipField()}}return e},proto.proto.rpc.webrtc.v1.CallRequest.prototype.serializeBinary=function(){var e=new r.BinaryWriter;return proto.proto.rpc.webrtc.v1.CallRequest.serializeBinaryToWriter(this,e),e.getResultBuffer()},proto.proto.rpc.webrtc.v1.CallRequest.serializeBinaryToWriter=function(e,t){var o;(o=e.getSdp()).length>0&&t.writeString(1,o)},proto.proto.rpc.webrtc.v1.CallRequest.prototype.getSdp=function(){return r.Message.getFieldWithDefault(this,1,"")},proto.proto.rpc.webrtc.v1.CallRequest.prototype.setSdp=function(e){return r.Message.setProto3StringField(this,1,e)},r.Message.GENERATE_TO_OBJECT&&(proto.proto.rpc.webrtc.v1.CallResponse.prototype.toObject=function(e){return proto.proto.rpc.webrtc.v1.CallResponse.toObject(e,this)},proto.proto.rpc.webrtc.v1.CallResponse.toObject=function(e,t){var o={sdp:r.Message.getFieldWithDefault(t,1,"")};return e&&(o.$jspbMessageInstance=t),o}),proto.proto.rpc.webrtc.v1.CallResponse.deserializeBinary=function(e){var t=new r.BinaryReader(e),o=new proto.proto.rpc.webrtc.v1.CallResponse;return proto.proto.rpc.webrtc.v1.CallResponse.deserializeBinaryFromReader(o,t)},proto.proto.rpc.webrtc.v1.CallResponse.deserializeBinaryFromReader=function(e,t){for(;t.nextField()&&!t.isEndGroup();){switch(t.getFieldNumber()){case 1:var o=t.readString();e.setSdp(o);break;default:t.skipField()}}return e},proto.proto.rpc.webrtc.v1.CallResponse.prototype.serializeBinary=function(){var e=new r.BinaryWriter;return proto.proto.rpc.webrtc.v1.CallResponse.serializeBinaryToWriter(this,e),e.getResultBuffer()},proto.proto.rpc.webrtc.v1.CallResponse.serializeBinaryToWriter=function(e,t){var o;(o=e.getSdp()).length>0&&t.writeString(1,o)},proto.proto.rpc.webrtc.v1.CallResponse.prototype.getSdp=function(){return r.Message.getFieldWithDefault(this,1,"")},proto.proto.rpc.webrtc.v1.CallResponse.prototype.setSdp=function(e){return r.Message.setProto3StringField(this,1,e)},r.Message.GENERATE_TO_OBJECT&&(proto.proto.rpc.webrtc.v1.AnswerRequest.prototype.toObject=function(e){return proto.proto.rpc.webrtc.v1.AnswerRequest.toObject(e,this)},proto.proto.rpc.webrtc.v1.AnswerRequest.toObject=function(e,t){var o={sdp:r.Message.getFieldWithDefault(t,1,"")};return e&&(o.$jspbMessageInstance=t),o}),proto.proto.rpc.webrtc.v1.AnswerRequest.deserializeBinary=function(e){var t=new r.BinaryReader(e),o=new proto.proto.rpc.webrtc.v1.AnswerRequest;return proto.proto.rpc.webrtc.v1.AnswerRequest.deserializeBinaryFromReader(o,t)},proto.proto.rpc.webrtc.v1.AnswerRequest.deserializeBinaryFromReader=function(e,t){for(;t.nextField()&&!t.isEndGroup();){switch(t.getFieldNumber()){case 1:var o=t.readString();e.setSdp(o);break;default:t.skipField()}}return e},proto.proto.rpc.webrtc.v1.AnswerRequest.prototype.serializeBinary=function(){var e=new r.BinaryWriter;return proto.proto.rpc.webrtc.v1.AnswerRequest.serializeBinaryToWriter(this,e),e.getResultBuffer()},proto.proto.rpc.webrtc.v1.AnswerRequest.serializeBinaryToWriter=function(e,t){var o;(o=e.getSdp()).length>0&&t.writeString(1,o)},proto.proto.rpc.webrtc.v1.AnswerRequest.prototype.getSdp=function(){return r.Message.getFieldWithDefault(this,1,"")},proto.proto.rpc.webrtc.v1.AnswerRequest.prototype.setSdp=function(e){return r.Message.setProto3StringField(this,1,e)},r.Message.GENERATE_TO_OBJECT&&(proto.proto.rpc.webrtc.v1.AnswerResponse.prototype.toObject=function(e){return proto.proto.rpc.webrtc.v1.AnswerResponse.toObject(e,this)},proto.proto.rpc.webrtc.v1.AnswerResponse.toObject=function(e,t){var o,n={status:(o=t.getStatus())&&a.Status.toObject(e,o),sdp:r.Message.getFieldWithDefault(t,2,"")};return e&&(n.$jspbMessageInstance=t),n}),proto.proto.rpc.webrtc.v1.AnswerResponse.deserializeBinary=function(e){var t=new r.BinaryReader(e),o=new proto.proto.rpc.webrtc.v1.AnswerResponse;return proto.proto.rpc.webrtc.v1.AnswerResponse.deserializeBinaryFromReader(o,t)},proto.proto.rpc.webrtc.v1.AnswerResponse.deserializeBinaryFromReader=function(e,t){for(;t.nextField()&&!t.isEndGroup();){switch(t.getFieldNumber()){case 1:var o=new a.Status;t.readMessage(o,a.Status.deserializeBinaryFromReader),e.setStatus(o);break;case 2:o=t.readString();e.setSdp(o);break;default:t.skipField()}}return e},proto.proto.rpc.webrtc.v1.AnswerResponse.prototype.serializeBinary=function(){var e=new r.BinaryWriter;return proto.proto.rpc.webrtc.v1.AnswerResponse.serializeBinaryToWriter(this,e),e.getResultBuffer()},proto.proto.rpc.webrtc.v1.AnswerResponse.serializeBinaryToWriter=function(e,t){var o=void 0;null!=(o=e.getStatus())&&t.writeMessage(1,o,a.Status.serializeBinaryToWriter),(o=e.getSdp()).length>0&&t.writeString(2,o)},proto.proto.rpc.webrtc.v1.AnswerResponse.prototype.getStatus=function(){return r.Message.getWrapperField(this,a.Status,1)},proto.proto.rpc.webrtc.v1.AnswerResponse.prototype.setStatus=function(e){return r.Message.setWrapperField(this,1,e)},proto.proto.rpc.webrtc.v1.AnswerResponse.prototype.clearStatus=function(){return this.setStatus(void 0)},proto.proto.rpc.webrtc.v1.AnswerResponse.prototype.hasStatus=function(){return null!=r.Message.getField(this,1)},proto.proto.rpc.webrtc.v1.AnswerResponse.prototype.getSdp=function(){return r.Message.getFieldWithDefault(this,2,"")},proto.proto.rpc.webrtc.v1.AnswerResponse.prototype.setSdp=function(e){return r.Message.setProto3StringField(this,2,e)},n.object.extend(t,proto.proto.rpc.webrtc.v1)},function(e,t,o){var r=o(0),n=r,i=Function("return this")(),s=o(18);n.object.extend(proto,s),n.exportSymbol("proto.google.rpc.Status",null,i),proto.google.rpc.Status=function(e){r.Message.initialize(this,e,0,-1,proto.google.rpc.Status.repeatedFields_,null)},n.inherits(proto.google.rpc.Status,r.Message),n.DEBUG&&!COMPILED&&(proto.google.rpc.Status.displayName="proto.google.rpc.Status"),proto.google.rpc.Status.repeatedFields_=[3],r.Message.GENERATE_TO_OBJECT&&(proto.google.rpc.Status.prototype.toObject=function(e){return proto.google.rpc.Status.toObject(e,this)},proto.google.rpc.Status.toObject=function(e,t){var o={code:r.Message.getFieldWithDefault(t,1,0),message:r.Message.getFieldWithDefault(t,2,""),detailsList:r.Message.toObjectList(t.getDetailsList(),s.Any.toObject,e)};return e&&(o.$jspbMessageInstance=t),o}),proto.google.rpc.Status.deserializeBinary=function(e){var t=new r.BinaryReader(e),o=new proto.google.rpc.Status;return proto.google.rpc.Status.deserializeBinaryFromReader(o,t)},proto.google.rpc.Status.deserializeBinaryFromReader=function(e,t){for(;t.nextField()&&!t.isEndGroup();){switch(t.getFieldNumber()){case 1:var o=t.readInt32();e.setCode(o);break;case 2:o=t.readString();e.setMessage(o);break;case 3:o=new s.Any;t.readMessage(o,s.Any.deserializeBinaryFromReader),e.addDetails(o);break;default:t.skipField()}}return e},proto.google.rpc.Status.prototype.serializeBinary=function(){var e=new r.BinaryWriter;return proto.google.rpc.Status.serializeBinaryToWriter(this,e),e.getResultBuffer()},proto.google.rpc.Status.serializeBinaryToWriter=function(e,t){var o=void 0;0!==(o=e.getCode())&&t.writeInt32(1,o),(o=e.getMessage()).length>0&&t.writeString(2,o),(o=e.getDetailsList()).length>0&&t.writeRepeatedMessage(3,o,s.Any.serializeBinaryToWriter)},proto.google.rpc.Status.prototype.getCode=function(){return r.Message.getFieldWithDefault(this,1,0)},proto.google.rpc.Status.prototype.setCode=function(e){return r.Message.setProto3IntField(this,1,e)},proto.google.rpc.Status.prototype.getMessage=function(){return r.Message.getFieldWithDefault(this,2,"")},proto.google.rpc.Status.prototype.setMessage=function(e){return r.Message.setProto3StringField(this,2,e)},proto.google.rpc.Status.prototype.getDetailsList=function(){return r.Message.getRepeatedWrapperField(this,s.Any,3)},proto.google.rpc.Status.prototype.setDetailsList=function(e){return r.Message.setRepeatedWrapperField(this,3,e)},proto.google.rpc.Status.prototype.addDetails=function(e,t){return r.Message.addToRepeatedWrapperField(this,3,e,proto.google.protobuf.Any,t)},proto.google.rpc.Status.prototype.clearDetailsList=function(){return this.setDetailsList([])},n.object.extend(t,proto.google.rpc)},function(e,t,o){var r=o(0),n=r,i=Function("return this")(),s=o(21);n.object.extend(proto,s);var a=o(6);n.object.extend(proto,a),n.exportSymbol("proto.proto.rpc.webrtc.v1.Metadata",null,i),n.exportSymbol("proto.proto.rpc.webrtc.v1.PacketMessage",null,i),n.exportSymbol("proto.proto.rpc.webrtc.v1.Request",null,i),n.exportSymbol("proto.proto.rpc.webrtc.v1.Request.TypeCase",null,i),n.exportSymbol("proto.proto.rpc.webrtc.v1.RequestHeaders",null,i),n.exportSymbol("proto.proto.rpc.webrtc.v1.RequestMessage",null,i),n.exportSymbol("proto.proto.rpc.webrtc.v1.Response",null,i),n.exportSymbol("proto.proto.rpc.webrtc.v1.Response.TypeCase",null,i),n.exportSymbol("proto.proto.rpc.webrtc.v1.ResponseHeaders",null,i),n.exportSymbol("proto.proto.rpc.webrtc.v1.ResponseMessage",null,i),n.exportSymbol("proto.proto.rpc.webrtc.v1.ResponseTrailers",null,i),n.exportSymbol("proto.proto.rpc.webrtc.v1.Stream",null,i),n.exportSymbol("proto.proto.rpc.webrtc.v1.Strings",null,i),proto.proto.rpc.webrtc.v1.PacketMessage=function(e){r.Message.initialize(this,e,0,-1,null,null)},n.inherits(proto.proto.rpc.webrtc.v1.PacketMessage,r.Message),n.DEBUG&&!COMPILED&&(proto.proto.rpc.webrtc.v1.PacketMessage.displayName="proto.proto.rpc.webrtc.v1.PacketMessage"),proto.proto.rpc.webrtc.v1.Stream=function(e){r.Message.initialize(this,e,0,-1,null,null)},n.inherits(proto.proto.rpc.webrtc.v1.Stream,r.Message),n.DEBUG&&!COMPILED&&(proto.proto.rpc.webrtc.v1.Stream.displayName="proto.proto.rpc.webrtc.v1.Stream"),proto.proto.rpc.webrtc.v1.Request=function(e){r.Message.initialize(this,e,0,-1,null,proto.proto.rpc.webrtc.v1.Request.oneofGroups_)},n.inherits(proto.proto.rpc.webrtc.v1.Request,r.Message),n.DEBUG&&!COMPILED&&(proto.proto.rpc.webrtc.v1.Request.displayName="proto.proto.rpc.webrtc.v1.Request"),proto.proto.rpc.webrtc.v1.RequestHeaders=function(e){r.Message.initialize(this,e,0,-1,null,null)},n.inherits(proto.proto.rpc.webrtc.v1.RequestHeaders,r.Message),n.DEBUG&&!COMPILED&&(proto.proto.rpc.webrtc.v1.RequestHeaders.displayName="proto.proto.rpc.webrtc.v1.RequestHeaders"),proto.proto.rpc.webrtc.v1.RequestMessage=function(e){r.Message.initialize(this,e,0,-1,null,null)},n.inherits(proto.proto.rpc.webrtc.v1.RequestMessage,r.Message),n.DEBUG&&!COMPILED&&(proto.proto.rpc.webrtc.v1.RequestMessage.displayName="proto.proto.rpc.webrtc.v1.RequestMessage"),proto.proto.rpc.webrtc.v1.Response=function(e){r.Message.initialize(this,e,0,-1,null,proto.proto.rpc.webrtc.v1.Response.oneofGroups_)},n.inherits(proto.proto.rpc.webrtc.v1.Response,r.Message),n.DEBUG&&!COMPILED&&(proto.proto.rpc.webrtc.v1.Response.displayName="proto.proto.rpc.webrtc.v1.Response"),proto.proto.rpc.webrtc.v1.ResponseHeaders=function(e){r.Message.initialize(this,e,0,-1,null,null)},n.inherits(proto.proto.rpc.webrtc.v1.ResponseHeaders,r.Message),n.DEBUG&&!COMPILED&&(proto.proto.rpc.webrtc.v1.ResponseHeaders.displayName="proto.proto.rpc.webrtc.v1.ResponseHeaders"),proto.proto.rpc.webrtc.v1.ResponseMessage=function(e){r.Message.initialize(this,e,0,-1,null,null)},n.inherits(proto.proto.rpc.webrtc.v1.ResponseMessage,r.Message),n.DEBUG&&!COMPILED&&(proto.proto.rpc.webrtc.v1.ResponseMessage.displayName="proto.proto.rpc.webrtc.v1.ResponseMessage"),proto.proto.rpc.webrtc.v1.ResponseTrailers=function(e){r.Message.initialize(this,e,0,-1,null,null)},n.inherits(proto.proto.rpc.webrtc.v1.ResponseTrailers,r.Message),n.DEBUG&&!COMPILED&&(proto.proto.rpc.webrtc.v1.ResponseTrailers.displayName="proto.proto.rpc.webrtc.v1.ResponseTrailers"),proto.proto.rpc.webrtc.v1.Strings=function(e){r.Message.initialize(this,e,0,-1,proto.proto.rpc.webrtc.v1.Strings.repeatedFields_,null)},n.inherits(proto.proto.rpc.webrtc.v1.Strings,r.Message),n.DEBUG&&!COMPILED&&(proto.proto.rpc.webrtc.v1.Strings.displayName="proto.proto.rpc.webrtc.v1.Strings"),proto.proto.rpc.webrtc.v1.Metadata=function(e){r.Message.initialize(this,e,0,-1,null,null)},n.inherits(proto.proto.rpc.webrtc.v1.Metadata,r.Message),n.DEBUG&&!COMPILED&&(proto.proto.rpc.webrtc.v1.Metadata.displayName="proto.proto.rpc.webrtc.v1.Metadata"),r.Message.GENERATE_TO_OBJECT&&(proto.proto.rpc.webrtc.v1.PacketMessage.prototype.toObject=function(e){return proto.proto.rpc.webrtc.v1.PacketMessage.toObject(e,this)},proto.proto.rpc.webrtc.v1.PacketMessage.toObject=function(e,t){var o={data:t.getData_asB64(),eom:r.Message.getBooleanFieldWithDefault(t,2,!1)};return e&&(o.$jspbMessageInstance=t),o}),proto.proto.rpc.webrtc.v1.PacketMessage.deserializeBinary=function(e){var t=new r.BinaryReader(e),o=new proto.proto.rpc.webrtc.v1.PacketMessage;return proto.proto.rpc.webrtc.v1.PacketMessage.deserializeBinaryFromReader(o,t)},proto.proto.rpc.webrtc.v1.PacketMessage.deserializeBinaryFromReader=function(e,t){for(;t.nextField()&&!t.isEndGroup();){switch(t.getFieldNumber()){case 1:var o=t.readBytes();e.setData(o);break;case 2:o=t.readBool();e.setEom(o);break;default:t.skipField()}}return e},proto.proto.rpc.webrtc.v1.PacketMessage.prototype.serializeBinary=function(){var e=new r.BinaryWriter;return proto.proto.rpc.webrtc.v1.PacketMessage.serializeBinaryToWriter(this,e),e.getResultBuffer()},proto.proto.rpc.webrtc.v1.PacketMessage.serializeBinaryToWriter=function(e,t){var o=void 0;(o=e.getData_asU8()).length>0&&t.writeBytes(1,o),(o=e.getEom())&&t.writeBool(2,o)},proto.proto.rpc.webrtc.v1.PacketMessage.prototype.getData=function(){return r.Message.getFieldWithDefault(this,1,"")},proto.proto.rpc.webrtc.v1.PacketMessage.prototype.getData_asB64=function(){return r.Message.bytesAsB64(this.getData())},proto.proto.rpc.webrtc.v1.PacketMessage.prototype.getData_asU8=function(){return r.Message.bytesAsU8(this.getData())},proto.proto.rpc.webrtc.v1.PacketMessage.prototype.setData=function(e){return r.Message.setProto3BytesField(this,1,e)},proto.proto.rpc.webrtc.v1.PacketMessage.prototype.getEom=function(){return r.Message.getBooleanFieldWithDefault(this,2,!1)},proto.proto.rpc.webrtc.v1.PacketMessage.prototype.setEom=function(e){return r.Message.setProto3BooleanField(this,2,e)},r.Message.GENERATE_TO_OBJECT&&(proto.proto.rpc.webrtc.v1.Stream.prototype.toObject=function(e){return proto.proto.rpc.webrtc.v1.Stream.toObject(e,this)},proto.proto.rpc.webrtc.v1.Stream.toObject=function(e,t){var o={id:r.Message.getFieldWithDefault(t,1,0)};return e&&(o.$jspbMessageInstance=t),o}),proto.proto.rpc.webrtc.v1.Stream.deserializeBinary=function(e){var t=new r.BinaryReader(e),o=new proto.proto.rpc.webrtc.v1.Stream;return proto.proto.rpc.webrtc.v1.Stream.deserializeBinaryFromReader(o,t)},proto.proto.rpc.webrtc.v1.Stream.deserializeBinaryFromReader=function(e,t){for(;t.nextField()&&!t.isEndGroup();){switch(t.getFieldNumber()){case 1:var o=t.readUint64();e.setId(o);break;default:t.skipField()}}return e},proto.proto.rpc.webrtc.v1.Stream.prototype.serializeBinary=function(){var e=new r.BinaryWriter;return proto.proto.rpc.webrtc.v1.Stream.serializeBinaryToWriter(this,e),e.getResultBuffer()},proto.proto.rpc.webrtc.v1.Stream.serializeBinaryToWriter=function(e,t){var o;0!==(o=e.getId())&&t.writeUint64(1,o)},proto.proto.rpc.webrtc.v1.Stream.prototype.getId=function(){return r.Message.getFieldWithDefault(this,1,0)},proto.proto.rpc.webrtc.v1.Stream.prototype.setId=function(e){return r.Message.setProto3IntField(this,1,e)},proto.proto.rpc.webrtc.v1.Request.oneofGroups_=[[2,3]],proto.proto.rpc.webrtc.v1.Request.TypeCase={TYPE_NOT_SET:0,HEADERS:2,MESSAGE:3},proto.proto.rpc.webrtc.v1.Request.prototype.getTypeCase=function(){return r.Message.computeOneofCase(this,proto.proto.rpc.webrtc.v1.Request.oneofGroups_[0])},r.Message.GENERATE_TO_OBJECT&&(proto.proto.rpc.webrtc.v1.Request.prototype.toObject=function(e){return proto.proto.rpc.webrtc.v1.Request.toObject(e,this)},proto.proto.rpc.webrtc.v1.Request.toObject=function(e,t){var o,r={stream:(o=t.getStream())&&proto.proto.rpc.webrtc.v1.Stream.toObject(e,o),headers:(o=t.getHeaders())&&proto.proto.rpc.webrtc.v1.RequestHeaders.toObject(e,o),message:(o=t.getMessage())&&proto.proto.rpc.webrtc.v1.RequestMessage.toObject(e,o)};return e&&(r.$jspbMessageInstance=t),r}),proto.proto.rpc.webrtc.v1.Request.deserializeBinary=function(e){var t=new r.BinaryReader(e),o=new proto.proto.rpc.webrtc.v1.Request;return proto.proto.rpc.webrtc.v1.Request.deserializeBinaryFromReader(o,t)},proto.proto.rpc.webrtc.v1.Request.deserializeBinaryFromReader=function(e,t){for(;t.nextField()&&!t.isEndGroup();){switch(t.getFieldNumber()){case 1:var o=new proto.proto.rpc.webrtc.v1.Stream;t.readMessage(o,proto.proto.rpc.webrtc.v1.Stream.deserializeBinaryFromReader),e.setStream(o);break;case 2:o=new proto.proto.rpc.webrtc.v1.RequestHeaders;t.readMessage(o,proto.proto.rpc.webrtc.v1.RequestHeaders.deserializeBinaryFromReader),e.setHeaders(o);break;case 3:o=new proto.proto.rpc.webrtc.v1.RequestMessage;t.readMessage(o,proto.proto.rpc.webrtc.v1.RequestMessage.deserializeBinaryFromReader),e.setMessage(o);break;default:t.skipField()}}return e},proto.proto.rpc.webrtc.v1.Request.prototype.serializeBinary=function(){var e=new r.BinaryWriter;return proto.proto.rpc.webrtc.v1.Request.serializeBinaryToWriter(this,e),e.getResultBuffer()},proto.proto.rpc.webrtc.v1.Request.serializeBinaryToWriter=function(e,t){var o=void 0;null!=(o=e.getStream())&&t.writeMessage(1,o,proto.proto.rpc.webrtc.v1.Stream.serializeBinaryToWriter),null!=(o=e.getHeaders())&&t.writeMessage(2,o,proto.proto.rpc.webrtc.v1.RequestHeaders.serializeBinaryToWriter),null!=(o=e.getMessage())&&t.writeMessage(3,o,proto.proto.rpc.webrtc.v1.RequestMessage.serializeBinaryToWriter)},proto.proto.rpc.webrtc.v1.Request.prototype.getStream=function(){return r.Message.getWrapperField(this,proto.proto.rpc.webrtc.v1.Stream,1)},proto.proto.rpc.webrtc.v1.Request.prototype.setStream=function(e){return r.Message.setWrapperField(this,1,e)},proto.proto.rpc.webrtc.v1.Request.prototype.clearStream=function(){return this.setStream(void 0)},proto.proto.rpc.webrtc.v1.Request.prototype.hasStream=function(){return null!=r.Message.getField(this,1)},proto.proto.rpc.webrtc.v1.Request.prototype.getHeaders=function(){return r.Message.getWrapperField(this,proto.proto.rpc.webrtc.v1.RequestHeaders,2)},proto.proto.rpc.webrtc.v1.Request.prototype.setHeaders=function(e){return r.Message.setOneofWrapperField(this,2,proto.proto.rpc.webrtc.v1.Request.oneofGroups_[0],e)},proto.proto.rpc.webrtc.v1.Request.prototype.clearHeaders=function(){return this.setHeaders(void 0)},proto.proto.rpc.webrtc.v1.Request.prototype.hasHeaders=function(){return null!=r.Message.getField(this,2)},proto.proto.rpc.webrtc.v1.Request.prototype.getMessage=function(){return r.Message.getWrapperField(this,proto.proto.rpc.webrtc.v1.RequestMessage,3)},proto.proto.rpc.webrtc.v1.Request.prototype.setMessage=function(e){return r.Message.setOneofWrapperField(this,3,proto.proto.rpc.webrtc.v1.Request.oneofGroups_[0],e)},proto.proto.rpc.webrtc.v1.Request.prototype.clearMessage=function(){return this.setMessage(void 0)},proto.proto.rpc.webrtc.v1.Request.prototype.hasMessage=function(){return null!=r.Message.getField(this,3)},r.Message.GENERATE_TO_OBJECT&&(proto.proto.rpc.webrtc.v1.RequestHeaders.prototype.toObject=function(e){return proto.proto.rpc.webrtc.v1.RequestHeaders.toObject(e,this)},proto.proto.rpc.webrtc.v1.RequestHeaders.toObject=function(e,t){var o,n={method:r.Message.getFieldWithDefault(t,1,""),metadata:(o=t.getMetadata())&&proto.proto.rpc.webrtc.v1.Metadata.toObject(e,o),timeout:(o=t.getTimeout())&&s.Duration.toObject(e,o)};return e&&(n.$jspbMessageInstance=t),n}),proto.proto.rpc.webrtc.v1.RequestHeaders.deserializeBinary=function(e){var t=new r.BinaryReader(e),o=new proto.proto.rpc.webrtc.v1.RequestHeaders;return proto.proto.rpc.webrtc.v1.RequestHeaders.deserializeBinaryFromReader(o,t)},proto.proto.rpc.webrtc.v1.RequestHeaders.deserializeBinaryFromReader=function(e,t){for(;t.nextField()&&!t.isEndGroup();){switch(t.getFieldNumber()){case 1:var o=t.readString();e.setMethod(o);break;case 2:o=new proto.proto.rpc.webrtc.v1.Metadata;t.readMessage(o,proto.proto.rpc.webrtc.v1.Metadata.deserializeBinaryFromReader),e.setMetadata(o);break;case 3:o=new s.Duration;t.readMessage(o,s.Duration.deserializeBinaryFromReader),e.setTimeout(o);break;default:t.skipField()}}return e},proto.proto.rpc.webrtc.v1.RequestHeaders.prototype.serializeBinary=function(){var e=new r.BinaryWriter;return proto.proto.rpc.webrtc.v1.RequestHeaders.serializeBinaryToWriter(this,e),e.getResultBuffer()},proto.proto.rpc.webrtc.v1.RequestHeaders.serializeBinaryToWriter=function(e,t){var o=void 0;(o=e.getMethod()).length>0&&t.writeString(1,o),null!=(o=e.getMetadata())&&t.writeMessage(2,o,proto.proto.rpc.webrtc.v1.Metadata.serializeBinaryToWriter),null!=(o=e.getTimeout())&&t.writeMessage(3,o,s.Duration.serializeBinaryToWriter)},proto.proto.rpc.webrtc.v1.RequestHeaders.prototype.getMethod=function(){return r.Message.getFieldWithDefault(this,1,"")},proto.proto.rpc.webrtc.v1.RequestHeaders.prototype.setMethod=function(e){return r.Message.setProto3StringField(this,1,e)},proto.proto.rpc.webrtc.v1.RequestHeaders.prototype.getMetadata=function(){return r.Message.getWrapperField(this,proto.proto.rpc.webrtc.v1.Metadata,2)},proto.proto.rpc.webrtc.v1.RequestHeaders.prototype.setMetadata=function(e){return r.Message.setWrapperField(this,2,e)},proto.proto.rpc.webrtc.v1.RequestHeaders.prototype.clearMetadata=function(){return this.setMetadata(void 0)},proto.proto.rpc.webrtc.v1.RequestHeaders.prototype.hasMetadata=function(){return null!=r.Message.getField(this,2)},proto.proto.rpc.webrtc.v1.RequestHeaders.prototype.getTimeout=function(){return r.Message.getWrapperField(this,s.Duration,3)},proto.proto.rpc.webrtc.v1.RequestHeaders.prototype.setTimeout=function(e){return r.Message.setWrapperField(this,3,e)},proto.proto.rpc.webrtc.v1.RequestHeaders.prototype.clearTimeout=function(){return this.setTimeout(void 0)},proto.proto.rpc.webrtc.v1.RequestHeaders.prototype.hasTimeout=function(){return null!=r.Message.getField(this,3)},r.Message.GENERATE_TO_OBJECT&&(proto.proto.rpc.webrtc.v1.RequestMessage.prototype.toObject=function(e){return proto.proto.rpc.webrtc.v1.RequestMessage.toObject(e,this)},proto.proto.rpc.webrtc.v1.RequestMessage.toObject=function(e,t){var o,n={hasMessage:r.Message.getBooleanFieldWithDefault(t,1,!1),packetMessage:(o=t.getPacketMessage())&&proto.proto.rpc.webrtc.v1.PacketMessage.toObject(e,o),eos:r.Message.getBooleanFieldWithDefault(t,3,!1)};return e&&(n.$jspbMessageInstance=t),n}),proto.proto.rpc.webrtc.v1.RequestMessage.deserializeBinary=function(e){var t=new r.BinaryReader(e),o=new proto.proto.rpc.webrtc.v1.RequestMessage;return proto.proto.rpc.webrtc.v1.RequestMessage.deserializeBinaryFromReader(o,t)},proto.proto.rpc.webrtc.v1.RequestMessage.deserializeBinaryFromReader=function(e,t){for(;t.nextField()&&!t.isEndGroup();){switch(t.getFieldNumber()){case 1:var o=t.readBool();e.setHasMessage(o);break;case 2:o=new proto.proto.rpc.webrtc.v1.PacketMessage;t.readMessage(o,proto.proto.rpc.webrtc.v1.PacketMessage.deserializeBinaryFromReader),e.setPacketMessage(o);break;case 3:o=t.readBool();e.setEos(o);break;default:t.skipField()}}return e},proto.proto.rpc.webrtc.v1.RequestMessage.prototype.serializeBinary=function(){var e=new r.BinaryWriter;return proto.proto.rpc.webrtc.v1.RequestMessage.serializeBinaryToWriter(this,e),e.getResultBuffer()},proto.proto.rpc.webrtc.v1.RequestMessage.serializeBinaryToWriter=function(e,t){var o=void 0;(o=e.getHasMessage())&&t.writeBool(1,o),null!=(o=e.getPacketMessage())&&t.writeMessage(2,o,proto.proto.rpc.webrtc.v1.PacketMessage.serializeBinaryToWriter),(o=e.getEos())&&t.writeBool(3,o)},proto.proto.rpc.webrtc.v1.RequestMessage.prototype.getHasMessage=function(){return r.Message.getBooleanFieldWithDefault(this,1,!1)},proto.proto.rpc.webrtc.v1.RequestMessage.prototype.setHasMessage=function(e){return r.Message.setProto3BooleanField(this,1,e)},proto.proto.rpc.webrtc.v1.RequestMessage.prototype.getPacketMessage=function(){return r.Message.getWrapperField(this,proto.proto.rpc.webrtc.v1.PacketMessage,2)},proto.proto.rpc.webrtc.v1.RequestMessage.prototype.setPacketMessage=function(e){return r.Message.setWrapperField(this,2,e)},proto.proto.rpc.webrtc.v1.RequestMessage.prototype.clearPacketMessage=function(){return this.setPacketMessage(void 0)},proto.proto.rpc.webrtc.v1.RequestMessage.prototype.hasPacketMessage=function(){return null!=r.Message.getField(this,2)},proto.proto.rpc.webrtc.v1.RequestMessage.prototype.getEos=function(){return r.Message.getBooleanFieldWithDefault(this,3,!1)},proto.proto.rpc.webrtc.v1.RequestMessage.prototype.setEos=function(e){return r.Message.setProto3BooleanField(this,3,e)},proto.proto.rpc.webrtc.v1.Response.oneofGroups_=[[2,3,4]],proto.proto.rpc.webrtc.v1.Response.TypeCase={TYPE_NOT_SET:0,HEADERS:2,MESSAGE:3,TRAILERS:4},proto.proto.rpc.webrtc.v1.Response.prototype.getTypeCase=function(){return r.Message.computeOneofCase(this,proto.proto.rpc.webrtc.v1.Response.oneofGroups_[0])},r.Message.GENERATE_TO_OBJECT&&(proto.proto.rpc.webrtc.v1.Response.prototype.toObject=function(e){return proto.proto.rpc.webrtc.v1.Response.toObject(e,this)},proto.proto.rpc.webrtc.v1.Response.toObject=function(e,t){var o,r={stream:(o=t.getStream())&&proto.proto.rpc.webrtc.v1.Stream.toObject(e,o),headers:(o=t.getHeaders())&&proto.proto.rpc.webrtc.v1.ResponseHeaders.toObject(e,o),message:(o=t.getMessage())&&proto.proto.rpc.webrtc.v1.ResponseMessage.toObject(e,o),trailers:(o=t.getTrailers())&&proto.proto.rpc.webrtc.v1.ResponseTrailers.toObject(e,o)};return e&&(r.$jspbMessageInstance=t),r}),proto.proto.rpc.webrtc.v1.Response.deserializeBinary=function(e){var t=new r.BinaryReader(e),o=new proto.proto.rpc.webrtc.v1.Response;return proto.proto.rpc.webrtc.v1.Response.deserializeBinaryFromReader(o,t)},proto.proto.rpc.webrtc.v1.Response.deserializeBinaryFromReader=function(e,t){for(;t.nextField()&&!t.isEndGroup();){switch(t.getFieldNumber()){case 1:var o=new proto.proto.rpc.webrtc.v1.Stream;t.readMessage(o,proto.proto.rpc.webrtc.v1.Stream.deserializeBinaryFromReader),e.setStream(o);break;case 2:o=new proto.proto.rpc.webrtc.v1.ResponseHeaders;t.readMessage(o,proto.proto.rpc.webrtc.v1.ResponseHeaders.deserializeBinaryFromReader),e.setHeaders(o);break;case 3:o=new proto.proto.rpc.webrtc.v1.ResponseMessage;t.readMessage(o,proto.proto.rpc.webrtc.v1.ResponseMessage.deserializeBinaryFromReader),e.setMessage(o);break;case 4:o=new proto.proto.rpc.webrtc.v1.ResponseTrailers;t.readMessage(o,proto.proto.rpc.webrtc.v1.ResponseTrailers.deserializeBinaryFromReader),e.setTrailers(o);break;default:t.skipField()}}return e},proto.proto.rpc.webrtc.v1.Response.prototype.serializeBinary=function(){var e=new r.BinaryWriter;return proto.proto.rpc.webrtc.v1.Response.serializeBinaryToWriter(this,e),e.getResultBuffer()},proto.proto.rpc.webrtc.v1.Response.serializeBinaryToWriter=function(e,t){var o=void 0;null!=(o=e.getStream())&&t.writeMessage(1,o,proto.proto.rpc.webrtc.v1.Stream.serializeBinaryToWriter),null!=(o=e.getHeaders())&&t.writeMessage(2,o,proto.proto.rpc.webrtc.v1.ResponseHeaders.serializeBinaryToWriter),null!=(o=e.getMessage())&&t.writeMessage(3,o,proto.proto.rpc.webrtc.v1.ResponseMessage.serializeBinaryToWriter),null!=(o=e.getTrailers())&&t.writeMessage(4,o,proto.proto.rpc.webrtc.v1.ResponseTrailers.serializeBinaryToWriter)},proto.proto.rpc.webrtc.v1.Response.prototype.getStream=function(){return r.Message.getWrapperField(this,proto.proto.rpc.webrtc.v1.Stream,1)},proto.proto.rpc.webrtc.v1.Response.prototype.setStream=function(e){return r.Message.setWrapperField(this,1,e)},proto.proto.rpc.webrtc.v1.Response.prototype.clearStream=function(){return this.setStream(void 0)},proto.proto.rpc.webrtc.v1.Response.prototype.hasStream=function(){return null!=r.Message.getField(this,1)},proto.proto.rpc.webrtc.v1.Response.prototype.getHeaders=function(){return r.Message.getWrapperField(this,proto.proto.rpc.webrtc.v1.ResponseHeaders,2)},proto.proto.rpc.webrtc.v1.Response.prototype.setHeaders=function(e){return r.Message.setOneofWrapperField(this,2,proto.proto.rpc.webrtc.v1.Response.oneofGroups_[0],e)},proto.proto.rpc.webrtc.v1.Response.prototype.clearHeaders=function(){return this.setHeaders(void 0)},proto.proto.rpc.webrtc.v1.Response.prototype.hasHeaders=function(){return null!=r.Message.getField(this,2)},proto.proto.rpc.webrtc.v1.Response.prototype.getMessage=function(){return r.Message.getWrapperField(this,proto.proto.rpc.webrtc.v1.ResponseMessage,3)},proto.proto.rpc.webrtc.v1.Response.prototype.setMessage=function(e){return r.Message.setOneofWrapperField(this,3,proto.proto.rpc.webrtc.v1.Response.oneofGroups_[0],e)},proto.proto.rpc.webrtc.v1.Response.prototype.clearMessage=function(){return this.setMessage(void 0)},proto.proto.rpc.webrtc.v1.Response.prototype.hasMessage=function(){return null!=r.Message.getField(this,3)},proto.proto.rpc.webrtc.v1.Response.prototype.getTrailers=function(){return r.Message.getWrapperField(this,proto.proto.rpc.webrtc.v1.ResponseTrailers,4)},proto.proto.rpc.webrtc.v1.Response.prototype.setTrailers=function(e){return r.Message.setOneofWrapperField(this,4,proto.proto.rpc.webrtc.v1.Response.oneofGroups_[0],e)},proto.proto.rpc.webrtc.v1.Response.prototype.clearTrailers=function(){return this.setTrailers(void 0)},proto.proto.rpc.webrtc.v1.Response.prototype.hasTrailers=function(){return null!=r.Message.getField(this,4)},r.Message.GENERATE_TO_OBJECT&&(proto.proto.rpc.webrtc.v1.ResponseHeaders.prototype.toObject=function(e){return proto.proto.rpc.webrtc.v1.ResponseHeaders.toObject(e,this)},proto.proto.rpc.webrtc.v1.ResponseHeaders.toObject=function(e,t){var o,r={metadata:(o=t.getMetadata())&&proto.proto.rpc.webrtc.v1.Metadata.toObject(e,o)};return e&&(r.$jspbMessageInstance=t),r}),proto.proto.rpc.webrtc.v1.ResponseHeaders.deserializeBinary=function(e){var t=new r.BinaryReader(e),o=new proto.proto.rpc.webrtc.v1.ResponseHeaders;return proto.proto.rpc.webrtc.v1.ResponseHeaders.deserializeBinaryFromReader(o,t)},proto.proto.rpc.webrtc.v1.ResponseHeaders.deserializeBinaryFromReader=function(e,t){for(;t.nextField()&&!t.isEndGroup();){switch(t.getFieldNumber()){case 1:var o=new proto.proto.rpc.webrtc.v1.Metadata;t.readMessage(o,proto.proto.rpc.webrtc.v1.Metadata.deserializeBinaryFromReader),e.setMetadata(o);break;default:t.skipField()}}return e},proto.proto.rpc.webrtc.v1.ResponseHeaders.prototype.serializeBinary=function(){var e=new r.BinaryWriter;return proto.proto.rpc.webrtc.v1.ResponseHeaders.serializeBinaryToWriter(this,e),e.getResultBuffer()},proto.proto.rpc.webrtc.v1.ResponseHeaders.serializeBinaryToWriter=function(e,t){var o;null!=(o=e.getMetadata())&&t.writeMessage(1,o,proto.proto.rpc.webrtc.v1.Metadata.serializeBinaryToWriter)},proto.proto.rpc.webrtc.v1.ResponseHeaders.prototype.getMetadata=function(){return r.Message.getWrapperField(this,proto.proto.rpc.webrtc.v1.Metadata,1)},proto.proto.rpc.webrtc.v1.ResponseHeaders.prototype.setMetadata=function(e){return r.Message.setWrapperField(this,1,e)},proto.proto.rpc.webrtc.v1.ResponseHeaders.prototype.clearMetadata=function(){return this.setMetadata(void 0)},proto.proto.rpc.webrtc.v1.ResponseHeaders.prototype.hasMetadata=function(){return null!=r.Message.getField(this,1)},r.Message.GENERATE_TO_OBJECT&&(proto.proto.rpc.webrtc.v1.ResponseMessage.prototype.toObject=function(e){return proto.proto.rpc.webrtc.v1.ResponseMessage.toObject(e,this)},proto.proto.rpc.webrtc.v1.ResponseMessage.toObject=function(e,t){var o,r={packetMessage:(o=t.getPacketMessage())&&proto.proto.rpc.webrtc.v1.PacketMessage.toObject(e,o)};return e&&(r.$jspbMessageInstance=t),r}),proto.proto.rpc.webrtc.v1.ResponseMessage.deserializeBinary=function(e){var t=new r.BinaryReader(e),o=new proto.proto.rpc.webrtc.v1.ResponseMessage;return proto.proto.rpc.webrtc.v1.ResponseMessage.deserializeBinaryFromReader(o,t)},proto.proto.rpc.webrtc.v1.ResponseMessage.deserializeBinaryFromReader=function(e,t){for(;t.nextField()&&!t.isEndGroup();){switch(t.getFieldNumber()){case 1:var o=new proto.proto.rpc.webrtc.v1.PacketMessage;t.readMessage(o,proto.proto.rpc.webrtc.v1.PacketMessage.deserializeBinaryFromReader),e.setPacketMessage(o);break;default:t.skipField()}}return e},proto.proto.rpc.webrtc.v1.ResponseMessage.prototype.serializeBinary=function(){var e=new r.BinaryWriter;return proto.proto.rpc.webrtc.v1.ResponseMessage.serializeBinaryToWriter(this,e),e.getResultBuffer()},proto.proto.rpc.webrtc.v1.ResponseMessage.serializeBinaryToWriter=function(e,t){var o;null!=(o=e.getPacketMessage())&&t.writeMessage(1,o,proto.proto.rpc.webrtc.v1.PacketMessage.serializeBinaryToWriter)},proto.proto.rpc.webrtc.v1.ResponseMessage.prototype.getPacketMessage=function(){return r.Message.getWrapperField(this,proto.proto.rpc.webrtc.v1.PacketMessage,1)},proto.proto.rpc.webrtc.v1.ResponseMessage.prototype.setPacketMessage=function(e){return r.Message.setWrapperField(this,1,e)},proto.proto.rpc.webrtc.v1.ResponseMessage.prototype.clearPacketMessage=function(){return this.setPacketMessage(void 0)},proto.proto.rpc.webrtc.v1.ResponseMessage.prototype.hasPacketMessage=function(){return null!=r.Message.getField(this,1)},r.Message.GENERATE_TO_OBJECT&&(proto.proto.rpc.webrtc.v1.ResponseTrailers.prototype.toObject=function(e){return proto.proto.rpc.webrtc.v1.ResponseTrailers.toObject(e,this)},proto.proto.rpc.webrtc.v1.ResponseTrailers.toObject=function(e,t){var o,r={status:(o=t.getStatus())&&a.Status.toObject(e,o),metadata:(o=t.getMetadata())&&proto.proto.rpc.webrtc.v1.Metadata.toObject(e,o)};return e&&(r.$jspbMessageInstance=t),r}),proto.proto.rpc.webrtc.v1.ResponseTrailers.deserializeBinary=function(e){var t=new r.BinaryReader(e),o=new proto.proto.rpc.webrtc.v1.ResponseTrailers;return proto.proto.rpc.webrtc.v1.ResponseTrailers.deserializeBinaryFromReader(o,t)},proto.proto.rpc.webrtc.v1.ResponseTrailers.deserializeBinaryFromReader=function(e,t){for(;t.nextField()&&!t.isEndGroup();){switch(t.getFieldNumber()){case 1:var o=new a.Status;t.readMessage(o,a.Status.deserializeBinaryFromReader),e.setStatus(o);break;case 2:o=new proto.proto.rpc.webrtc.v1.Metadata;t.readMessage(o,proto.proto.rpc.webrtc.v1.Metadata.deserializeBinaryFromReader),e.setMetadata(o);break;default:t.skipField()}}return e},proto.proto.rpc.webrtc.v1.ResponseTrailers.prototype.serializeBinary=function(){var e=new r.BinaryWriter;return proto.proto.rpc.webrtc.v1.ResponseTrailers.serializeBinaryToWriter(this,e),e.getResultBuffer()},proto.proto.rpc.webrtc.v1.ResponseTrailers.serializeBinaryToWriter=function(e,t){var o=void 0;null!=(o=e.getStatus())&&t.writeMessage(1,o,a.Status.serializeBinaryToWriter),null!=(o=e.getMetadata())&&t.writeMessage(2,o,proto.proto.rpc.webrtc.v1.Metadata.serializeBinaryToWriter)},proto.proto.rpc.webrtc.v1.ResponseTrailers.prototype.getStatus=function(){return r.Message.getWrapperField(this,a.Status,1)},proto.proto.rpc.webrtc.v1.ResponseTrailers.prototype.setStatus=function(e){return r.Message.setWrapperField(this,1,e)},proto.proto.rpc.webrtc.v1.ResponseTrailers.prototype.clearStatus=function(){return this.setStatus(void 0)},proto.proto.rpc.webrtc.v1.ResponseTrailers.prototype.hasStatus=function(){return null!=r.Message.getField(this,1)},proto.proto.rpc.webrtc.v1.ResponseTrailers.prototype.getMetadata=function(){return r.Message.getWrapperField(this,proto.proto.rpc.webrtc.v1.Metadata,2)},proto.proto.rpc.webrtc.v1.ResponseTrailers.prototype.setMetadata=function(e){return r.Message.setWrapperField(this,2,e)},proto.proto.rpc.webrtc.v1.ResponseTrailers.prototype.clearMetadata=function(){return this.setMetadata(void 0)},proto.proto.rpc.webrtc.v1.ResponseTrailers.prototype.hasMetadata=function(){return null!=r.Message.getField(this,2)},proto.proto.rpc.webrtc.v1.Strings.repeatedFields_=[1],r.Message.GENERATE_TO_OBJECT&&(proto.proto.rpc.webrtc.v1.Strings.prototype.toObject=function(e){return proto.proto.rpc.webrtc.v1.Strings.toObject(e,this)},proto.proto.rpc.webrtc.v1.Strings.toObject=function(e,t){var o,n={valuesList:null==(o=r.Message.getRepeatedField(t,1))?void 0:o};return e&&(n.$jspbMessageInstance=t),n}),proto.proto.rpc.webrtc.v1.Strings.deserializeBinary=function(e){var t=new r.BinaryReader(e),o=new proto.proto.rpc.webrtc.v1.Strings;return proto.proto.rpc.webrtc.v1.Strings.deserializeBinaryFromReader(o,t)},proto.proto.rpc.webrtc.v1.Strings.deserializeBinaryFromReader=function(e,t){for(;t.nextField()&&!t.isEndGroup();){switch(t.getFieldNumber()){case 1:var o=t.readString();e.addValues(o);break;default:t.skipField()}}return e},proto.proto.rpc.webrtc.v1.Strings.prototype.serializeBinary=function(){var e=new r.BinaryWriter;return proto.proto.rpc.webrtc.v1.Strings.serializeBinaryToWriter(this,e),e.getResultBuffer()},proto.proto.rpc.webrtc.v1.Strings.serializeBinaryToWriter=function(e,t){var o;(o=e.getValuesList()).length>0&&t.writeRepeatedString(1,o)},proto.proto.rpc.webrtc.v1.Strings.prototype.getValuesList=function(){return r.Message.getRepeatedField(this,1)},proto.proto.rpc.webrtc.v1.Strings.prototype.setValuesList=function(e){return r.Message.setField(this,1,e||[])},proto.proto.rpc.webrtc.v1.Strings.prototype.addValues=function(e,t){return r.Message.addToRepeatedField(this,1,e,t)},proto.proto.rpc.webrtc.v1.Strings.prototype.clearValuesList=function(){return this.setValuesList([])},r.Message.GENERATE_TO_OBJECT&&(proto.proto.rpc.webrtc.v1.Metadata.prototype.toObject=function(e){return proto.proto.rpc.webrtc.v1.Metadata.toObject(e,this)},proto.proto.rpc.webrtc.v1.Metadata.toObject=function(e,t){var o,r={mdMap:(o=t.getMdMap())?o.toObject(e,proto.proto.rpc.webrtc.v1.Strings.toObject):[]};return e&&(r.$jspbMessageInstance=t),r}),proto.proto.rpc.webrtc.v1.Metadata.deserializeBinary=function(e){var t=new r.BinaryReader(e),o=new proto.proto.rpc.webrtc.v1.Metadata;return proto.proto.rpc.webrtc.v1.Metadata.deserializeBinaryFromReader(o,t)},proto.proto.rpc.webrtc.v1.Metadata.deserializeBinaryFromReader=function(e,t){for(;t.nextField()&&!t.isEndGroup();){switch(t.getFieldNumber()){case 1:var o=e.getMdMap();t.readMessage(o,(function(e,t){r.Map.deserializeBinary(e,t,r.BinaryReader.prototype.readString,r.BinaryReader.prototype.readMessage,proto.proto.rpc.webrtc.v1.Strings.deserializeBinaryFromReader,"",new proto.proto.rpc.webrtc.v1.Strings)}));break;default:t.skipField()}}return e},proto.proto.rpc.webrtc.v1.Metadata.prototype.serializeBinary=function(){var e=new r.BinaryWriter;return proto.proto.rpc.webrtc.v1.Metadata.serializeBinaryToWriter(this,e),e.getResultBuffer()},proto.proto.rpc.webrtc.v1.Metadata.serializeBinaryToWriter=function(e,t){var o=void 0;(o=e.getMdMap(!0))&&o.getLength()>0&&o.serializeBinary(1,t,r.BinaryWriter.prototype.writeString,r.BinaryWriter.prototype.writeMessage,proto.proto.rpc.webrtc.v1.Strings.serializeBinaryToWriter)},proto.proto.rpc.webrtc.v1.Metadata.prototype.getMdMap=function(e){return r.Message.getMapField(this,1,e,proto.proto.rpc.webrtc.v1.Strings)},proto.proto.rpc.webrtc.v1.Metadata.prototype.clearMdMap=function(){return this.getMdMap().clear(),this},n.object.extend(t,proto.proto.rpc.webrtc.v1)},function(e,t,o){"use strict";var r=this&&this.__awaiter||function(e,t,o,r){return new(o||(o=Promise))((function(n,i){function s(e){try{g(r.next(e))}catch(e){i(e)}}function a(e){try{g(r.throw(e))}catch(e){i(e)}}function g(e){var t;e.done?n(e.value):(t=e.value,t instanceof o?t:new o((function(e){e(t)}))).then(s,a)}g((r=r.apply(e,t||[])).next())}))},n=this&&this.__generator||function(e,t){var o,r,n,i,s={label:0,sent:function(){if(1&n[0])throw n[1];return n[1]},trys:[],ops:[]};return i={next:a(0),throw:a(1),return:a(2)},"function"==typeof Symbol&&(i[Symbol.iterator]=function(){return this}),i;function a(i){return function(a){return function(i){if(o)throw new TypeError("Generator is already executing.");for(;s;)try{if(o=1,r&&(n=2&i[0]?r.return:i[0]?r.throw||((n=r.return)&&n.call(r),0):r.next)&&!(n=n.call(r,i[1])).done)return n;switch(r=0,n&&(i=[2&i[0],n.value]),i[0]){case 0:case 1:n=i;break;case 4:return s.label++,{value:i[1],done:!1};case 5:s.label++,r=i[1],i=[0];continue;case 7:i=s.ops.pop(),s.trys.pop();continue;default:if(!(n=s.trys,(n=n.length>0&&n[n.length-1])||6!==i[0]&&2!==i[0])){s=0;continue}if(3===i[0]&&(!n||i[1]>n[0]&&i[1]<n[3])){s.label=i[1];break}if(6===i[0]&&s.label<n[1]){s.label=n[1],n=i;break}if(n&&s.label<n[2]){s.label=n[2],s.ops.push(i);break}n[2]&&s.ops.pop(),s.trys.pop();continue}i=t.call(e,s)}catch(e){i=[6,e],r=0}finally{o=n=0}if(5&i[0])throw i[1];return{value:i[0]?i[1]:void 0,done:!0}}([i,a])}}};Object.defineProperty(t,"__esModule",{value:!0});var i=o(2),s=o(15),a=o(16),g="http://"+window.location.host;function p(e){return r(this,void 0,void 0,(function(){var t,o,r,s,a,g,p,l,u;return n(this,(function(n){switch(n.label){case 0:return(t=new i.EchoRequest).setMessage("hello"),s=new Promise((function(e,t){o=e,r=t})),e.echo(t,(function(e,t){if(e)return console.error(e),void r(e);console.log(t.toObject()),o(t)})),[4,s];case 1:return n.sent(),(a=new i.EchoMultipleRequest).setMessage("hello?"),s=new Promise((function(e,t){o=e,r=t})),(g=e.echoMultiple(a)).on("data",(function(e){console.log(e.toObject())})),g.on("end",(function(e){var t=e.code,n=e.details;if(0!==t)return console.log(t),console.log(n),void r(t);o(void 0)})),[4,s];case 2:return n.sent(),p=e.echoBiDi(),(l=new i.EchoBiDiRequest).setMessage("one"),s=new Promise((function(e,t){o=e,r=t})),u=0,p.on("data",(function(e){u++,console.log(e.toObject()),3==u&&o(void 0)})),p.on("end",(function(e){var t=e.code,o=e.details;if(0!==t)return console.log(t),console.log(o),void r(t)})),p.write(l),[4,s];case 3:return n.sent(),s=new Promise((function(e,t){o=e,r=t})),u=0,(l=new i.EchoBiDiRequest).setMessage("two"),p.write(l),[4,s];case 4:return n.sent(),p.end(),[2]}}))}))}a.dial(g,"local").then((function(e){return r(void 0,void 0,void 0,(function(){return n(this,(function(t){switch(t.label){case 0:return console.log("WebRTC"),[4,p(new s.EchoServiceClient("local",{transport:e.transportFactory()}))];case 1:return t.sent(),console.log("Direct"),[4,p(new s.EchoServiceClient(g))];case 2:return t.sent(),[2]}}))}))})).catch((function(e){return console.error(e)}))},function(e,t,o){"use strict";(function(e){
/*!
 * The buffer module from node.js, for the browser.
 *
 * @author   Feross Aboukhadijeh <http://feross.org>
 * @license  MIT
 */
var r=o(10),n=o(11),i=o(12);function s(){return g.TYPED_ARRAY_SUPPORT?2147483647:1073741823}function a(e,t){if(s()<t)throw new RangeError("Invalid typed array length");return g.TYPED_ARRAY_SUPPORT?(e=new Uint8Array(t)).__proto__=g.prototype:(null===e&&(e=new g(t)),e.length=t),e}function g(e,t,o){if(!(g.TYPED_ARRAY_SUPPORT||this instanceof g))return new g(e,t,o);if("number"==typeof e){if("string"==typeof t)throw new Error("If encoding is specified then the first argument must be a string");return u(this,e)}return p(this,e,t,o)}function p(e,t,o,r){if("number"==typeof t)throw new TypeError('"value" argument must not be a number');return"undefined"!=typeof ArrayBuffer&&t instanceof ArrayBuffer?function(e,t,o,r){if(t.byteLength,o<0||t.byteLength<o)throw new RangeError("'offset' is out of bounds");if(t.byteLength<o+(r||0))throw new RangeError("'length' is out of bounds");t=void 0===o&&void 0===r?new Uint8Array(t):void 0===r?new Uint8Array(t,o):new Uint8Array(t,o,r);g.TYPED_ARRAY_SUPPORT?(e=t).__proto__=g.prototype:e=c(e,t);return e}(e,t,o,r):"string"==typeof t?function(e,t,o){"string"==typeof o&&""!==o||(o="utf8");if(!g.isEncoding(o))throw new TypeError('"encoding" must be a valid string encoding');var r=0|f(t,o),n=(e=a(e,r)).write(t,o);n!==r&&(e=e.slice(0,n));return e}(e,t,o):function(e,t){if(g.isBuffer(t)){var o=0|d(t.length);return 0===(e=a(e,o)).length||t.copy(e,0,0,o),e}if(t){if("undefined"!=typeof ArrayBuffer&&t.buffer instanceof ArrayBuffer||"length"in t)return"number"!=typeof t.length||(r=t.length)!=r?a(e,0):c(e,t);if("Buffer"===t.type&&i(t.data))return c(e,t.data)}var r;throw new TypeError("First argument must be a string, Buffer, ArrayBuffer, Array, or array-like object.")}(e,t)}function l(e){if("number"!=typeof e)throw new TypeError('"size" argument must be a number');if(e<0)throw new RangeError('"size" argument must not be negative')}function u(e,t){if(l(t),e=a(e,t<0?0:0|d(t)),!g.TYPED_ARRAY_SUPPORT)for(var o=0;o<t;++o)e[o]=0;return e}function c(e,t){var o=t.length<0?0:0|d(t.length);e=a(e,o);for(var r=0;r<o;r+=1)e[r]=255&t[r];return e}function d(e){if(e>=s())throw new RangeError("Attempt to allocate Buffer larger than maximum size: 0x"+s().toString(16)+" bytes");return 0|e}function f(e,t){if(g.isBuffer(e))return e.length;if("undefined"!=typeof ArrayBuffer&&"function"==typeof ArrayBuffer.isView&&(ArrayBuffer.isView(e)||e instanceof ArrayBuffer))return e.byteLength;"string"!=typeof e&&(e=""+e);var o=e.length;if(0===o)return 0;for(var r=!1;;)switch(t){case"ascii":case"latin1":case"binary":return o;case"utf8":case"utf-8":case void 0:return x(e).length;case"ucs2":case"ucs-2":case"utf16le":case"utf-16le":return 2*o;case"hex":return o>>>1;case"base64":return H(e).length;default:if(r)return x(e).length;t=(""+t).toLowerCase(),r=!0}}function h(e,t,o){var r=!1;if((void 0===t||t<0)&&(t=0),t>this.length)return"";if((void 0===o||o>this.length)&&(o=this.length),o<=0)return"";if((o>>>=0)<=(t>>>=0))return"";for(e||(e="utf8");;)switch(e){case"hex":return A(this,t,o);case"utf8":case"utf-8":return R(this,t,o);case"ascii":return w(this,t,o);case"latin1":case"binary":return F(this,t,o);case"base64":return T(this,t,o);case"ucs2":case"ucs-2":case"utf16le":case"utf-16le":return D(this,t,o);default:if(r)throw new TypeError("Unknown encoding: "+e);e=(e+"").toLowerCase(),r=!0}}function b(e,t,o){var r=e[t];e[t]=e[o],e[o]=r}function y(e,t,o,r,n){if(0===e.length)return-1;if("string"==typeof o?(r=o,o=0):o>2147483647?o=2147483647:o<-2147483648&&(o=-2147483648),o=+o,isNaN(o)&&(o=n?0:e.length-1),o<0&&(o=e.length+o),o>=e.length){if(n)return-1;o=e.length-1}else if(o<0){if(!n)return-1;o=0}if("string"==typeof t&&(t=g.from(t,r)),g.isBuffer(t))return 0===t.length?-1:m(e,t,o,r,n);if("number"==typeof t)return t&=255,g.TYPED_ARRAY_SUPPORT&&"function"==typeof Uint8Array.prototype.indexOf?n?Uint8Array.prototype.indexOf.call(e,t,o):Uint8Array.prototype.lastIndexOf.call(e,t,o):m(e,[t],o,r,n);throw new TypeError("val must be string, number or Buffer")}function m(e,t,o,r,n){var i,s=1,a=e.length,g=t.length;if(void 0!==r&&("ucs2"===(r=String(r).toLowerCase())||"ucs-2"===r||"utf16le"===r||"utf-16le"===r)){if(e.length<2||t.length<2)return-1;s=2,a/=2,g/=2,o/=2}function p(e,t){return 1===s?e[t]:e.readUInt16BE(t*s)}if(n){var l=-1;for(i=o;i<a;i++)if(p(e,i)===p(t,-1===l?0:i-l)){if(-1===l&&(l=i),i-l+1===g)return l*s}else-1!==l&&(i-=i-l),l=-1}else for(o+g>a&&(o=a-g),i=o;i>=0;i--){for(var u=!0,c=0;c<g;c++)if(p(e,i+c)!==p(t,c)){u=!1;break}if(u)return i}return-1}function E(e,t,o,r){o=Number(o)||0;var n=e.length-o;r?(r=Number(r))>n&&(r=n):r=n;var i=t.length;if(i%2!=0)throw new TypeError("Invalid hex string");r>i/2&&(r=i/2);for(var s=0;s<r;++s){var a=parseInt(t.substr(2*s,2),16);if(isNaN(a))return s;e[o+s]=a}return s}function _(e,t,o,r){return k(x(t,e.length-o),e,o,r)}function S(e,t,o,r){return k(function(e){for(var t=[],o=0;o<e.length;++o)t.push(255&e.charCodeAt(o));return t}(t),e,o,r)}function M(e,t,o,r){return S(e,t,o,r)}function v(e,t,o,r){return k(H(t),e,o,r)}function O(e,t,o,r){return k(function(e,t){for(var o,r,n,i=[],s=0;s<e.length&&!((t-=2)<0);++s)o=e.charCodeAt(s),r=o>>8,n=o%256,i.push(n),i.push(r);return i}(t,e.length-o),e,o,r)}function T(e,t,o){return 0===t&&o===e.length?r.fromByteArray(e):r.fromByteArray(e.slice(t,o))}function R(e,t,o){o=Math.min(e.length,o);for(var r=[],n=t;n<o;){var i,s,a,g,p=e[n],l=null,u=p>239?4:p>223?3:p>191?2:1;if(n+u<=o)switch(u){case 1:p<128&&(l=p);break;case 2:128==(192&(i=e[n+1]))&&(g=(31&p)<<6|63&i)>127&&(l=g);break;case 3:i=e[n+1],s=e[n+2],128==(192&i)&&128==(192&s)&&(g=(15&p)<<12|(63&i)<<6|63&s)>2047&&(g<55296||g>57343)&&(l=g);break;case 4:i=e[n+1],s=e[n+2],a=e[n+3],128==(192&i)&&128==(192&s)&&128==(192&a)&&(g=(15&p)<<18|(63&i)<<12|(63&s)<<6|63&a)>65535&&g<1114112&&(l=g)}null===l?(l=65533,u=1):l>65535&&(l-=65536,r.push(l>>>10&1023|55296),l=56320|1023&l),r.push(l),n+=u}return function(e){var t=e.length;if(t<=4096)return String.fromCharCode.apply(String,e);var o="",r=0;for(;r<t;)o+=String.fromCharCode.apply(String,e.slice(r,r+=4096));return o}(r)}t.Buffer=g,t.SlowBuffer=function(e){+e!=e&&(e=0);return g.alloc(+e)},t.INSPECT_MAX_BYTES=50,g.TYPED_ARRAY_SUPPORT=void 0!==e.TYPED_ARRAY_SUPPORT?e.TYPED_ARRAY_SUPPORT:function(){try{var e=new Uint8Array(1);return e.__proto__={__proto__:Uint8Array.prototype,foo:function(){return 42}},42===e.foo()&&"function"==typeof e.subarray&&0===e.subarray(1,1).byteLength}catch(e){return!1}}(),t.kMaxLength=s(),g.poolSize=8192,g._augment=function(e){return e.__proto__=g.prototype,e},g.from=function(e,t,o){return p(null,e,t,o)},g.TYPED_ARRAY_SUPPORT&&(g.prototype.__proto__=Uint8Array.prototype,g.__proto__=Uint8Array,"undefined"!=typeof Symbol&&Symbol.species&&g[Symbol.species]===g&&Object.defineProperty(g,Symbol.species,{value:null,configurable:!0})),g.alloc=function(e,t,o){return function(e,t,o,r){return l(t),t<=0?a(e,t):void 0!==o?"string"==typeof r?a(e,t).fill(o,r):a(e,t).fill(o):a(e,t)}(null,e,t,o)},g.allocUnsafe=function(e){return u(null,e)},g.allocUnsafeSlow=function(e){return u(null,e)},g.isBuffer=function(e){return!(null==e||!e._isBuffer)},g.compare=function(e,t){if(!g.isBuffer(e)||!g.isBuffer(t))throw new TypeError("Arguments must be Buffers");if(e===t)return 0;for(var o=e.length,r=t.length,n=0,i=Math.min(o,r);n<i;++n)if(e[n]!==t[n]){o=e[n],r=t[n];break}return o<r?-1:r<o?1:0},g.isEncoding=function(e){switch(String(e).toLowerCase()){case"hex":case"utf8":case"utf-8":case"ascii":case"latin1":case"binary":case"base64":case"ucs2":case"ucs-2":case"utf16le":case"utf-16le":return!0;default:return!1}},g.concat=function(e,t){if(!i(e))throw new TypeError('"list" argument must be an Array of Buffers');if(0===e.length)return g.alloc(0);var o;if(void 0===t)for(t=0,o=0;o<e.length;++o)t+=e[o].length;var r=g.allocUnsafe(t),n=0;for(o=0;o<e.length;++o){var s=e[o];if(!g.isBuffer(s))throw new TypeError('"list" argument must be an Array of Buffers');s.copy(r,n),n+=s.length}return r},g.byteLength=f,g.prototype._isBuffer=!0,g.prototype.swap16=function(){var e=this.length;if(e%2!=0)throw new RangeError("Buffer size must be a multiple of 16-bits");for(var t=0;t<e;t+=2)b(this,t,t+1);return this},g.prototype.swap32=function(){var e=this.length;if(e%4!=0)throw new RangeError("Buffer size must be a multiple of 32-bits");for(var t=0;t<e;t+=4)b(this,t,t+3),b(this,t+1,t+2);return this},g.prototype.swap64=function(){var e=this.length;if(e%8!=0)throw new RangeError("Buffer size must be a multiple of 64-bits");for(var t=0;t<e;t+=8)b(this,t,t+7),b(this,t+1,t+6),b(this,t+2,t+5),b(this,t+3,t+4);return this},g.prototype.toString=function(){var e=0|this.length;return 0===e?"":0===arguments.length?R(this,0,e):h.apply(this,arguments)},g.prototype.equals=function(e){if(!g.isBuffer(e))throw new TypeError("Argument must be a Buffer");return this===e||0===g.compare(this,e)},g.prototype.inspect=function(){var e="",o=t.INSPECT_MAX_BYTES;return this.length>0&&(e=this.toString("hex",0,o).match(/.{2}/g).join(" "),this.length>o&&(e+=" ... ")),"<Buffer "+e+">"},g.prototype.compare=function(e,t,o,r,n){if(!g.isBuffer(e))throw new TypeError("Argument must be a Buffer");if(void 0===t&&(t=0),void 0===o&&(o=e?e.length:0),void 0===r&&(r=0),void 0===n&&(n=this.length),t<0||o>e.length||r<0||n>this.length)throw new RangeError("out of range index");if(r>=n&&t>=o)return 0;if(r>=n)return-1;if(t>=o)return 1;if(this===e)return 0;for(var i=(n>>>=0)-(r>>>=0),s=(o>>>=0)-(t>>>=0),a=Math.min(i,s),p=this.slice(r,n),l=e.slice(t,o),u=0;u<a;++u)if(p[u]!==l[u]){i=p[u],s=l[u];break}return i<s?-1:s<i?1:0},g.prototype.includes=function(e,t,o){return-1!==this.indexOf(e,t,o)},g.prototype.indexOf=function(e,t,o){return y(this,e,t,o,!0)},g.prototype.lastIndexOf=function(e,t,o){return y(this,e,t,o,!1)},g.prototype.write=function(e,t,o,r){if(void 0===t)r="utf8",o=this.length,t=0;else if(void 0===o&&"string"==typeof t)r=t,o=this.length,t=0;else{if(!isFinite(t))throw new Error("Buffer.write(string, encoding, offset[, length]) is no longer supported");t|=0,isFinite(o)?(o|=0,void 0===r&&(r="utf8")):(r=o,o=void 0)}var n=this.length-t;if((void 0===o||o>n)&&(o=n),e.length>0&&(o<0||t<0)||t>this.length)throw new RangeError("Attempt to write outside buffer bounds");r||(r="utf8");for(var i=!1;;)switch(r){case"hex":return E(this,e,t,o);case"utf8":case"utf-8":return _(this,e,t,o);case"ascii":return S(this,e,t,o);case"latin1":case"binary":return M(this,e,t,o);case"base64":return v(this,e,t,o);case"ucs2":case"ucs-2":case"utf16le":case"utf-16le":return O(this,e,t,o);default:if(i)throw new TypeError("Unknown encoding: "+r);r=(""+r).toLowerCase(),i=!0}},g.prototype.toJSON=function(){return{type:"Buffer",data:Array.prototype.slice.call(this._arr||this,0)}};function w(e,t,o){var r="";o=Math.min(e.length,o);for(var n=t;n<o;++n)r+=String.fromCharCode(127&e[n]);return r}function F(e,t,o){var r="";o=Math.min(e.length,o);for(var n=t;n<o;++n)r+=String.fromCharCode(e[n]);return r}function A(e,t,o){var r=e.length;(!t||t<0)&&(t=0),(!o||o<0||o>r)&&(o=r);for(var n="",i=t;i<o;++i)n+=W(e[i]);return n}function D(e,t,o){for(var r=e.slice(t,o),n="",i=0;i<r.length;i+=2)n+=String.fromCharCode(r[i]+256*r[i+1]);return n}function B(e,t,o){if(e%1!=0||e<0)throw new RangeError("offset is not uint");if(e+t>o)throw new RangeError("Trying to access beyond buffer length")}function P(e,t,o,r,n,i){if(!g.isBuffer(e))throw new TypeError('"buffer" argument must be a Buffer instance');if(t>n||t<i)throw new RangeError('"value" argument is out of bounds');if(o+r>e.length)throw new RangeError("Index out of range")}function C(e,t,o,r){t<0&&(t=65535+t+1);for(var n=0,i=Math.min(e.length-o,2);n<i;++n)e[o+n]=(t&255<<8*(r?n:1-n))>>>8*(r?n:1-n)}function j(e,t,o,r){t<0&&(t=4294967295+t+1);for(var n=0,i=Math.min(e.length-o,4);n<i;++n)e[o+n]=t>>>8*(r?n:3-n)&255}function I(e,t,o,r,n,i){if(o+r>e.length)throw new RangeError("Index out of range");if(o<0)throw new RangeError("Index out of range")}function N(e,t,o,r,i){return i||I(e,0,o,4),n.write(e,t,o,r,23,4),o+4}function L(e,t,o,r,i){return i||I(e,0,o,8),n.write(e,t,o,r,52,8),o+8}g.prototype.slice=function(e,t){var o,r=this.length;if((e=~~e)<0?(e+=r)<0&&(e=0):e>r&&(e=r),(t=void 0===t?r:~~t)<0?(t+=r)<0&&(t=0):t>r&&(t=r),t<e&&(t=e),g.TYPED_ARRAY_SUPPORT)(o=this.subarray(e,t)).__proto__=g.prototype;else{var n=t-e;o=new g(n,void 0);for(var i=0;i<n;++i)o[i]=this[i+e]}return o},g.prototype.readUIntLE=function(e,t,o){e|=0,t|=0,o||B(e,t,this.length);for(var r=this[e],n=1,i=0;++i<t&&(n*=256);)r+=this[e+i]*n;return r},g.prototype.readUIntBE=function(e,t,o){e|=0,t|=0,o||B(e,t,this.length);for(var r=this[e+--t],n=1;t>0&&(n*=256);)r+=this[e+--t]*n;return r},g.prototype.readUInt8=function(e,t){return t||B(e,1,this.length),this[e]},g.prototype.readUInt16LE=function(e,t){return t||B(e,2,this.length),this[e]|this[e+1]<<8},g.prototype.readUInt16BE=function(e,t){return t||B(e,2,this.length),this[e]<<8|this[e+1]},g.prototype.readUInt32LE=function(e,t){return t||B(e,4,this.length),(this[e]|this[e+1]<<8|this[e+2]<<16)+16777216*this[e+3]},g.prototype.readUInt32BE=function(e,t){return t||B(e,4,this.length),16777216*this[e]+(this[e+1]<<16|this[e+2]<<8|this[e+3])},g.prototype.readIntLE=function(e,t,o){e|=0,t|=0,o||B(e,t,this.length);for(var r=this[e],n=1,i=0;++i<t&&(n*=256);)r+=this[e+i]*n;return r>=(n*=128)&&(r-=Math.pow(2,8*t)),r},g.prototype.readIntBE=function(e,t,o){e|=0,t|=0,o||B(e,t,this.length);for(var r=t,n=1,i=this[e+--r];r>0&&(n*=256);)i+=this[e+--r]*n;return i>=(n*=128)&&(i-=Math.pow(2,8*t)),i},g.prototype.readInt8=function(e,t){return t||B(e,1,this.length),128&this[e]?-1*(255-this[e]+1):this[e]},g.prototype.readInt16LE=function(e,t){t||B(e,2,this.length);var o=this[e]|this[e+1]<<8;return 32768&o?4294901760|o:o},g.prototype.readInt16BE=function(e,t){t||B(e,2,this.length);var o=this[e+1]|this[e]<<8;return 32768&o?4294901760|o:o},g.prototype.readInt32LE=function(e,t){return t||B(e,4,this.length),this[e]|this[e+1]<<8|this[e+2]<<16|this[e+3]<<24},g.prototype.readInt32BE=function(e,t){return t||B(e,4,this.length),this[e]<<24|this[e+1]<<16|this[e+2]<<8|this[e+3]},g.prototype.readFloatLE=function(e,t){return t||B(e,4,this.length),n.read(this,e,!0,23,4)},g.prototype.readFloatBE=function(e,t){return t||B(e,4,this.length),n.read(this,e,!1,23,4)},g.prototype.readDoubleLE=function(e,t){return t||B(e,8,this.length),n.read(this,e,!0,52,8)},g.prototype.readDoubleBE=function(e,t){return t||B(e,8,this.length),n.read(this,e,!1,52,8)},g.prototype.writeUIntLE=function(e,t,o,r){(e=+e,t|=0,o|=0,r)||P(this,e,t,o,Math.pow(2,8*o)-1,0);var n=1,i=0;for(this[t]=255&e;++i<o&&(n*=256);)this[t+i]=e/n&255;return t+o},g.prototype.writeUIntBE=function(e,t,o,r){(e=+e,t|=0,o|=0,r)||P(this,e,t,o,Math.pow(2,8*o)-1,0);var n=o-1,i=1;for(this[t+n]=255&e;--n>=0&&(i*=256);)this[t+n]=e/i&255;return t+o},g.prototype.writeUInt8=function(e,t,o){return e=+e,t|=0,o||P(this,e,t,1,255,0),g.TYPED_ARRAY_SUPPORT||(e=Math.floor(e)),this[t]=255&e,t+1},g.prototype.writeUInt16LE=function(e,t,o){return e=+e,t|=0,o||P(this,e,t,2,65535,0),g.TYPED_ARRAY_SUPPORT?(this[t]=255&e,this[t+1]=e>>>8):C(this,e,t,!0),t+2},g.prototype.writeUInt16BE=function(e,t,o){return e=+e,t|=0,o||P(this,e,t,2,65535,0),g.TYPED_ARRAY_SUPPORT?(this[t]=e>>>8,this[t+1]=255&e):C(this,e,t,!1),t+2},g.prototype.writeUInt32LE=function(e,t,o){return e=+e,t|=0,o||P(this,e,t,4,4294967295,0),g.TYPED_ARRAY_SUPPORT?(this[t+3]=e>>>24,this[t+2]=e>>>16,this[t+1]=e>>>8,this[t]=255&e):j(this,e,t,!0),t+4},g.prototype.writeUInt32BE=function(e,t,o){return e=+e,t|=0,o||P(this,e,t,4,4294967295,0),g.TYPED_ARRAY_SUPPORT?(this[t]=e>>>24,this[t+1]=e>>>16,this[t+2]=e>>>8,this[t+3]=255&e):j(this,e,t,!1),t+4},g.prototype.writeIntLE=function(e,t,o,r){if(e=+e,t|=0,!r){var n=Math.pow(2,8*o-1);P(this,e,t,o,n-1,-n)}var i=0,s=1,a=0;for(this[t]=255&e;++i<o&&(s*=256);)e<0&&0===a&&0!==this[t+i-1]&&(a=1),this[t+i]=(e/s>>0)-a&255;return t+o},g.prototype.writeIntBE=function(e,t,o,r){if(e=+e,t|=0,!r){var n=Math.pow(2,8*o-1);P(this,e,t,o,n-1,-n)}var i=o-1,s=1,a=0;for(this[t+i]=255&e;--i>=0&&(s*=256);)e<0&&0===a&&0!==this[t+i+1]&&(a=1),this[t+i]=(e/s>>0)-a&255;return t+o},g.prototype.writeInt8=function(e,t,o){return e=+e,t|=0,o||P(this,e,t,1,127,-128),g.TYPED_ARRAY_SUPPORT||(e=Math.floor(e)),e<0&&(e=255+e+1),this[t]=255&e,t+1},g.prototype.writeInt16LE=function(e,t,o){return e=+e,t|=0,o||P(this,e,t,2,32767,-32768),g.TYPED_ARRAY_SUPPORT?(this[t]=255&e,this[t+1]=e>>>8):C(this,e,t,!0),t+2},g.prototype.writeInt16BE=function(e,t,o){return e=+e,t|=0,o||P(this,e,t,2,32767,-32768),g.TYPED_ARRAY_SUPPORT?(this[t]=e>>>8,this[t+1]=255&e):C(this,e,t,!1),t+2},g.prototype.writeInt32LE=function(e,t,o){return e=+e,t|=0,o||P(this,e,t,4,2147483647,-2147483648),g.TYPED_ARRAY_SUPPORT?(this[t]=255&e,this[t+1]=e>>>8,this[t+2]=e>>>16,this[t+3]=e>>>24):j(this,e,t,!0),t+4},g.prototype.writeInt32BE=function(e,t,o){return e=+e,t|=0,o||P(this,e,t,4,2147483647,-2147483648),e<0&&(e=4294967295+e+1),g.TYPED_ARRAY_SUPPORT?(this[t]=e>>>24,this[t+1]=e>>>16,this[t+2]=e>>>8,this[t+3]=255&e):j(this,e,t,!1),t+4},g.prototype.writeFloatLE=function(e,t,o){return N(this,e,t,!0,o)},g.prototype.writeFloatBE=function(e,t,o){return N(this,e,t,!1,o)},g.prototype.writeDoubleLE=function(e,t,o){return L(this,e,t,!0,o)},g.prototype.writeDoubleBE=function(e,t,o){return L(this,e,t,!1,o)},g.prototype.copy=function(e,t,o,r){if(o||(o=0),r||0===r||(r=this.length),t>=e.length&&(t=e.length),t||(t=0),r>0&&r<o&&(r=o),r===o)return 0;if(0===e.length||0===this.length)return 0;if(t<0)throw new RangeError("targetStart out of bounds");if(o<0||o>=this.length)throw new RangeError("sourceStart out of bounds");if(r<0)throw new RangeError("sourceEnd out of bounds");r>this.length&&(r=this.length),e.length-t<r-o&&(r=e.length-t+o);var n,i=r-o;if(this===e&&o<t&&t<r)for(n=i-1;n>=0;--n)e[n+t]=this[n+o];else if(i<1e3||!g.TYPED_ARRAY_SUPPORT)for(n=0;n<i;++n)e[n+t]=this[n+o];else Uint8Array.prototype.set.call(e,this.subarray(o,o+i),t);return i},g.prototype.fill=function(e,t,o,r){if("string"==typeof e){if("string"==typeof t?(r=t,t=0,o=this.length):"string"==typeof o&&(r=o,o=this.length),1===e.length){var n=e.charCodeAt(0);n<256&&(e=n)}if(void 0!==r&&"string"!=typeof r)throw new TypeError("encoding must be a string");if("string"==typeof r&&!g.isEncoding(r))throw new TypeError("Unknown encoding: "+r)}else"number"==typeof e&&(e&=255);if(t<0||this.length<t||this.length<o)throw new RangeError("Out of range index");if(o<=t)return this;var i;if(t>>>=0,o=void 0===o?this.length:o>>>0,e||(e=0),"number"==typeof e)for(i=t;i<o;++i)this[i]=e;else{var s=g.isBuffer(e)?e:x(new g(e,r).toString()),a=s.length;for(i=0;i<o-t;++i)this[i+t]=s[i%a]}return this};var U=/[^+\/0-9A-Za-z-_]/g;function W(e){return e<16?"0"+e.toString(16):e.toString(16)}function x(e,t){var o;t=t||1/0;for(var r=e.length,n=null,i=[],s=0;s<r;++s){if((o=e.charCodeAt(s))>55295&&o<57344){if(!n){if(o>56319){(t-=3)>-1&&i.push(239,191,189);continue}if(s+1===r){(t-=3)>-1&&i.push(239,191,189);continue}n=o;continue}if(o<56320){(t-=3)>-1&&i.push(239,191,189),n=o;continue}o=65536+(n-55296<<10|o-56320)}else n&&(t-=3)>-1&&i.push(239,191,189);if(n=null,o<128){if((t-=1)<0)break;i.push(o)}else if(o<2048){if((t-=2)<0)break;i.push(o>>6|192,63&o|128)}else if(o<65536){if((t-=3)<0)break;i.push(o>>12|224,o>>6&63|128,63&o|128)}else{if(!(o<1114112))throw new Error("Invalid code point");if((t-=4)<0)break;i.push(o>>18|240,o>>12&63|128,o>>6&63|128,63&o|128)}}return i}function H(e){return r.toByteArray(function(e){if((e=function(e){return e.trim?e.trim():e.replace(/^\s+|\s+$/g,"")}(e).replace(U,"")).length<2)return"";for(;e.length%4!=0;)e+="=";return e}(e))}function k(e,t,o,r){for(var n=0;n<r&&!(n+o>=t.length||n>=e.length);++n)t[n+o]=e[n];return n}}).call(this,o(3))},function(e,t,o){"use strict";t.byteLength=function(e){var t=p(e),o=t[0],r=t[1];return 3*(o+r)/4-r},t.toByteArray=function(e){var t,o,r=p(e),s=r[0],a=r[1],g=new i(function(e,t,o){return 3*(t+o)/4-o}(0,s,a)),l=0,u=a>0?s-4:s;for(o=0;o<u;o+=4)t=n[e.charCodeAt(o)]<<18|n[e.charCodeAt(o+1)]<<12|n[e.charCodeAt(o+2)]<<6|n[e.charCodeAt(o+3)],g[l++]=t>>16&255,g[l++]=t>>8&255,g[l++]=255&t;2===a&&(t=n[e.charCodeAt(o)]<<2|n[e.charCodeAt(o+1)]>>4,g[l++]=255&t);1===a&&(t=n[e.charCodeAt(o)]<<10|n[e.charCodeAt(o+1)]<<4|n[e.charCodeAt(o+2)]>>2,g[l++]=t>>8&255,g[l++]=255&t);return g},t.fromByteArray=function(e){for(var t,o=e.length,n=o%3,i=[],s=0,a=o-n;s<a;s+=16383)i.push(l(e,s,s+16383>a?a:s+16383));1===n?(t=e[o-1],i.push(r[t>>2]+r[t<<4&63]+"==")):2===n&&(t=(e[o-2]<<8)+e[o-1],i.push(r[t>>10]+r[t>>4&63]+r[t<<2&63]+"="));return i.join("")};for(var r=[],n=[],i="undefined"!=typeof Uint8Array?Uint8Array:Array,s="ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/",a=0,g=s.length;a<g;++a)r[a]=s[a],n[s.charCodeAt(a)]=a;function p(e){var t=e.length;if(t%4>0)throw new Error("Invalid string. Length must be a multiple of 4");var o=e.indexOf("=");return-1===o&&(o=t),[o,o===t?0:4-o%4]}function l(e,t,o){for(var n,i,s=[],a=t;a<o;a+=3)n=(e[a]<<16&16711680)+(e[a+1]<<8&65280)+(255&e[a+2]),s.push(r[(i=n)>>18&63]+r[i>>12&63]+r[i>>6&63]+r[63&i]);return s.join("")}n["-".charCodeAt(0)]=62,n["_".charCodeAt(0)]=63},function(e,t){
/*! ieee754. BSD-3-Clause License. Feross Aboukhadijeh <https://feross.org/opensource> */
t.read=function(e,t,o,r,n){var i,s,a=8*n-r-1,g=(1<<a)-1,p=g>>1,l=-7,u=o?n-1:0,c=o?-1:1,d=e[t+u];for(u+=c,i=d&(1<<-l)-1,d>>=-l,l+=a;l>0;i=256*i+e[t+u],u+=c,l-=8);for(s=i&(1<<-l)-1,i>>=-l,l+=r;l>0;s=256*s+e[t+u],u+=c,l-=8);if(0===i)i=1-p;else{if(i===g)return s?NaN:1/0*(d?-1:1);s+=Math.pow(2,r),i-=p}return(d?-1:1)*s*Math.pow(2,i-r)},t.write=function(e,t,o,r,n,i){var s,a,g,p=8*i-n-1,l=(1<<p)-1,u=l>>1,c=23===n?Math.pow(2,-24)-Math.pow(2,-77):0,d=r?0:i-1,f=r?1:-1,h=t<0||0===t&&1/t<0?1:0;for(t=Math.abs(t),isNaN(t)||t===1/0?(a=isNaN(t)?1:0,s=l):(s=Math.floor(Math.log(t)/Math.LN2),t*(g=Math.pow(2,-s))<1&&(s--,g*=2),(t+=s+u>=1?c/g:c*Math.pow(2,1-u))*g>=2&&(s++,g/=2),s+u>=l?(a=0,s=l):s+u>=1?(a=(t*g-1)*Math.pow(2,n),s+=u):(a=t*Math.pow(2,u-1)*Math.pow(2,n),s=0));n>=8;e[o+d]=255&a,d+=f,a/=256,n-=8);for(s=s<<n|a,p+=n;p>0;e[o+d]=255&s,d+=f,s/=256,p-=8);e[o+d-f]|=128*h}},function(e,t){var o={}.toString;e.exports=Array.isArray||function(e){return"[object Array]"==o.call(e)}},function(e,t,o){var r=o(0),n=r,i=Function("return this")();n.exportSymbol("proto.google.api.CustomHttpPattern",null,i),n.exportSymbol("proto.google.api.Http",null,i),n.exportSymbol("proto.google.api.HttpRule",null,i),n.exportSymbol("proto.google.api.HttpRule.PatternCase",null,i),proto.google.api.Http=function(e){r.Message.initialize(this,e,0,-1,proto.google.api.Http.repeatedFields_,null)},n.inherits(proto.google.api.Http,r.Message),n.DEBUG&&!COMPILED&&(proto.google.api.Http.displayName="proto.google.api.Http"),proto.google.api.HttpRule=function(e){r.Message.initialize(this,e,0,-1,proto.google.api.HttpRule.repeatedFields_,proto.google.api.HttpRule.oneofGroups_)},n.inherits(proto.google.api.HttpRule,r.Message),n.DEBUG&&!COMPILED&&(proto.google.api.HttpRule.displayName="proto.google.api.HttpRule"),proto.google.api.CustomHttpPattern=function(e){r.Message.initialize(this,e,0,-1,null,null)},n.inherits(proto.google.api.CustomHttpPattern,r.Message),n.DEBUG&&!COMPILED&&(proto.google.api.CustomHttpPattern.displayName="proto.google.api.CustomHttpPattern"),proto.google.api.Http.repeatedFields_=[1],r.Message.GENERATE_TO_OBJECT&&(proto.google.api.Http.prototype.toObject=function(e){return proto.google.api.Http.toObject(e,this)},proto.google.api.Http.toObject=function(e,t){var o={rulesList:r.Message.toObjectList(t.getRulesList(),proto.google.api.HttpRule.toObject,e),fullyDecodeReservedExpansion:r.Message.getBooleanFieldWithDefault(t,2,!1)};return e&&(o.$jspbMessageInstance=t),o}),proto.google.api.Http.deserializeBinary=function(e){var t=new r.BinaryReader(e),o=new proto.google.api.Http;return proto.google.api.Http.deserializeBinaryFromReader(o,t)},proto.google.api.Http.deserializeBinaryFromReader=function(e,t){for(;t.nextField()&&!t.isEndGroup();){switch(t.getFieldNumber()){case 1:var o=new proto.google.api.HttpRule;t.readMessage(o,proto.google.api.HttpRule.deserializeBinaryFromReader),e.addRules(o);break;case 2:o=t.readBool();e.setFullyDecodeReservedExpansion(o);break;default:t.skipField()}}return e},proto.google.api.Http.prototype.serializeBinary=function(){var e=new r.BinaryWriter;return proto.google.api.Http.serializeBinaryToWriter(this,e),e.getResultBuffer()},proto.google.api.Http.serializeBinaryToWriter=function(e,t){var o=void 0;(o=e.getRulesList()).length>0&&t.writeRepeatedMessage(1,o,proto.google.api.HttpRule.serializeBinaryToWriter),(o=e.getFullyDecodeReservedExpansion())&&t.writeBool(2,o)},proto.google.api.Http.prototype.getRulesList=function(){return r.Message.getRepeatedWrapperField(this,proto.google.api.HttpRule,1)},proto.google.api.Http.prototype.setRulesList=function(e){return r.Message.setRepeatedWrapperField(this,1,e)},proto.google.api.Http.prototype.addRules=function(e,t){return r.Message.addToRepeatedWrapperField(this,1,e,proto.google.api.HttpRule,t)},proto.google.api.Http.prototype.clearRulesList=function(){return this.setRulesList([])},proto.google.api.Http.prototype.getFullyDecodeReservedExpansion=function(){return r.Message.getBooleanFieldWithDefault(this,2,!1)},proto.google.api.Http.prototype.setFullyDecodeReservedExpansion=function(e){return r.Message.setProto3BooleanField(this,2,e)},proto.google.api.HttpRule.repeatedFields_=[11],proto.google.api.HttpRule.oneofGroups_=[[2,3,4,5,6,8]],proto.google.api.HttpRule.PatternCase={PATTERN_NOT_SET:0,GET:2,PUT:3,POST:4,DELETE:5,PATCH:6,CUSTOM:8},proto.google.api.HttpRule.prototype.getPatternCase=function(){return r.Message.computeOneofCase(this,proto.google.api.HttpRule.oneofGroups_[0])},r.Message.GENERATE_TO_OBJECT&&(proto.google.api.HttpRule.prototype.toObject=function(e){return proto.google.api.HttpRule.toObject(e,this)},proto.google.api.HttpRule.toObject=function(e,t){var o,n={selector:r.Message.getFieldWithDefault(t,1,""),get:r.Message.getFieldWithDefault(t,2,""),put:r.Message.getFieldWithDefault(t,3,""),post:r.Message.getFieldWithDefault(t,4,""),pb_delete:r.Message.getFieldWithDefault(t,5,""),patch:r.Message.getFieldWithDefault(t,6,""),custom:(o=t.getCustom())&&proto.google.api.CustomHttpPattern.toObject(e,o),body:r.Message.getFieldWithDefault(t,7,""),responseBody:r.Message.getFieldWithDefault(t,12,""),additionalBindingsList:r.Message.toObjectList(t.getAdditionalBindingsList(),proto.google.api.HttpRule.toObject,e)};return e&&(n.$jspbMessageInstance=t),n}),proto.google.api.HttpRule.deserializeBinary=function(e){var t=new r.BinaryReader(e),o=new proto.google.api.HttpRule;return proto.google.api.HttpRule.deserializeBinaryFromReader(o,t)},proto.google.api.HttpRule.deserializeBinaryFromReader=function(e,t){for(;t.nextField()&&!t.isEndGroup();){switch(t.getFieldNumber()){case 1:var o=t.readString();e.setSelector(o);break;case 2:o=t.readString();e.setGet(o);break;case 3:o=t.readString();e.setPut(o);break;case 4:o=t.readString();e.setPost(o);break;case 5:o=t.readString();e.setDelete(o);break;case 6:o=t.readString();e.setPatch(o);break;case 8:o=new proto.google.api.CustomHttpPattern;t.readMessage(o,proto.google.api.CustomHttpPattern.deserializeBinaryFromReader),e.setCustom(o);break;case 7:o=t.readString();e.setBody(o);break;case 12:o=t.readString();e.setResponseBody(o);break;case 11:o=new proto.google.api.HttpRule;t.readMessage(o,proto.google.api.HttpRule.deserializeBinaryFromReader),e.addAdditionalBindings(o);break;default:t.skipField()}}return e},proto.google.api.HttpRule.prototype.serializeBinary=function(){var e=new r.BinaryWriter;return proto.google.api.HttpRule.serializeBinaryToWriter(this,e),e.getResultBuffer()},proto.google.api.HttpRule.serializeBinaryToWriter=function(e,t){var o=void 0;(o=e.getSelector()).length>0&&t.writeString(1,o),null!=(o=r.Message.getField(e,2))&&t.writeString(2,o),null!=(o=r.Message.getField(e,3))&&t.writeString(3,o),null!=(o=r.Message.getField(e,4))&&t.writeString(4,o),null!=(o=r.Message.getField(e,5))&&t.writeString(5,o),null!=(o=r.Message.getField(e,6))&&t.writeString(6,o),null!=(o=e.getCustom())&&t.writeMessage(8,o,proto.google.api.CustomHttpPattern.serializeBinaryToWriter),(o=e.getBody()).length>0&&t.writeString(7,o),(o=e.getResponseBody()).length>0&&t.writeString(12,o),(o=e.getAdditionalBindingsList()).length>0&&t.writeRepeatedMessage(11,o,proto.google.api.HttpRule.serializeBinaryToWriter)},proto.google.api.HttpRule.prototype.getSelector=function(){return r.Message.getFieldWithDefault(this,1,"")},proto.google.api.HttpRule.prototype.setSelector=function(e){return r.Message.setProto3StringField(this,1,e)},proto.google.api.HttpRule.prototype.getGet=function(){return r.Message.getFieldWithDefault(this,2,"")},proto.google.api.HttpRule.prototype.setGet=function(e){return r.Message.setOneofField(this,2,proto.google.api.HttpRule.oneofGroups_[0],e)},proto.google.api.HttpRule.prototype.clearGet=function(){return r.Message.setOneofField(this,2,proto.google.api.HttpRule.oneofGroups_[0],void 0)},proto.google.api.HttpRule.prototype.hasGet=function(){return null!=r.Message.getField(this,2)},proto.google.api.HttpRule.prototype.getPut=function(){return r.Message.getFieldWithDefault(this,3,"")},proto.google.api.HttpRule.prototype.setPut=function(e){return r.Message.setOneofField(this,3,proto.google.api.HttpRule.oneofGroups_[0],e)},proto.google.api.HttpRule.prototype.clearPut=function(){return r.Message.setOneofField(this,3,proto.google.api.HttpRule.oneofGroups_[0],void 0)},proto.google.api.HttpRule.prototype.hasPut=function(){return null!=r.Message.getField(this,3)},proto.google.api.HttpRule.prototype.getPost=function(){return r.Message.getFieldWithDefault(this,4,"")},proto.google.api.HttpRule.prototype.setPost=function(e){return r.Message.setOneofField(this,4,proto.google.api.HttpRule.oneofGroups_[0],e)},proto.google.api.HttpRule.prototype.clearPost=function(){return r.Message.setOneofField(this,4,proto.google.api.HttpRule.oneofGroups_[0],void 0)},proto.google.api.HttpRule.prototype.hasPost=function(){return null!=r.Message.getField(this,4)},proto.google.api.HttpRule.prototype.getDelete=function(){return r.Message.getFieldWithDefault(this,5,"")},proto.google.api.HttpRule.prototype.setDelete=function(e){return r.Message.setOneofField(this,5,proto.google.api.HttpRule.oneofGroups_[0],e)},proto.google.api.HttpRule.prototype.clearDelete=function(){return r.Message.setOneofField(this,5,proto.google.api.HttpRule.oneofGroups_[0],void 0)},proto.google.api.HttpRule.prototype.hasDelete=function(){return null!=r.Message.getField(this,5)},proto.google.api.HttpRule.prototype.getPatch=function(){return r.Message.getFieldWithDefault(this,6,"")},proto.google.api.HttpRule.prototype.setPatch=function(e){return r.Message.setOneofField(this,6,proto.google.api.HttpRule.oneofGroups_[0],e)},proto.google.api.HttpRule.prototype.clearPatch=function(){return r.Message.setOneofField(this,6,proto.google.api.HttpRule.oneofGroups_[0],void 0)},proto.google.api.HttpRule.prototype.hasPatch=function(){return null!=r.Message.getField(this,6)},proto.google.api.HttpRule.prototype.getCustom=function(){return r.Message.getWrapperField(this,proto.google.api.CustomHttpPattern,8)},proto.google.api.HttpRule.prototype.setCustom=function(e){return r.Message.setOneofWrapperField(this,8,proto.google.api.HttpRule.oneofGroups_[0],e)},proto.google.api.HttpRule.prototype.clearCustom=function(){return this.setCustom(void 0)},proto.google.api.HttpRule.prototype.hasCustom=function(){return null!=r.Message.getField(this,8)},proto.google.api.HttpRule.prototype.getBody=function(){return r.Message.getFieldWithDefault(this,7,"")},proto.google.api.HttpRule.prototype.setBody=function(e){return r.Message.setProto3StringField(this,7,e)},proto.google.api.HttpRule.prototype.getResponseBody=function(){return r.Message.getFieldWithDefault(this,12,"")},proto.google.api.HttpRule.prototype.setResponseBody=function(e){return r.Message.setProto3StringField(this,12,e)},proto.google.api.HttpRule.prototype.getAdditionalBindingsList=function(){return r.Message.getRepeatedWrapperField(this,proto.google.api.HttpRule,11)},proto.google.api.HttpRule.prototype.setAdditionalBindingsList=function(e){return r.Message.setRepeatedWrapperField(this,11,e)},proto.google.api.HttpRule.prototype.addAdditionalBindings=function(e,t){return r.Message.addToRepeatedWrapperField(this,11,e,proto.google.api.HttpRule,t)},proto.google.api.HttpRule.prototype.clearAdditionalBindingsList=function(){return this.setAdditionalBindingsList([])},r.Message.GENERATE_TO_OBJECT&&(proto.google.api.CustomHttpPattern.prototype.toObject=function(e){return proto.google.api.CustomHttpPattern.toObject(e,this)},proto.google.api.CustomHttpPattern.toObject=function(e,t){var o={kind:r.Message.getFieldWithDefault(t,1,""),path:r.Message.getFieldWithDefault(t,2,"")};return e&&(o.$jspbMessageInstance=t),o}),proto.google.api.CustomHttpPattern.deserializeBinary=function(e){var t=new r.BinaryReader(e),o=new proto.google.api.CustomHttpPattern;return proto.google.api.CustomHttpPattern.deserializeBinaryFromReader(o,t)},proto.google.api.CustomHttpPattern.deserializeBinaryFromReader=function(e,t){for(;t.nextField()&&!t.isEndGroup();){switch(t.getFieldNumber()){case 1:var o=t.readString();e.setKind(o);break;case 2:o=t.readString();e.setPath(o);break;default:t.skipField()}}return e},proto.google.api.CustomHttpPattern.prototype.serializeBinary=function(){var e=new r.BinaryWriter;return proto.google.api.CustomHttpPattern.serializeBinaryToWriter(this,e),e.getResultBuffer()},proto.google.api.CustomHttpPattern.serializeBinaryToWriter=function(e,t){var o=void 0;(o=e.getKind()).length>0&&t.writeString(1,o),(o=e.getPath()).length>0&&t.writeString(2,o)},proto.google.api.CustomHttpPattern.prototype.getKind=function(){return r.Message.getFieldWithDefault(this,1,"")},proto.google.api.CustomHttpPattern.prototype.setKind=function(e){return r.Message.setProto3StringField(this,1,e)},proto.google.api.CustomHttpPattern.prototype.getPath=function(){return r.Message.getFieldWithDefault(this,2,"")},proto.google.api.CustomHttpPattern.prototype.setPath=function(e){return r.Message.setProto3StringField(this,2,e)},n.object.extend(t,proto.google.api)},function(e,t,o){var r=o(0),n=r,i=Function("return this")();n.exportSymbol("proto.google.protobuf.DescriptorProto",null,i),n.exportSymbol("proto.google.protobuf.DescriptorProto.ExtensionRange",null,i),n.exportSymbol("proto.google.protobuf.DescriptorProto.ReservedRange",null,i),n.exportSymbol("proto.google.protobuf.EnumDescriptorProto",null,i),n.exportSymbol("proto.google.protobuf.EnumDescriptorProto.EnumReservedRange",null,i),n.exportSymbol("proto.google.protobuf.EnumOptions",null,i),n.exportSymbol("proto.google.protobuf.EnumValueDescriptorProto",null,i),n.exportSymbol("proto.google.protobuf.EnumValueOptions",null,i),n.exportSymbol("proto.google.protobuf.ExtensionRangeOptions",null,i),n.exportSymbol("proto.google.protobuf.FieldDescriptorProto",null,i),n.exportSymbol("proto.google.protobuf.FieldDescriptorProto.Label",null,i),n.exportSymbol("proto.google.protobuf.FieldDescriptorProto.Type",null,i),n.exportSymbol("proto.google.protobuf.FieldOptions",null,i),n.exportSymbol("proto.google.protobuf.FieldOptions.CType",null,i),n.exportSymbol("proto.google.protobuf.FieldOptions.JSType",null,i),n.exportSymbol("proto.google.protobuf.FileDescriptorProto",null,i),n.exportSymbol("proto.google.protobuf.FileDescriptorSet",null,i),n.exportSymbol("proto.google.protobuf.FileOptions",null,i),n.exportSymbol("proto.google.protobuf.FileOptions.OptimizeMode",null,i),n.exportSymbol("proto.google.protobuf.GeneratedCodeInfo",null,i),n.exportSymbol("proto.google.protobuf.GeneratedCodeInfo.Annotation",null,i),n.exportSymbol("proto.google.protobuf.MessageOptions",null,i),n.exportSymbol("proto.google.protobuf.MethodDescriptorProto",null,i),n.exportSymbol("proto.google.protobuf.MethodOptions",null,i),n.exportSymbol("proto.google.protobuf.MethodOptions.IdempotencyLevel",null,i),n.exportSymbol("proto.google.protobuf.OneofDescriptorProto",null,i),n.exportSymbol("proto.google.protobuf.OneofOptions",null,i),n.exportSymbol("proto.google.protobuf.ServiceDescriptorProto",null,i),n.exportSymbol("proto.google.protobuf.ServiceOptions",null,i),n.exportSymbol("proto.google.protobuf.SourceCodeInfo",null,i),n.exportSymbol("proto.google.protobuf.SourceCodeInfo.Location",null,i),n.exportSymbol("proto.google.protobuf.UninterpretedOption",null,i),n.exportSymbol("proto.google.protobuf.UninterpretedOption.NamePart",null,i),proto.google.protobuf.FileDescriptorSet=function(e){r.Message.initialize(this,e,0,-1,proto.google.protobuf.FileDescriptorSet.repeatedFields_,null)},n.inherits(proto.google.protobuf.FileDescriptorSet,r.Message),n.DEBUG&&!COMPILED&&(proto.google.protobuf.FileDescriptorSet.displayName="proto.google.protobuf.FileDescriptorSet"),proto.google.protobuf.FileDescriptorProto=function(e){r.Message.initialize(this,e,0,-1,proto.google.protobuf.FileDescriptorProto.repeatedFields_,null)},n.inherits(proto.google.protobuf.FileDescriptorProto,r.Message),n.DEBUG&&!COMPILED&&(proto.google.protobuf.FileDescriptorProto.displayName="proto.google.protobuf.FileDescriptorProto"),proto.google.protobuf.DescriptorProto=function(e){r.Message.initialize(this,e,0,-1,proto.google.protobuf.DescriptorProto.repeatedFields_,null)},n.inherits(proto.google.protobuf.DescriptorProto,r.Message),n.DEBUG&&!COMPILED&&(proto.google.protobuf.DescriptorProto.displayName="proto.google.protobuf.DescriptorProto"),proto.google.protobuf.DescriptorProto.ExtensionRange=function(e){r.Message.initialize(this,e,0,-1,null,null)},n.inherits(proto.google.protobuf.DescriptorProto.ExtensionRange,r.Message),n.DEBUG&&!COMPILED&&(proto.google.protobuf.DescriptorProto.ExtensionRange.displayName="proto.google.protobuf.DescriptorProto.ExtensionRange"),proto.google.protobuf.DescriptorProto.ReservedRange=function(e){r.Message.initialize(this,e,0,-1,null,null)},n.inherits(proto.google.protobuf.DescriptorProto.ReservedRange,r.Message),n.DEBUG&&!COMPILED&&(proto.google.protobuf.DescriptorProto.ReservedRange.displayName="proto.google.protobuf.DescriptorProto.ReservedRange"),proto.google.protobuf.ExtensionRangeOptions=function(e){r.Message.initialize(this,e,0,500,proto.google.protobuf.ExtensionRangeOptions.repeatedFields_,null)},n.inherits(proto.google.protobuf.ExtensionRangeOptions,r.Message),n.DEBUG&&!COMPILED&&(proto.google.protobuf.ExtensionRangeOptions.displayName="proto.google.protobuf.ExtensionRangeOptions"),proto.google.protobuf.ExtensionRangeOptions.extensions={},proto.google.protobuf.ExtensionRangeOptions.extensionsBinary={},proto.google.protobuf.FieldDescriptorProto=function(e){r.Message.initialize(this,e,0,-1,null,null)},n.inherits(proto.google.protobuf.FieldDescriptorProto,r.Message),n.DEBUG&&!COMPILED&&(proto.google.protobuf.FieldDescriptorProto.displayName="proto.google.protobuf.FieldDescriptorProto"),proto.google.protobuf.OneofDescriptorProto=function(e){r.Message.initialize(this,e,0,-1,null,null)},n.inherits(proto.google.protobuf.OneofDescriptorProto,r.Message),n.DEBUG&&!COMPILED&&(proto.google.protobuf.OneofDescriptorProto.displayName="proto.google.protobuf.OneofDescriptorProto"),proto.google.protobuf.EnumDescriptorProto=function(e){r.Message.initialize(this,e,0,-1,proto.google.protobuf.EnumDescriptorProto.repeatedFields_,null)},n.inherits(proto.google.protobuf.EnumDescriptorProto,r.Message),n.DEBUG&&!COMPILED&&(proto.google.protobuf.EnumDescriptorProto.displayName="proto.google.protobuf.EnumDescriptorProto"),proto.google.protobuf.EnumDescriptorProto.EnumReservedRange=function(e){r.Message.initialize(this,e,0,-1,null,null)},n.inherits(proto.google.protobuf.EnumDescriptorProto.EnumReservedRange,r.Message),n.DEBUG&&!COMPILED&&(proto.google.protobuf.EnumDescriptorProto.EnumReservedRange.displayName="proto.google.protobuf.EnumDescriptorProto.EnumReservedRange"),proto.google.protobuf.EnumValueDescriptorProto=function(e){r.Message.initialize(this,e,0,-1,null,null)},n.inherits(proto.google.protobuf.EnumValueDescriptorProto,r.Message),n.DEBUG&&!COMPILED&&(proto.google.protobuf.EnumValueDescriptorProto.displayName="proto.google.protobuf.EnumValueDescriptorProto"),proto.google.protobuf.ServiceDescriptorProto=function(e){r.Message.initialize(this,e,0,-1,proto.google.protobuf.ServiceDescriptorProto.repeatedFields_,null)},n.inherits(proto.google.protobuf.ServiceDescriptorProto,r.Message),n.DEBUG&&!COMPILED&&(proto.google.protobuf.ServiceDescriptorProto.displayName="proto.google.protobuf.ServiceDescriptorProto"),proto.google.protobuf.MethodDescriptorProto=function(e){r.Message.initialize(this,e,0,-1,null,null)},n.inherits(proto.google.protobuf.MethodDescriptorProto,r.Message),n.DEBUG&&!COMPILED&&(proto.google.protobuf.MethodDescriptorProto.displayName="proto.google.protobuf.MethodDescriptorProto"),proto.google.protobuf.FileOptions=function(e){r.Message.initialize(this,e,0,500,proto.google.protobuf.FileOptions.repeatedFields_,null)},n.inherits(proto.google.protobuf.FileOptions,r.Message),n.DEBUG&&!COMPILED&&(proto.google.protobuf.FileOptions.displayName="proto.google.protobuf.FileOptions"),proto.google.protobuf.FileOptions.extensions={},proto.google.protobuf.FileOptions.extensionsBinary={},proto.google.protobuf.MessageOptions=function(e){r.Message.initialize(this,e,0,500,proto.google.protobuf.MessageOptions.repeatedFields_,null)},n.inherits(proto.google.protobuf.MessageOptions,r.Message),n.DEBUG&&!COMPILED&&(proto.google.protobuf.MessageOptions.displayName="proto.google.protobuf.MessageOptions"),proto.google.protobuf.MessageOptions.extensions={},proto.google.protobuf.MessageOptions.extensionsBinary={},proto.google.protobuf.FieldOptions=function(e){r.Message.initialize(this,e,0,500,proto.google.protobuf.FieldOptions.repeatedFields_,null)},n.inherits(proto.google.protobuf.FieldOptions,r.Message),n.DEBUG&&!COMPILED&&(proto.google.protobuf.FieldOptions.displayName="proto.google.protobuf.FieldOptions"),proto.google.protobuf.FieldOptions.extensions={},proto.google.protobuf.FieldOptions.extensionsBinary={},proto.google.protobuf.OneofOptions=function(e){r.Message.initialize(this,e,0,500,proto.google.protobuf.OneofOptions.repeatedFields_,null)},n.inherits(proto.google.protobuf.OneofOptions,r.Message),n.DEBUG&&!COMPILED&&(proto.google.protobuf.OneofOptions.displayName="proto.google.protobuf.OneofOptions"),proto.google.protobuf.OneofOptions.extensions={},proto.google.protobuf.OneofOptions.extensionsBinary={},proto.google.protobuf.EnumOptions=function(e){r.Message.initialize(this,e,0,500,proto.google.protobuf.EnumOptions.repeatedFields_,null)},n.inherits(proto.google.protobuf.EnumOptions,r.Message),n.DEBUG&&!COMPILED&&(proto.google.protobuf.EnumOptions.displayName="proto.google.protobuf.EnumOptions"),proto.google.protobuf.EnumOptions.extensions={},proto.google.protobuf.EnumOptions.extensionsBinary={},proto.google.protobuf.EnumValueOptions=function(e){r.Message.initialize(this,e,0,500,proto.google.protobuf.EnumValueOptions.repeatedFields_,null)},n.inherits(proto.google.protobuf.EnumValueOptions,r.Message),n.DEBUG&&!COMPILED&&(proto.google.protobuf.EnumValueOptions.displayName="proto.google.protobuf.EnumValueOptions"),proto.google.protobuf.EnumValueOptions.extensions={},proto.google.protobuf.EnumValueOptions.extensionsBinary={},proto.google.protobuf.ServiceOptions=function(e){r.Message.initialize(this,e,0,500,proto.google.protobuf.ServiceOptions.repeatedFields_,null)},n.inherits(proto.google.protobuf.ServiceOptions,r.Message),n.DEBUG&&!COMPILED&&(proto.google.protobuf.ServiceOptions.displayName="proto.google.protobuf.ServiceOptions"),proto.google.protobuf.ServiceOptions.extensions={},proto.google.protobuf.ServiceOptions.extensionsBinary={},proto.google.protobuf.MethodOptions=function(e){r.Message.initialize(this,e,0,500,proto.google.protobuf.MethodOptions.repeatedFields_,null)},n.inherits(proto.google.protobuf.MethodOptions,r.Message),n.DEBUG&&!COMPILED&&(proto.google.protobuf.MethodOptions.displayName="proto.google.protobuf.MethodOptions"),proto.google.protobuf.MethodOptions.extensions={},proto.google.protobuf.MethodOptions.extensionsBinary={},proto.google.protobuf.UninterpretedOption=function(e){r.Message.initialize(this,e,0,-1,proto.google.protobuf.UninterpretedOption.repeatedFields_,null)},n.inherits(proto.google.protobuf.UninterpretedOption,r.Message),n.DEBUG&&!COMPILED&&(proto.google.protobuf.UninterpretedOption.displayName="proto.google.protobuf.UninterpretedOption"),proto.google.protobuf.UninterpretedOption.NamePart=function(e){r.Message.initialize(this,e,0,-1,null,null)},n.inherits(proto.google.protobuf.UninterpretedOption.NamePart,r.Message),n.DEBUG&&!COMPILED&&(proto.google.protobuf.UninterpretedOption.NamePart.displayName="proto.google.protobuf.UninterpretedOption.NamePart"),proto.google.protobuf.SourceCodeInfo=function(e){r.Message.initialize(this,e,0,-1,proto.google.protobuf.SourceCodeInfo.repeatedFields_,null)},n.inherits(proto.google.protobuf.SourceCodeInfo,r.Message),n.DEBUG&&!COMPILED&&(proto.google.protobuf.SourceCodeInfo.displayName="proto.google.protobuf.SourceCodeInfo"),proto.google.protobuf.SourceCodeInfo.Location=function(e){r.Message.initialize(this,e,0,-1,proto.google.protobuf.SourceCodeInfo.Location.repeatedFields_,null)},n.inherits(proto.google.protobuf.SourceCodeInfo.Location,r.Message),n.DEBUG&&!COMPILED&&(proto.google.protobuf.SourceCodeInfo.Location.displayName="proto.google.protobuf.SourceCodeInfo.Location"),proto.google.protobuf.GeneratedCodeInfo=function(e){r.Message.initialize(this,e,0,-1,proto.google.protobuf.GeneratedCodeInfo.repeatedFields_,null)},n.inherits(proto.google.protobuf.GeneratedCodeInfo,r.Message),n.DEBUG&&!COMPILED&&(proto.google.protobuf.GeneratedCodeInfo.displayName="proto.google.protobuf.GeneratedCodeInfo"),proto.google.protobuf.GeneratedCodeInfo.Annotation=function(e){r.Message.initialize(this,e,0,-1,proto.google.protobuf.GeneratedCodeInfo.Annotation.repeatedFields_,null)},n.inherits(proto.google.protobuf.GeneratedCodeInfo.Annotation,r.Message),n.DEBUG&&!COMPILED&&(proto.google.protobuf.GeneratedCodeInfo.Annotation.displayName="proto.google.protobuf.GeneratedCodeInfo.Annotation"),proto.google.protobuf.FileDescriptorSet.repeatedFields_=[1],r.Message.GENERATE_TO_OBJECT&&(proto.google.protobuf.FileDescriptorSet.prototype.toObject=function(e){return proto.google.protobuf.FileDescriptorSet.toObject(e,this)},proto.google.protobuf.FileDescriptorSet.toObject=function(e,t){var o={fileList:r.Message.toObjectList(t.getFileList(),proto.google.protobuf.FileDescriptorProto.toObject,e)};return e&&(o.$jspbMessageInstance=t),o}),proto.google.protobuf.FileDescriptorSet.deserializeBinary=function(e){var t=new r.BinaryReader(e),o=new proto.google.protobuf.FileDescriptorSet;return proto.google.protobuf.FileDescriptorSet.deserializeBinaryFromReader(o,t)},proto.google.protobuf.FileDescriptorSet.deserializeBinaryFromReader=function(e,t){for(;t.nextField()&&!t.isEndGroup();){switch(t.getFieldNumber()){case 1:var o=new proto.google.protobuf.FileDescriptorProto;t.readMessage(o,proto.google.protobuf.FileDescriptorProto.deserializeBinaryFromReader),e.addFile(o);break;default:t.skipField()}}return e},proto.google.protobuf.FileDescriptorSet.prototype.serializeBinary=function(){var e=new r.BinaryWriter;return proto.google.protobuf.FileDescriptorSet.serializeBinaryToWriter(this,e),e.getResultBuffer()},proto.google.protobuf.FileDescriptorSet.serializeBinaryToWriter=function(e,t){var o;(o=e.getFileList()).length>0&&t.writeRepeatedMessage(1,o,proto.google.protobuf.FileDescriptorProto.serializeBinaryToWriter)},proto.google.protobuf.FileDescriptorSet.prototype.getFileList=function(){return r.Message.getRepeatedWrapperField(this,proto.google.protobuf.FileDescriptorProto,1)},proto.google.protobuf.FileDescriptorSet.prototype.setFileList=function(e){return r.Message.setRepeatedWrapperField(this,1,e)},proto.google.protobuf.FileDescriptorSet.prototype.addFile=function(e,t){return r.Message.addToRepeatedWrapperField(this,1,e,proto.google.protobuf.FileDescriptorProto,t)},proto.google.protobuf.FileDescriptorSet.prototype.clearFileList=function(){return this.setFileList([])},proto.google.protobuf.FileDescriptorProto.repeatedFields_=[3,10,11,4,5,6,7],r.Message.GENERATE_TO_OBJECT&&(proto.google.protobuf.FileDescriptorProto.prototype.toObject=function(e){return proto.google.protobuf.FileDescriptorProto.toObject(e,this)},proto.google.protobuf.FileDescriptorProto.toObject=function(e,t){var o,n={name:null==(o=r.Message.getField(t,1))?void 0:o,pb_package:null==(o=r.Message.getField(t,2))?void 0:o,dependencyList:null==(o=r.Message.getRepeatedField(t,3))?void 0:o,publicDependencyList:null==(o=r.Message.getRepeatedField(t,10))?void 0:o,weakDependencyList:null==(o=r.Message.getRepeatedField(t,11))?void 0:o,messageTypeList:r.Message.toObjectList(t.getMessageTypeList(),proto.google.protobuf.DescriptorProto.toObject,e),enumTypeList:r.Message.toObjectList(t.getEnumTypeList(),proto.google.protobuf.EnumDescriptorProto.toObject,e),serviceList:r.Message.toObjectList(t.getServiceList(),proto.google.protobuf.ServiceDescriptorProto.toObject,e),extensionList:r.Message.toObjectList(t.getExtensionList(),proto.google.protobuf.FieldDescriptorProto.toObject,e),options:(o=t.getOptions())&&proto.google.protobuf.FileOptions.toObject(e,o),sourceCodeInfo:(o=t.getSourceCodeInfo())&&proto.google.protobuf.SourceCodeInfo.toObject(e,o),syntax:null==(o=r.Message.getField(t,12))?void 0:o};return e&&(n.$jspbMessageInstance=t),n}),proto.google.protobuf.FileDescriptorProto.deserializeBinary=function(e){var t=new r.BinaryReader(e),o=new proto.google.protobuf.FileDescriptorProto;return proto.google.protobuf.FileDescriptorProto.deserializeBinaryFromReader(o,t)},proto.google.protobuf.FileDescriptorProto.deserializeBinaryFromReader=function(e,t){for(;t.nextField()&&!t.isEndGroup();){switch(t.getFieldNumber()){case 1:var o=t.readString();e.setName(o);break;case 2:o=t.readString();e.setPackage(o);break;case 3:o=t.readString();e.addDependency(o);break;case 10:for(var r=t.isDelimited()?t.readPackedInt32():[t.readInt32()],n=0;n<r.length;n++)e.addPublicDependency(r[n]);break;case 11:for(r=t.isDelimited()?t.readPackedInt32():[t.readInt32()],n=0;n<r.length;n++)e.addWeakDependency(r[n]);break;case 4:o=new proto.google.protobuf.DescriptorProto;t.readMessage(o,proto.google.protobuf.DescriptorProto.deserializeBinaryFromReader),e.addMessageType(o);break;case 5:o=new proto.google.protobuf.EnumDescriptorProto;t.readMessage(o,proto.google.protobuf.EnumDescriptorProto.deserializeBinaryFromReader),e.addEnumType(o);break;case 6:o=new proto.google.protobuf.ServiceDescriptorProto;t.readMessage(o,proto.google.protobuf.ServiceDescriptorProto.deserializeBinaryFromReader),e.addService(o);break;case 7:o=new proto.google.protobuf.FieldDescriptorProto;t.readMessage(o,proto.google.protobuf.FieldDescriptorProto.deserializeBinaryFromReader),e.addExtension$(o);break;case 8:o=new proto.google.protobuf.FileOptions;t.readMessage(o,proto.google.protobuf.FileOptions.deserializeBinaryFromReader),e.setOptions(o);break;case 9:o=new proto.google.protobuf.SourceCodeInfo;t.readMessage(o,proto.google.protobuf.SourceCodeInfo.deserializeBinaryFromReader),e.setSourceCodeInfo(o);break;case 12:o=t.readString();e.setSyntax(o);break;default:t.skipField()}}return e},proto.google.protobuf.FileDescriptorProto.prototype.serializeBinary=function(){var e=new r.BinaryWriter;return proto.google.protobuf.FileDescriptorProto.serializeBinaryToWriter(this,e),e.getResultBuffer()},proto.google.protobuf.FileDescriptorProto.serializeBinaryToWriter=function(e,t){var o=void 0;null!=(o=r.Message.getField(e,1))&&t.writeString(1,o),null!=(o=r.Message.getField(e,2))&&t.writeString(2,o),(o=e.getDependencyList()).length>0&&t.writeRepeatedString(3,o),(o=e.getPublicDependencyList()).length>0&&t.writeRepeatedInt32(10,o),(o=e.getWeakDependencyList()).length>0&&t.writeRepeatedInt32(11,o),(o=e.getMessageTypeList()).length>0&&t.writeRepeatedMessage(4,o,proto.google.protobuf.DescriptorProto.serializeBinaryToWriter),(o=e.getEnumTypeList()).length>0&&t.writeRepeatedMessage(5,o,proto.google.protobuf.EnumDescriptorProto.serializeBinaryToWriter),(o=e.getServiceList()).length>0&&t.writeRepeatedMessage(6,o,proto.google.protobuf.ServiceDescriptorProto.serializeBinaryToWriter),(o=e.getExtensionList()).length>0&&t.writeRepeatedMessage(7,o,proto.google.protobuf.FieldDescriptorProto.serializeBinaryToWriter),null!=(o=e.getOptions())&&t.writeMessage(8,o,proto.google.protobuf.FileOptions.serializeBinaryToWriter),null!=(o=e.getSourceCodeInfo())&&t.writeMessage(9,o,proto.google.protobuf.SourceCodeInfo.serializeBinaryToWriter),null!=(o=r.Message.getField(e,12))&&t.writeString(12,o)},proto.google.protobuf.FileDescriptorProto.prototype.getName=function(){return r.Message.getFieldWithDefault(this,1,"")},proto.google.protobuf.FileDescriptorProto.prototype.setName=function(e){return r.Message.setField(this,1,e)},proto.google.protobuf.FileDescriptorProto.prototype.clearName=function(){return r.Message.setField(this,1,void 0)},proto.google.protobuf.FileDescriptorProto.prototype.hasName=function(){return null!=r.Message.getField(this,1)},proto.google.protobuf.FileDescriptorProto.prototype.getPackage=function(){return r.Message.getFieldWithDefault(this,2,"")},proto.google.protobuf.FileDescriptorProto.prototype.setPackage=function(e){return r.Message.setField(this,2,e)},proto.google.protobuf.FileDescriptorProto.prototype.clearPackage=function(){return r.Message.setField(this,2,void 0)},proto.google.protobuf.FileDescriptorProto.prototype.hasPackage=function(){return null!=r.Message.getField(this,2)},proto.google.protobuf.FileDescriptorProto.prototype.getDependencyList=function(){return r.Message.getRepeatedField(this,3)},proto.google.protobuf.FileDescriptorProto.prototype.setDependencyList=function(e){return r.Message.setField(this,3,e||[])},proto.google.protobuf.FileDescriptorProto.prototype.addDependency=function(e,t){return r.Message.addToRepeatedField(this,3,e,t)},proto.google.protobuf.FileDescriptorProto.prototype.clearDependencyList=function(){return this.setDependencyList([])},proto.google.protobuf.FileDescriptorProto.prototype.getPublicDependencyList=function(){return r.Message.getRepeatedField(this,10)},proto.google.protobuf.FileDescriptorProto.prototype.setPublicDependencyList=function(e){return r.Message.setField(this,10,e||[])},proto.google.protobuf.FileDescriptorProto.prototype.addPublicDependency=function(e,t){return r.Message.addToRepeatedField(this,10,e,t)},proto.google.protobuf.FileDescriptorProto.prototype.clearPublicDependencyList=function(){return this.setPublicDependencyList([])},proto.google.protobuf.FileDescriptorProto.prototype.getWeakDependencyList=function(){return r.Message.getRepeatedField(this,11)},proto.google.protobuf.FileDescriptorProto.prototype.setWeakDependencyList=function(e){return r.Message.setField(this,11,e||[])},proto.google.protobuf.FileDescriptorProto.prototype.addWeakDependency=function(e,t){return r.Message.addToRepeatedField(this,11,e,t)},proto.google.protobuf.FileDescriptorProto.prototype.clearWeakDependencyList=function(){return this.setWeakDependencyList([])},proto.google.protobuf.FileDescriptorProto.prototype.getMessageTypeList=function(){return r.Message.getRepeatedWrapperField(this,proto.google.protobuf.DescriptorProto,4)},proto.google.protobuf.FileDescriptorProto.prototype.setMessageTypeList=function(e){return r.Message.setRepeatedWrapperField(this,4,e)},proto.google.protobuf.FileDescriptorProto.prototype.addMessageType=function(e,t){return r.Message.addToRepeatedWrapperField(this,4,e,proto.google.protobuf.DescriptorProto,t)},proto.google.protobuf.FileDescriptorProto.prototype.clearMessageTypeList=function(){return this.setMessageTypeList([])},proto.google.protobuf.FileDescriptorProto.prototype.getEnumTypeList=function(){return r.Message.getRepeatedWrapperField(this,proto.google.protobuf.EnumDescriptorProto,5)},proto.google.protobuf.FileDescriptorProto.prototype.setEnumTypeList=function(e){return r.Message.setRepeatedWrapperField(this,5,e)},proto.google.protobuf.FileDescriptorProto.prototype.addEnumType=function(e,t){return r.Message.addToRepeatedWrapperField(this,5,e,proto.google.protobuf.EnumDescriptorProto,t)},proto.google.protobuf.FileDescriptorProto.prototype.clearEnumTypeList=function(){return this.setEnumTypeList([])},proto.google.protobuf.FileDescriptorProto.prototype.getServiceList=function(){return r.Message.getRepeatedWrapperField(this,proto.google.protobuf.ServiceDescriptorProto,6)},proto.google.protobuf.FileDescriptorProto.prototype.setServiceList=function(e){return r.Message.setRepeatedWrapperField(this,6,e)},proto.google.protobuf.FileDescriptorProto.prototype.addService=function(e,t){return r.Message.addToRepeatedWrapperField(this,6,e,proto.google.protobuf.ServiceDescriptorProto,t)},proto.google.protobuf.FileDescriptorProto.prototype.clearServiceList=function(){return this.setServiceList([])},proto.google.protobuf.FileDescriptorProto.prototype.getExtensionList=function(){return r.Message.getRepeatedWrapperField(this,proto.google.protobuf.FieldDescriptorProto,7)},proto.google.protobuf.FileDescriptorProto.prototype.setExtensionList=function(e){return r.Message.setRepeatedWrapperField(this,7,e)},proto.google.protobuf.FileDescriptorProto.prototype.addExtension$=function(e,t){return r.Message.addToRepeatedWrapperField(this,7,e,proto.google.protobuf.FieldDescriptorProto,t)},proto.google.protobuf.FileDescriptorProto.prototype.clearExtensionList=function(){return this.setExtensionList([])},proto.google.protobuf.FileDescriptorProto.prototype.getOptions=function(){return r.Message.getWrapperField(this,proto.google.protobuf.FileOptions,8)},proto.google.protobuf.FileDescriptorProto.prototype.setOptions=function(e){return r.Message.setWrapperField(this,8,e)},proto.google.protobuf.FileDescriptorProto.prototype.clearOptions=function(){return this.setOptions(void 0)},proto.google.protobuf.FileDescriptorProto.prototype.hasOptions=function(){return null!=r.Message.getField(this,8)},proto.google.protobuf.FileDescriptorProto.prototype.getSourceCodeInfo=function(){return r.Message.getWrapperField(this,proto.google.protobuf.SourceCodeInfo,9)},proto.google.protobuf.FileDescriptorProto.prototype.setSourceCodeInfo=function(e){return r.Message.setWrapperField(this,9,e)},proto.google.protobuf.FileDescriptorProto.prototype.clearSourceCodeInfo=function(){return this.setSourceCodeInfo(void 0)},proto.google.protobuf.FileDescriptorProto.prototype.hasSourceCodeInfo=function(){return null!=r.Message.getField(this,9)},proto.google.protobuf.FileDescriptorProto.prototype.getSyntax=function(){return r.Message.getFieldWithDefault(this,12,"")},proto.google.protobuf.FileDescriptorProto.prototype.setSyntax=function(e){return r.Message.setField(this,12,e)},proto.google.protobuf.FileDescriptorProto.prototype.clearSyntax=function(){return r.Message.setField(this,12,void 0)},proto.google.protobuf.FileDescriptorProto.prototype.hasSyntax=function(){return null!=r.Message.getField(this,12)},proto.google.protobuf.DescriptorProto.repeatedFields_=[2,6,3,4,5,8,9,10],r.Message.GENERATE_TO_OBJECT&&(proto.google.protobuf.DescriptorProto.prototype.toObject=function(e){return proto.google.protobuf.DescriptorProto.toObject(e,this)},proto.google.protobuf.DescriptorProto.toObject=function(e,t){var o,n={name:null==(o=r.Message.getField(t,1))?void 0:o,fieldList:r.Message.toObjectList(t.getFieldList(),proto.google.protobuf.FieldDescriptorProto.toObject,e),extensionList:r.Message.toObjectList(t.getExtensionList(),proto.google.protobuf.FieldDescriptorProto.toObject,e),nestedTypeList:r.Message.toObjectList(t.getNestedTypeList(),proto.google.protobuf.DescriptorProto.toObject,e),enumTypeList:r.Message.toObjectList(t.getEnumTypeList(),proto.google.protobuf.EnumDescriptorProto.toObject,e),extensionRangeList:r.Message.toObjectList(t.getExtensionRangeList(),proto.google.protobuf.DescriptorProto.ExtensionRange.toObject,e),oneofDeclList:r.Message.toObjectList(t.getOneofDeclList(),proto.google.protobuf.OneofDescriptorProto.toObject,e),options:(o=t.getOptions())&&proto.google.protobuf.MessageOptions.toObject(e,o),reservedRangeList:r.Message.toObjectList(t.getReservedRangeList(),proto.google.protobuf.DescriptorProto.ReservedRange.toObject,e),reservedNameList:null==(o=r.Message.getRepeatedField(t,10))?void 0:o};return e&&(n.$jspbMessageInstance=t),n}),proto.google.protobuf.DescriptorProto.deserializeBinary=function(e){var t=new r.BinaryReader(e),o=new proto.google.protobuf.DescriptorProto;return proto.google.protobuf.DescriptorProto.deserializeBinaryFromReader(o,t)},proto.google.protobuf.DescriptorProto.deserializeBinaryFromReader=function(e,t){for(;t.nextField()&&!t.isEndGroup();){switch(t.getFieldNumber()){case 1:var o=t.readString();e.setName(o);break;case 2:o=new proto.google.protobuf.FieldDescriptorProto;t.readMessage(o,proto.google.protobuf.FieldDescriptorProto.deserializeBinaryFromReader),e.addField(o);break;case 6:o=new proto.google.protobuf.FieldDescriptorProto;t.readMessage(o,proto.google.protobuf.FieldDescriptorProto.deserializeBinaryFromReader),e.addExtension$(o);break;case 3:o=new proto.google.protobuf.DescriptorProto;t.readMessage(o,proto.google.protobuf.DescriptorProto.deserializeBinaryFromReader),e.addNestedType(o);break;case 4:o=new proto.google.protobuf.EnumDescriptorProto;t.readMessage(o,proto.google.protobuf.EnumDescriptorProto.deserializeBinaryFromReader),e.addEnumType(o);break;case 5:o=new proto.google.protobuf.DescriptorProto.ExtensionRange;t.readMessage(o,proto.google.protobuf.DescriptorProto.ExtensionRange.deserializeBinaryFromReader),e.addExtensionRange(o);break;case 8:o=new proto.google.protobuf.OneofDescriptorProto;t.readMessage(o,proto.google.protobuf.OneofDescriptorProto.deserializeBinaryFromReader),e.addOneofDecl(o);break;case 7:o=new proto.google.protobuf.MessageOptions;t.readMessage(o,proto.google.protobuf.MessageOptions.deserializeBinaryFromReader),e.setOptions(o);break;case 9:o=new proto.google.protobuf.DescriptorProto.ReservedRange;t.readMessage(o,proto.google.protobuf.DescriptorProto.ReservedRange.deserializeBinaryFromReader),e.addReservedRange(o);break;case 10:o=t.readString();e.addReservedName(o);break;default:t.skipField()}}return e},proto.google.protobuf.DescriptorProto.prototype.serializeBinary=function(){var e=new r.BinaryWriter;return proto.google.protobuf.DescriptorProto.serializeBinaryToWriter(this,e),e.getResultBuffer()},proto.google.protobuf.DescriptorProto.serializeBinaryToWriter=function(e,t){var o=void 0;null!=(o=r.Message.getField(e,1))&&t.writeString(1,o),(o=e.getFieldList()).length>0&&t.writeRepeatedMessage(2,o,proto.google.protobuf.FieldDescriptorProto.serializeBinaryToWriter),(o=e.getExtensionList()).length>0&&t.writeRepeatedMessage(6,o,proto.google.protobuf.FieldDescriptorProto.serializeBinaryToWriter),(o=e.getNestedTypeList()).length>0&&t.writeRepeatedMessage(3,o,proto.google.protobuf.DescriptorProto.serializeBinaryToWriter),(o=e.getEnumTypeList()).length>0&&t.writeRepeatedMessage(4,o,proto.google.protobuf.EnumDescriptorProto.serializeBinaryToWriter),(o=e.getExtensionRangeList()).length>0&&t.writeRepeatedMessage(5,o,proto.google.protobuf.DescriptorProto.ExtensionRange.serializeBinaryToWriter),(o=e.getOneofDeclList()).length>0&&t.writeRepeatedMessage(8,o,proto.google.protobuf.OneofDescriptorProto.serializeBinaryToWriter),null!=(o=e.getOptions())&&t.writeMessage(7,o,proto.google.protobuf.MessageOptions.serializeBinaryToWriter),(o=e.getReservedRangeList()).length>0&&t.writeRepeatedMessage(9,o,proto.google.protobuf.DescriptorProto.ReservedRange.serializeBinaryToWriter),(o=e.getReservedNameList()).length>0&&t.writeRepeatedString(10,o)},r.Message.GENERATE_TO_OBJECT&&(proto.google.protobuf.DescriptorProto.ExtensionRange.prototype.toObject=function(e){return proto.google.protobuf.DescriptorProto.ExtensionRange.toObject(e,this)},proto.google.protobuf.DescriptorProto.ExtensionRange.toObject=function(e,t){var o,n={start:null==(o=r.Message.getField(t,1))?void 0:o,end:null==(o=r.Message.getField(t,2))?void 0:o,options:(o=t.getOptions())&&proto.google.protobuf.ExtensionRangeOptions.toObject(e,o)};return e&&(n.$jspbMessageInstance=t),n}),proto.google.protobuf.DescriptorProto.ExtensionRange.deserializeBinary=function(e){var t=new r.BinaryReader(e),o=new proto.google.protobuf.DescriptorProto.ExtensionRange;return proto.google.protobuf.DescriptorProto.ExtensionRange.deserializeBinaryFromReader(o,t)},proto.google.protobuf.DescriptorProto.ExtensionRange.deserializeBinaryFromReader=function(e,t){for(;t.nextField()&&!t.isEndGroup();){switch(t.getFieldNumber()){case 1:var o=t.readInt32();e.setStart(o);break;case 2:o=t.readInt32();e.setEnd(o);break;case 3:o=new proto.google.protobuf.ExtensionRangeOptions;t.readMessage(o,proto.google.protobuf.ExtensionRangeOptions.deserializeBinaryFromReader),e.setOptions(o);break;default:t.skipField()}}return e},proto.google.protobuf.DescriptorProto.ExtensionRange.prototype.serializeBinary=function(){var e=new r.BinaryWriter;return proto.google.protobuf.DescriptorProto.ExtensionRange.serializeBinaryToWriter(this,e),e.getResultBuffer()},proto.google.protobuf.DescriptorProto.ExtensionRange.serializeBinaryToWriter=function(e,t){var o=void 0;null!=(o=r.Message.getField(e,1))&&t.writeInt32(1,o),null!=(o=r.Message.getField(e,2))&&t.writeInt32(2,o),null!=(o=e.getOptions())&&t.writeMessage(3,o,proto.google.protobuf.ExtensionRangeOptions.serializeBinaryToWriter)},proto.google.protobuf.DescriptorProto.ExtensionRange.prototype.getStart=function(){return r.Message.getFieldWithDefault(this,1,0)},proto.google.protobuf.DescriptorProto.ExtensionRange.prototype.setStart=function(e){return r.Message.setField(this,1,e)},proto.google.protobuf.DescriptorProto.ExtensionRange.prototype.clearStart=function(){return r.Message.setField(this,1,void 0)},proto.google.protobuf.DescriptorProto.ExtensionRange.prototype.hasStart=function(){return null!=r.Message.getField(this,1)},proto.google.protobuf.DescriptorProto.ExtensionRange.prototype.getEnd=function(){return r.Message.getFieldWithDefault(this,2,0)},proto.google.protobuf.DescriptorProto.ExtensionRange.prototype.setEnd=function(e){return r.Message.setField(this,2,e)},proto.google.protobuf.DescriptorProto.ExtensionRange.prototype.clearEnd=function(){return r.Message.setField(this,2,void 0)},proto.google.protobuf.DescriptorProto.ExtensionRange.prototype.hasEnd=function(){return null!=r.Message.getField(this,2)},proto.google.protobuf.DescriptorProto.ExtensionRange.prototype.getOptions=function(){return r.Message.getWrapperField(this,proto.google.protobuf.ExtensionRangeOptions,3)},proto.google.protobuf.DescriptorProto.ExtensionRange.prototype.setOptions=function(e){return r.Message.setWrapperField(this,3,e)},proto.google.protobuf.DescriptorProto.ExtensionRange.prototype.clearOptions=function(){return this.setOptions(void 0)},proto.google.protobuf.DescriptorProto.ExtensionRange.prototype.hasOptions=function(){return null!=r.Message.getField(this,3)},r.Message.GENERATE_TO_OBJECT&&(proto.google.protobuf.DescriptorProto.ReservedRange.prototype.toObject=function(e){return proto.google.protobuf.DescriptorProto.ReservedRange.toObject(e,this)},proto.google.protobuf.DescriptorProto.ReservedRange.toObject=function(e,t){var o,n={start:null==(o=r.Message.getField(t,1))?void 0:o,end:null==(o=r.Message.getField(t,2))?void 0:o};return e&&(n.$jspbMessageInstance=t),n}),proto.google.protobuf.DescriptorProto.ReservedRange.deserializeBinary=function(e){var t=new r.BinaryReader(e),o=new proto.google.protobuf.DescriptorProto.ReservedRange;return proto.google.protobuf.DescriptorProto.ReservedRange.deserializeBinaryFromReader(o,t)},proto.google.protobuf.DescriptorProto.ReservedRange.deserializeBinaryFromReader=function(e,t){for(;t.nextField()&&!t.isEndGroup();){switch(t.getFieldNumber()){case 1:var o=t.readInt32();e.setStart(o);break;case 2:o=t.readInt32();e.setEnd(o);break;default:t.skipField()}}return e},proto.google.protobuf.DescriptorProto.ReservedRange.prototype.serializeBinary=function(){var e=new r.BinaryWriter;return proto.google.protobuf.DescriptorProto.ReservedRange.serializeBinaryToWriter(this,e),e.getResultBuffer()},proto.google.protobuf.DescriptorProto.ReservedRange.serializeBinaryToWriter=function(e,t){var o=void 0;null!=(o=r.Message.getField(e,1))&&t.writeInt32(1,o),null!=(o=r.Message.getField(e,2))&&t.writeInt32(2,o)},proto.google.protobuf.DescriptorProto.ReservedRange.prototype.getStart=function(){return r.Message.getFieldWithDefault(this,1,0)},proto.google.protobuf.DescriptorProto.ReservedRange.prototype.setStart=function(e){return r.Message.setField(this,1,e)},proto.google.protobuf.DescriptorProto.ReservedRange.prototype.clearStart=function(){return r.Message.setField(this,1,void 0)},proto.google.protobuf.DescriptorProto.ReservedRange.prototype.hasStart=function(){return null!=r.Message.getField(this,1)},proto.google.protobuf.DescriptorProto.ReservedRange.prototype.getEnd=function(){return r.Message.getFieldWithDefault(this,2,0)},proto.google.protobuf.DescriptorProto.ReservedRange.prototype.setEnd=function(e){return r.Message.setField(this,2,e)},proto.google.protobuf.DescriptorProto.ReservedRange.prototype.clearEnd=function(){return r.Message.setField(this,2,void 0)},proto.google.protobuf.DescriptorProto.ReservedRange.prototype.hasEnd=function(){return null!=r.Message.getField(this,2)},proto.google.protobuf.DescriptorProto.prototype.getName=function(){return r.Message.getFieldWithDefault(this,1,"")},proto.google.protobuf.DescriptorProto.prototype.setName=function(e){return r.Message.setField(this,1,e)},proto.google.protobuf.DescriptorProto.prototype.clearName=function(){return r.Message.setField(this,1,void 0)},proto.google.protobuf.DescriptorProto.prototype.hasName=function(){return null!=r.Message.getField(this,1)},proto.google.protobuf.DescriptorProto.prototype.getFieldList=function(){return r.Message.getRepeatedWrapperField(this,proto.google.protobuf.FieldDescriptorProto,2)},proto.google.protobuf.DescriptorProto.prototype.setFieldList=function(e){return r.Message.setRepeatedWrapperField(this,2,e)},proto.google.protobuf.DescriptorProto.prototype.addField=function(e,t){return r.Message.addToRepeatedWrapperField(this,2,e,proto.google.protobuf.FieldDescriptorProto,t)},proto.google.protobuf.DescriptorProto.prototype.clearFieldList=function(){return this.setFieldList([])},proto.google.protobuf.DescriptorProto.prototype.getExtensionList=function(){return r.Message.getRepeatedWrapperField(this,proto.google.protobuf.FieldDescriptorProto,6)},proto.google.protobuf.DescriptorProto.prototype.setExtensionList=function(e){return r.Message.setRepeatedWrapperField(this,6,e)},proto.google.protobuf.DescriptorProto.prototype.addExtension$=function(e,t){return r.Message.addToRepeatedWrapperField(this,6,e,proto.google.protobuf.FieldDescriptorProto,t)},proto.google.protobuf.DescriptorProto.prototype.clearExtensionList=function(){return this.setExtensionList([])},proto.google.protobuf.DescriptorProto.prototype.getNestedTypeList=function(){return r.Message.getRepeatedWrapperField(this,proto.google.protobuf.DescriptorProto,3)},proto.google.protobuf.DescriptorProto.prototype.setNestedTypeList=function(e){return r.Message.setRepeatedWrapperField(this,3,e)},proto.google.protobuf.DescriptorProto.prototype.addNestedType=function(e,t){return r.Message.addToRepeatedWrapperField(this,3,e,proto.google.protobuf.DescriptorProto,t)},proto.google.protobuf.DescriptorProto.prototype.clearNestedTypeList=function(){return this.setNestedTypeList([])},proto.google.protobuf.DescriptorProto.prototype.getEnumTypeList=function(){return r.Message.getRepeatedWrapperField(this,proto.google.protobuf.EnumDescriptorProto,4)},proto.google.protobuf.DescriptorProto.prototype.setEnumTypeList=function(e){return r.Message.setRepeatedWrapperField(this,4,e)},proto.google.protobuf.DescriptorProto.prototype.addEnumType=function(e,t){return r.Message.addToRepeatedWrapperField(this,4,e,proto.google.protobuf.EnumDescriptorProto,t)},proto.google.protobuf.DescriptorProto.prototype.clearEnumTypeList=function(){return this.setEnumTypeList([])},proto.google.protobuf.DescriptorProto.prototype.getExtensionRangeList=function(){return r.Message.getRepeatedWrapperField(this,proto.google.protobuf.DescriptorProto.ExtensionRange,5)},proto.google.protobuf.DescriptorProto.prototype.setExtensionRangeList=function(e){return r.Message.setRepeatedWrapperField(this,5,e)},proto.google.protobuf.DescriptorProto.prototype.addExtensionRange=function(e,t){return r.Message.addToRepeatedWrapperField(this,5,e,proto.google.protobuf.DescriptorProto.ExtensionRange,t)},proto.google.protobuf.DescriptorProto.prototype.clearExtensionRangeList=function(){return this.setExtensionRangeList([])},proto.google.protobuf.DescriptorProto.prototype.getOneofDeclList=function(){return r.Message.getRepeatedWrapperField(this,proto.google.protobuf.OneofDescriptorProto,8)},proto.google.protobuf.DescriptorProto.prototype.setOneofDeclList=function(e){return r.Message.setRepeatedWrapperField(this,8,e)},proto.google.protobuf.DescriptorProto.prototype.addOneofDecl=function(e,t){return r.Message.addToRepeatedWrapperField(this,8,e,proto.google.protobuf.OneofDescriptorProto,t)},proto.google.protobuf.DescriptorProto.prototype.clearOneofDeclList=function(){return this.setOneofDeclList([])},proto.google.protobuf.DescriptorProto.prototype.getOptions=function(){return r.Message.getWrapperField(this,proto.google.protobuf.MessageOptions,7)},proto.google.protobuf.DescriptorProto.prototype.setOptions=function(e){return r.Message.setWrapperField(this,7,e)},proto.google.protobuf.DescriptorProto.prototype.clearOptions=function(){return this.setOptions(void 0)},proto.google.protobuf.DescriptorProto.prototype.hasOptions=function(){return null!=r.Message.getField(this,7)},proto.google.protobuf.DescriptorProto.prototype.getReservedRangeList=function(){return r.Message.getRepeatedWrapperField(this,proto.google.protobuf.DescriptorProto.ReservedRange,9)},proto.google.protobuf.DescriptorProto.prototype.setReservedRangeList=function(e){return r.Message.setRepeatedWrapperField(this,9,e)},proto.google.protobuf.DescriptorProto.prototype.addReservedRange=function(e,t){return r.Message.addToRepeatedWrapperField(this,9,e,proto.google.protobuf.DescriptorProto.ReservedRange,t)},proto.google.protobuf.DescriptorProto.prototype.clearReservedRangeList=function(){return this.setReservedRangeList([])},proto.google.protobuf.DescriptorProto.prototype.getReservedNameList=function(){return r.Message.getRepeatedField(this,10)},proto.google.protobuf.DescriptorProto.prototype.setReservedNameList=function(e){return r.Message.setField(this,10,e||[])},proto.google.protobuf.DescriptorProto.prototype.addReservedName=function(e,t){return r.Message.addToRepeatedField(this,10,e,t)},proto.google.protobuf.DescriptorProto.prototype.clearReservedNameList=function(){return this.setReservedNameList([])},proto.google.protobuf.ExtensionRangeOptions.repeatedFields_=[999],r.Message.GENERATE_TO_OBJECT&&(proto.google.protobuf.ExtensionRangeOptions.prototype.toObject=function(e){return proto.google.protobuf.ExtensionRangeOptions.toObject(e,this)},proto.google.protobuf.ExtensionRangeOptions.toObject=function(e,t){var o={uninterpretedOptionList:r.Message.toObjectList(t.getUninterpretedOptionList(),proto.google.protobuf.UninterpretedOption.toObject,e)};return r.Message.toObjectExtension(t,o,proto.google.protobuf.ExtensionRangeOptions.extensions,proto.google.protobuf.ExtensionRangeOptions.prototype.getExtension,e),e&&(o.$jspbMessageInstance=t),o}),proto.google.protobuf.ExtensionRangeOptions.deserializeBinary=function(e){var t=new r.BinaryReader(e),o=new proto.google.protobuf.ExtensionRangeOptions;return proto.google.protobuf.ExtensionRangeOptions.deserializeBinaryFromReader(o,t)},proto.google.protobuf.ExtensionRangeOptions.deserializeBinaryFromReader=function(e,t){for(;t.nextField()&&!t.isEndGroup();){switch(t.getFieldNumber()){case 999:var o=new proto.google.protobuf.UninterpretedOption;t.readMessage(o,proto.google.protobuf.UninterpretedOption.deserializeBinaryFromReader),e.addUninterpretedOption(o);break;default:r.Message.readBinaryExtension(e,t,proto.google.protobuf.ExtensionRangeOptions.extensionsBinary,proto.google.protobuf.ExtensionRangeOptions.prototype.getExtension,proto.google.protobuf.ExtensionRangeOptions.prototype.setExtension)}}return e},proto.google.protobuf.ExtensionRangeOptions.prototype.serializeBinary=function(){var e=new r.BinaryWriter;return proto.google.protobuf.ExtensionRangeOptions.serializeBinaryToWriter(this,e),e.getResultBuffer()},proto.google.protobuf.ExtensionRangeOptions.serializeBinaryToWriter=function(e,t){var o;(o=e.getUninterpretedOptionList()).length>0&&t.writeRepeatedMessage(999,o,proto.google.protobuf.UninterpretedOption.serializeBinaryToWriter),r.Message.serializeBinaryExtensions(e,t,proto.google.protobuf.ExtensionRangeOptions.extensionsBinary,proto.google.protobuf.ExtensionRangeOptions.prototype.getExtension)},proto.google.protobuf.ExtensionRangeOptions.prototype.getUninterpretedOptionList=function(){return r.Message.getRepeatedWrapperField(this,proto.google.protobuf.UninterpretedOption,999)},proto.google.protobuf.ExtensionRangeOptions.prototype.setUninterpretedOptionList=function(e){return r.Message.setRepeatedWrapperField(this,999,e)},proto.google.protobuf.ExtensionRangeOptions.prototype.addUninterpretedOption=function(e,t){return r.Message.addToRepeatedWrapperField(this,999,e,proto.google.protobuf.UninterpretedOption,t)},proto.google.protobuf.ExtensionRangeOptions.prototype.clearUninterpretedOptionList=function(){return this.setUninterpretedOptionList([])},r.Message.GENERATE_TO_OBJECT&&(proto.google.protobuf.FieldDescriptorProto.prototype.toObject=function(e){return proto.google.protobuf.FieldDescriptorProto.toObject(e,this)},proto.google.protobuf.FieldDescriptorProto.toObject=function(e,t){var o,n={name:null==(o=r.Message.getField(t,1))?void 0:o,number:null==(o=r.Message.getField(t,3))?void 0:o,label:null==(o=r.Message.getField(t,4))?void 0:o,type:null==(o=r.Message.getField(t,5))?void 0:o,typeName:null==(o=r.Message.getField(t,6))?void 0:o,extendee:null==(o=r.Message.getField(t,2))?void 0:o,defaultValue:null==(o=r.Message.getField(t,7))?void 0:o,oneofIndex:null==(o=r.Message.getField(t,9))?void 0:o,jsonName:null==(o=r.Message.getField(t,10))?void 0:o,options:(o=t.getOptions())&&proto.google.protobuf.FieldOptions.toObject(e,o),proto3Optional:null==(o=r.Message.getBooleanField(t,17))?void 0:o};return e&&(n.$jspbMessageInstance=t),n}),proto.google.protobuf.FieldDescriptorProto.deserializeBinary=function(e){var t=new r.BinaryReader(e),o=new proto.google.protobuf.FieldDescriptorProto;return proto.google.protobuf.FieldDescriptorProto.deserializeBinaryFromReader(o,t)},proto.google.protobuf.FieldDescriptorProto.deserializeBinaryFromReader=function(e,t){for(;t.nextField()&&!t.isEndGroup();){switch(t.getFieldNumber()){case 1:var o=t.readString();e.setName(o);break;case 3:o=t.readInt32();e.setNumber(o);break;case 4:o=t.readEnum();e.setLabel(o);break;case 5:o=t.readEnum();e.setType(o);break;case 6:o=t.readString();e.setTypeName(o);break;case 2:o=t.readString();e.setExtendee(o);break;case 7:o=t.readString();e.setDefaultValue(o);break;case 9:o=t.readInt32();e.setOneofIndex(o);break;case 10:o=t.readString();e.setJsonName(o);break;case 8:o=new proto.google.protobuf.FieldOptions;t.readMessage(o,proto.google.protobuf.FieldOptions.deserializeBinaryFromReader),e.setOptions(o);break;case 17:o=t.readBool();e.setProto3Optional(o);break;default:t.skipField()}}return e},proto.google.protobuf.FieldDescriptorProto.prototype.serializeBinary=function(){var e=new r.BinaryWriter;return proto.google.protobuf.FieldDescriptorProto.serializeBinaryToWriter(this,e),e.getResultBuffer()},proto.google.protobuf.FieldDescriptorProto.serializeBinaryToWriter=function(e,t){var o=void 0;null!=(o=r.Message.getField(e,1))&&t.writeString(1,o),null!=(o=r.Message.getField(e,3))&&t.writeInt32(3,o),null!=(o=r.Message.getField(e,4))&&t.writeEnum(4,o),null!=(o=r.Message.getField(e,5))&&t.writeEnum(5,o),null!=(o=r.Message.getField(e,6))&&t.writeString(6,o),null!=(o=r.Message.getField(e,2))&&t.writeString(2,o),null!=(o=r.Message.getField(e,7))&&t.writeString(7,o),null!=(o=r.Message.getField(e,9))&&t.writeInt32(9,o),null!=(o=r.Message.getField(e,10))&&t.writeString(10,o),null!=(o=e.getOptions())&&t.writeMessage(8,o,proto.google.protobuf.FieldOptions.serializeBinaryToWriter),null!=(o=r.Message.getField(e,17))&&t.writeBool(17,o)},proto.google.protobuf.FieldDescriptorProto.Type={TYPE_DOUBLE:1,TYPE_FLOAT:2,TYPE_INT64:3,TYPE_UINT64:4,TYPE_INT32:5,TYPE_FIXED64:6,TYPE_FIXED32:7,TYPE_BOOL:8,TYPE_STRING:9,TYPE_GROUP:10,TYPE_MESSAGE:11,TYPE_BYTES:12,TYPE_UINT32:13,TYPE_ENUM:14,TYPE_SFIXED32:15,TYPE_SFIXED64:16,TYPE_SINT32:17,TYPE_SINT64:18},proto.google.protobuf.FieldDescriptorProto.Label={LABEL_OPTIONAL:1,LABEL_REQUIRED:2,LABEL_REPEATED:3},proto.google.protobuf.FieldDescriptorProto.prototype.getName=function(){return r.Message.getFieldWithDefault(this,1,"")},proto.google.protobuf.FieldDescriptorProto.prototype.setName=function(e){return r.Message.setField(this,1,e)},proto.google.protobuf.FieldDescriptorProto.prototype.clearName=function(){return r.Message.setField(this,1,void 0)},proto.google.protobuf.FieldDescriptorProto.prototype.hasName=function(){return null!=r.Message.getField(this,1)},proto.google.protobuf.FieldDescriptorProto.prototype.getNumber=function(){return r.Message.getFieldWithDefault(this,3,0)},proto.google.protobuf.FieldDescriptorProto.prototype.setNumber=function(e){return r.Message.setField(this,3,e)},proto.google.protobuf.FieldDescriptorProto.prototype.clearNumber=function(){return r.Message.setField(this,3,void 0)},proto.google.protobuf.FieldDescriptorProto.prototype.hasNumber=function(){return null!=r.Message.getField(this,3)},proto.google.protobuf.FieldDescriptorProto.prototype.getLabel=function(){return r.Message.getFieldWithDefault(this,4,1)},proto.google.protobuf.FieldDescriptorProto.prototype.setLabel=function(e){return r.Message.setField(this,4,e)},proto.google.protobuf.FieldDescriptorProto.prototype.clearLabel=function(){return r.Message.setField(this,4,void 0)},proto.google.protobuf.FieldDescriptorProto.prototype.hasLabel=function(){return null!=r.Message.getField(this,4)},proto.google.protobuf.FieldDescriptorProto.prototype.getType=function(){return r.Message.getFieldWithDefault(this,5,1)},proto.google.protobuf.FieldDescriptorProto.prototype.setType=function(e){return r.Message.setField(this,5,e)},proto.google.protobuf.FieldDescriptorProto.prototype.clearType=function(){return r.Message.setField(this,5,void 0)},proto.google.protobuf.FieldDescriptorProto.prototype.hasType=function(){return null!=r.Message.getField(this,5)},proto.google.protobuf.FieldDescriptorProto.prototype.getTypeName=function(){return r.Message.getFieldWithDefault(this,6,"")},proto.google.protobuf.FieldDescriptorProto.prototype.setTypeName=function(e){return r.Message.setField(this,6,e)},proto.google.protobuf.FieldDescriptorProto.prototype.clearTypeName=function(){return r.Message.setField(this,6,void 0)},proto.google.protobuf.FieldDescriptorProto.prototype.hasTypeName=function(){return null!=r.Message.getField(this,6)},proto.google.protobuf.FieldDescriptorProto.prototype.getExtendee=function(){return r.Message.getFieldWithDefault(this,2,"")},proto.google.protobuf.FieldDescriptorProto.prototype.setExtendee=function(e){return r.Message.setField(this,2,e)},proto.google.protobuf.FieldDescriptorProto.prototype.clearExtendee=function(){return r.Message.setField(this,2,void 0)},proto.google.protobuf.FieldDescriptorProto.prototype.hasExtendee=function(){return null!=r.Message.getField(this,2)},proto.google.protobuf.FieldDescriptorProto.prototype.getDefaultValue=function(){return r.Message.getFieldWithDefault(this,7,"")},proto.google.protobuf.FieldDescriptorProto.prototype.setDefaultValue=function(e){return r.Message.setField(this,7,e)},proto.google.protobuf.FieldDescriptorProto.prototype.clearDefaultValue=function(){return r.Message.setField(this,7,void 0)},proto.google.protobuf.FieldDescriptorProto.prototype.hasDefaultValue=function(){return null!=r.Message.getField(this,7)},proto.google.protobuf.FieldDescriptorProto.prototype.getOneofIndex=function(){return r.Message.getFieldWithDefault(this,9,0)},proto.google.protobuf.FieldDescriptorProto.prototype.setOneofIndex=function(e){return r.Message.setField(this,9,e)},proto.google.protobuf.FieldDescriptorProto.prototype.clearOneofIndex=function(){return r.Message.setField(this,9,void 0)},proto.google.protobuf.FieldDescriptorProto.prototype.hasOneofIndex=function(){return null!=r.Message.getField(this,9)},proto.google.protobuf.FieldDescriptorProto.prototype.getJsonName=function(){return r.Message.getFieldWithDefault(this,10,"")},proto.google.protobuf.FieldDescriptorProto.prototype.setJsonName=function(e){return r.Message.setField(this,10,e)},proto.google.protobuf.FieldDescriptorProto.prototype.clearJsonName=function(){return r.Message.setField(this,10,void 0)},proto.google.protobuf.FieldDescriptorProto.prototype.hasJsonName=function(){return null!=r.Message.getField(this,10)},proto.google.protobuf.FieldDescriptorProto.prototype.getOptions=function(){return r.Message.getWrapperField(this,proto.google.protobuf.FieldOptions,8)},proto.google.protobuf.FieldDescriptorProto.prototype.setOptions=function(e){return r.Message.setWrapperField(this,8,e)},proto.google.protobuf.FieldDescriptorProto.prototype.clearOptions=function(){return this.setOptions(void 0)},proto.google.protobuf.FieldDescriptorProto.prototype.hasOptions=function(){return null!=r.Message.getField(this,8)},proto.google.protobuf.FieldDescriptorProto.prototype.getProto3Optional=function(){return r.Message.getBooleanFieldWithDefault(this,17,!1)},proto.google.protobuf.FieldDescriptorProto.prototype.setProto3Optional=function(e){return r.Message.setField(this,17,e)},proto.google.protobuf.FieldDescriptorProto.prototype.clearProto3Optional=function(){return r.Message.setField(this,17,void 0)},proto.google.protobuf.FieldDescriptorProto.prototype.hasProto3Optional=function(){return null!=r.Message.getField(this,17)},r.Message.GENERATE_TO_OBJECT&&(proto.google.protobuf.OneofDescriptorProto.prototype.toObject=function(e){return proto.google.protobuf.OneofDescriptorProto.toObject(e,this)},proto.google.protobuf.OneofDescriptorProto.toObject=function(e,t){var o,n={name:null==(o=r.Message.getField(t,1))?void 0:o,options:(o=t.getOptions())&&proto.google.protobuf.OneofOptions.toObject(e,o)};return e&&(n.$jspbMessageInstance=t),n}),proto.google.protobuf.OneofDescriptorProto.deserializeBinary=function(e){var t=new r.BinaryReader(e),o=new proto.google.protobuf.OneofDescriptorProto;return proto.google.protobuf.OneofDescriptorProto.deserializeBinaryFromReader(o,t)},proto.google.protobuf.OneofDescriptorProto.deserializeBinaryFromReader=function(e,t){for(;t.nextField()&&!t.isEndGroup();){switch(t.getFieldNumber()){case 1:var o=t.readString();e.setName(o);break;case 2:o=new proto.google.protobuf.OneofOptions;t.readMessage(o,proto.google.protobuf.OneofOptions.deserializeBinaryFromReader),e.setOptions(o);break;default:t.skipField()}}return e},proto.google.protobuf.OneofDescriptorProto.prototype.serializeBinary=function(){var e=new r.BinaryWriter;return proto.google.protobuf.OneofDescriptorProto.serializeBinaryToWriter(this,e),e.getResultBuffer()},proto.google.protobuf.OneofDescriptorProto.serializeBinaryToWriter=function(e,t){var o=void 0;null!=(o=r.Message.getField(e,1))&&t.writeString(1,o),null!=(o=e.getOptions())&&t.writeMessage(2,o,proto.google.protobuf.OneofOptions.serializeBinaryToWriter)},proto.google.protobuf.OneofDescriptorProto.prototype.getName=function(){return r.Message.getFieldWithDefault(this,1,"")},proto.google.protobuf.OneofDescriptorProto.prototype.setName=function(e){return r.Message.setField(this,1,e)},proto.google.protobuf.OneofDescriptorProto.prototype.clearName=function(){return r.Message.setField(this,1,void 0)},proto.google.protobuf.OneofDescriptorProto.prototype.hasName=function(){return null!=r.Message.getField(this,1)},proto.google.protobuf.OneofDescriptorProto.prototype.getOptions=function(){return r.Message.getWrapperField(this,proto.google.protobuf.OneofOptions,2)},proto.google.protobuf.OneofDescriptorProto.prototype.setOptions=function(e){return r.Message.setWrapperField(this,2,e)},proto.google.protobuf.OneofDescriptorProto.prototype.clearOptions=function(){return this.setOptions(void 0)},proto.google.protobuf.OneofDescriptorProto.prototype.hasOptions=function(){return null!=r.Message.getField(this,2)},proto.google.protobuf.EnumDescriptorProto.repeatedFields_=[2,4,5],r.Message.GENERATE_TO_OBJECT&&(proto.google.protobuf.EnumDescriptorProto.prototype.toObject=function(e){return proto.google.protobuf.EnumDescriptorProto.toObject(e,this)},proto.google.protobuf.EnumDescriptorProto.toObject=function(e,t){var o,n={name:null==(o=r.Message.getField(t,1))?void 0:o,valueList:r.Message.toObjectList(t.getValueList(),proto.google.protobuf.EnumValueDescriptorProto.toObject,e),options:(o=t.getOptions())&&proto.google.protobuf.EnumOptions.toObject(e,o),reservedRangeList:r.Message.toObjectList(t.getReservedRangeList(),proto.google.protobuf.EnumDescriptorProto.EnumReservedRange.toObject,e),reservedNameList:null==(o=r.Message.getRepeatedField(t,5))?void 0:o};return e&&(n.$jspbMessageInstance=t),n}),proto.google.protobuf.EnumDescriptorProto.deserializeBinary=function(e){var t=new r.BinaryReader(e),o=new proto.google.protobuf.EnumDescriptorProto;return proto.google.protobuf.EnumDescriptorProto.deserializeBinaryFromReader(o,t)},proto.google.protobuf.EnumDescriptorProto.deserializeBinaryFromReader=function(e,t){for(;t.nextField()&&!t.isEndGroup();){switch(t.getFieldNumber()){case 1:var o=t.readString();e.setName(o);break;case 2:o=new proto.google.protobuf.EnumValueDescriptorProto;t.readMessage(o,proto.google.protobuf.EnumValueDescriptorProto.deserializeBinaryFromReader),e.addValue(o);break;case 3:o=new proto.google.protobuf.EnumOptions;t.readMessage(o,proto.google.protobuf.EnumOptions.deserializeBinaryFromReader),e.setOptions(o);break;case 4:o=new proto.google.protobuf.EnumDescriptorProto.EnumReservedRange;t.readMessage(o,proto.google.protobuf.EnumDescriptorProto.EnumReservedRange.deserializeBinaryFromReader),e.addReservedRange(o);break;case 5:o=t.readString();e.addReservedName(o);break;default:t.skipField()}}return e},proto.google.protobuf.EnumDescriptorProto.prototype.serializeBinary=function(){var e=new r.BinaryWriter;return proto.google.protobuf.EnumDescriptorProto.serializeBinaryToWriter(this,e),e.getResultBuffer()},proto.google.protobuf.EnumDescriptorProto.serializeBinaryToWriter=function(e,t){var o=void 0;null!=(o=r.Message.getField(e,1))&&t.writeString(1,o),(o=e.getValueList()).length>0&&t.writeRepeatedMessage(2,o,proto.google.protobuf.EnumValueDescriptorProto.serializeBinaryToWriter),null!=(o=e.getOptions())&&t.writeMessage(3,o,proto.google.protobuf.EnumOptions.serializeBinaryToWriter),(o=e.getReservedRangeList()).length>0&&t.writeRepeatedMessage(4,o,proto.google.protobuf.EnumDescriptorProto.EnumReservedRange.serializeBinaryToWriter),(o=e.getReservedNameList()).length>0&&t.writeRepeatedString(5,o)},r.Message.GENERATE_TO_OBJECT&&(proto.google.protobuf.EnumDescriptorProto.EnumReservedRange.prototype.toObject=function(e){return proto.google.protobuf.EnumDescriptorProto.EnumReservedRange.toObject(e,this)},proto.google.protobuf.EnumDescriptorProto.EnumReservedRange.toObject=function(e,t){var o,n={start:null==(o=r.Message.getField(t,1))?void 0:o,end:null==(o=r.Message.getField(t,2))?void 0:o};return e&&(n.$jspbMessageInstance=t),n}),proto.google.protobuf.EnumDescriptorProto.EnumReservedRange.deserializeBinary=function(e){var t=new r.BinaryReader(e),o=new proto.google.protobuf.EnumDescriptorProto.EnumReservedRange;return proto.google.protobuf.EnumDescriptorProto.EnumReservedRange.deserializeBinaryFromReader(o,t)},proto.google.protobuf.EnumDescriptorProto.EnumReservedRange.deserializeBinaryFromReader=function(e,t){for(;t.nextField()&&!t.isEndGroup();){switch(t.getFieldNumber()){case 1:var o=t.readInt32();e.setStart(o);break;case 2:o=t.readInt32();e.setEnd(o);break;default:t.skipField()}}return e},proto.google.protobuf.EnumDescriptorProto.EnumReservedRange.prototype.serializeBinary=function(){var e=new r.BinaryWriter;return proto.google.protobuf.EnumDescriptorProto.EnumReservedRange.serializeBinaryToWriter(this,e),e.getResultBuffer()},proto.google.protobuf.EnumDescriptorProto.EnumReservedRange.serializeBinaryToWriter=function(e,t){var o=void 0;null!=(o=r.Message.getField(e,1))&&t.writeInt32(1,o),null!=(o=r.Message.getField(e,2))&&t.writeInt32(2,o)},proto.google.protobuf.EnumDescriptorProto.EnumReservedRange.prototype.getStart=function(){return r.Message.getFieldWithDefault(this,1,0)},proto.google.protobuf.EnumDescriptorProto.EnumReservedRange.prototype.setStart=function(e){return r.Message.setField(this,1,e)},proto.google.protobuf.EnumDescriptorProto.EnumReservedRange.prototype.clearStart=function(){return r.Message.setField(this,1,void 0)},proto.google.protobuf.EnumDescriptorProto.EnumReservedRange.prototype.hasStart=function(){return null!=r.Message.getField(this,1)},proto.google.protobuf.EnumDescriptorProto.EnumReservedRange.prototype.getEnd=function(){return r.Message.getFieldWithDefault(this,2,0)},proto.google.protobuf.EnumDescriptorProto.EnumReservedRange.prototype.setEnd=function(e){return r.Message.setField(this,2,e)},proto.google.protobuf.EnumDescriptorProto.EnumReservedRange.prototype.clearEnd=function(){return r.Message.setField(this,2,void 0)},proto.google.protobuf.EnumDescriptorProto.EnumReservedRange.prototype.hasEnd=function(){return null!=r.Message.getField(this,2)},proto.google.protobuf.EnumDescriptorProto.prototype.getName=function(){return r.Message.getFieldWithDefault(this,1,"")},proto.google.protobuf.EnumDescriptorProto.prototype.setName=function(e){return r.Message.setField(this,1,e)},proto.google.protobuf.EnumDescriptorProto.prototype.clearName=function(){return r.Message.setField(this,1,void 0)},proto.google.protobuf.EnumDescriptorProto.prototype.hasName=function(){return null!=r.Message.getField(this,1)},proto.google.protobuf.EnumDescriptorProto.prototype.getValueList=function(){return r.Message.getRepeatedWrapperField(this,proto.google.protobuf.EnumValueDescriptorProto,2)},proto.google.protobuf.EnumDescriptorProto.prototype.setValueList=function(e){return r.Message.setRepeatedWrapperField(this,2,e)},proto.google.protobuf.EnumDescriptorProto.prototype.addValue=function(e,t){return r.Message.addToRepeatedWrapperField(this,2,e,proto.google.protobuf.EnumValueDescriptorProto,t)},proto.google.protobuf.EnumDescriptorProto.prototype.clearValueList=function(){return this.setValueList([])},proto.google.protobuf.EnumDescriptorProto.prototype.getOptions=function(){return r.Message.getWrapperField(this,proto.google.protobuf.EnumOptions,3)},proto.google.protobuf.EnumDescriptorProto.prototype.setOptions=function(e){return r.Message.setWrapperField(this,3,e)},proto.google.protobuf.EnumDescriptorProto.prototype.clearOptions=function(){return this.setOptions(void 0)},proto.google.protobuf.EnumDescriptorProto.prototype.hasOptions=function(){return null!=r.Message.getField(this,3)},proto.google.protobuf.EnumDescriptorProto.prototype.getReservedRangeList=function(){return r.Message.getRepeatedWrapperField(this,proto.google.protobuf.EnumDescriptorProto.EnumReservedRange,4)},proto.google.protobuf.EnumDescriptorProto.prototype.setReservedRangeList=function(e){return r.Message.setRepeatedWrapperField(this,4,e)},proto.google.protobuf.EnumDescriptorProto.prototype.addReservedRange=function(e,t){return r.Message.addToRepeatedWrapperField(this,4,e,proto.google.protobuf.EnumDescriptorProto.EnumReservedRange,t)},proto.google.protobuf.EnumDescriptorProto.prototype.clearReservedRangeList=function(){return this.setReservedRangeList([])},proto.google.protobuf.EnumDescriptorProto.prototype.getReservedNameList=function(){return r.Message.getRepeatedField(this,5)},proto.google.protobuf.EnumDescriptorProto.prototype.setReservedNameList=function(e){return r.Message.setField(this,5,e||[])},proto.google.protobuf.EnumDescriptorProto.prototype.addReservedName=function(e,t){return r.Message.addToRepeatedField(this,5,e,t)},proto.google.protobuf.EnumDescriptorProto.prototype.clearReservedNameList=function(){return this.setReservedNameList([])},r.Message.GENERATE_TO_OBJECT&&(proto.google.protobuf.EnumValueDescriptorProto.prototype.toObject=function(e){return proto.google.protobuf.EnumValueDescriptorProto.toObject(e,this)},proto.google.protobuf.EnumValueDescriptorProto.toObject=function(e,t){var o,n={name:null==(o=r.Message.getField(t,1))?void 0:o,number:null==(o=r.Message.getField(t,2))?void 0:o,options:(o=t.getOptions())&&proto.google.protobuf.EnumValueOptions.toObject(e,o)};return e&&(n.$jspbMessageInstance=t),n}),proto.google.protobuf.EnumValueDescriptorProto.deserializeBinary=function(e){var t=new r.BinaryReader(e),o=new proto.google.protobuf.EnumValueDescriptorProto;return proto.google.protobuf.EnumValueDescriptorProto.deserializeBinaryFromReader(o,t)},proto.google.protobuf.EnumValueDescriptorProto.deserializeBinaryFromReader=function(e,t){for(;t.nextField()&&!t.isEndGroup();){switch(t.getFieldNumber()){case 1:var o=t.readString();e.setName(o);break;case 2:o=t.readInt32();e.setNumber(o);break;case 3:o=new proto.google.protobuf.EnumValueOptions;t.readMessage(o,proto.google.protobuf.EnumValueOptions.deserializeBinaryFromReader),e.setOptions(o);break;default:t.skipField()}}return e},proto.google.protobuf.EnumValueDescriptorProto.prototype.serializeBinary=function(){var e=new r.BinaryWriter;return proto.google.protobuf.EnumValueDescriptorProto.serializeBinaryToWriter(this,e),e.getResultBuffer()},proto.google.protobuf.EnumValueDescriptorProto.serializeBinaryToWriter=function(e,t){var o=void 0;null!=(o=r.Message.getField(e,1))&&t.writeString(1,o),null!=(o=r.Message.getField(e,2))&&t.writeInt32(2,o),null!=(o=e.getOptions())&&t.writeMessage(3,o,proto.google.protobuf.EnumValueOptions.serializeBinaryToWriter)},proto.google.protobuf.EnumValueDescriptorProto.prototype.getName=function(){return r.Message.getFieldWithDefault(this,1,"")},proto.google.protobuf.EnumValueDescriptorProto.prototype.setName=function(e){return r.Message.setField(this,1,e)},proto.google.protobuf.EnumValueDescriptorProto.prototype.clearName=function(){return r.Message.setField(this,1,void 0)},proto.google.protobuf.EnumValueDescriptorProto.prototype.hasName=function(){return null!=r.Message.getField(this,1)},proto.google.protobuf.EnumValueDescriptorProto.prototype.getNumber=function(){return r.Message.getFieldWithDefault(this,2,0)},proto.google.protobuf.EnumValueDescriptorProto.prototype.setNumber=function(e){return r.Message.setField(this,2,e)},proto.google.protobuf.EnumValueDescriptorProto.prototype.clearNumber=function(){return r.Message.setField(this,2,void 0)},proto.google.protobuf.EnumValueDescriptorProto.prototype.hasNumber=function(){return null!=r.Message.getField(this,2)},proto.google.protobuf.EnumValueDescriptorProto.prototype.getOptions=function(){return r.Message.getWrapperField(this,proto.google.protobuf.EnumValueOptions,3)},proto.google.protobuf.EnumValueDescriptorProto.prototype.setOptions=function(e){return r.Message.setWrapperField(this,3,e)},proto.google.protobuf.EnumValueDescriptorProto.prototype.clearOptions=function(){return this.setOptions(void 0)},proto.google.protobuf.EnumValueDescriptorProto.prototype.hasOptions=function(){return null!=r.Message.getField(this,3)},proto.google.protobuf.ServiceDescriptorProto.repeatedFields_=[2],r.Message.GENERATE_TO_OBJECT&&(proto.google.protobuf.ServiceDescriptorProto.prototype.toObject=function(e){return proto.google.protobuf.ServiceDescriptorProto.toObject(e,this)},proto.google.protobuf.ServiceDescriptorProto.toObject=function(e,t){var o,n={name:null==(o=r.Message.getField(t,1))?void 0:o,methodList:r.Message.toObjectList(t.getMethodList(),proto.google.protobuf.MethodDescriptorProto.toObject,e),options:(o=t.getOptions())&&proto.google.protobuf.ServiceOptions.toObject(e,o)};return e&&(n.$jspbMessageInstance=t),n}),proto.google.protobuf.ServiceDescriptorProto.deserializeBinary=function(e){var t=new r.BinaryReader(e),o=new proto.google.protobuf.ServiceDescriptorProto;return proto.google.protobuf.ServiceDescriptorProto.deserializeBinaryFromReader(o,t)},proto.google.protobuf.ServiceDescriptorProto.deserializeBinaryFromReader=function(e,t){for(;t.nextField()&&!t.isEndGroup();){switch(t.getFieldNumber()){case 1:var o=t.readString();e.setName(o);break;case 2:o=new proto.google.protobuf.MethodDescriptorProto;t.readMessage(o,proto.google.protobuf.MethodDescriptorProto.deserializeBinaryFromReader),e.addMethod(o);break;case 3:o=new proto.google.protobuf.ServiceOptions;t.readMessage(o,proto.google.protobuf.ServiceOptions.deserializeBinaryFromReader),e.setOptions(o);break;default:t.skipField()}}return e},proto.google.protobuf.ServiceDescriptorProto.prototype.serializeBinary=function(){var e=new r.BinaryWriter;return proto.google.protobuf.ServiceDescriptorProto.serializeBinaryToWriter(this,e),e.getResultBuffer()},proto.google.protobuf.ServiceDescriptorProto.serializeBinaryToWriter=function(e,t){var o=void 0;null!=(o=r.Message.getField(e,1))&&t.writeString(1,o),(o=e.getMethodList()).length>0&&t.writeRepeatedMessage(2,o,proto.google.protobuf.MethodDescriptorProto.serializeBinaryToWriter),null!=(o=e.getOptions())&&t.writeMessage(3,o,proto.google.protobuf.ServiceOptions.serializeBinaryToWriter)},proto.google.protobuf.ServiceDescriptorProto.prototype.getName=function(){return r.Message.getFieldWithDefault(this,1,"")},proto.google.protobuf.ServiceDescriptorProto.prototype.setName=function(e){return r.Message.setField(this,1,e)},proto.google.protobuf.ServiceDescriptorProto.prototype.clearName=function(){return r.Message.setField(this,1,void 0)},proto.google.protobuf.ServiceDescriptorProto.prototype.hasName=function(){return null!=r.Message.getField(this,1)},proto.google.protobuf.ServiceDescriptorProto.prototype.getMethodList=function(){return r.Message.getRepeatedWrapperField(this,proto.google.protobuf.MethodDescriptorProto,2)},proto.google.protobuf.ServiceDescriptorProto.prototype.setMethodList=function(e){return r.Message.setRepeatedWrapperField(this,2,e)},proto.google.protobuf.ServiceDescriptorProto.prototype.addMethod=function(e,t){return r.Message.addToRepeatedWrapperField(this,2,e,proto.google.protobuf.MethodDescriptorProto,t)},proto.google.protobuf.ServiceDescriptorProto.prototype.clearMethodList=function(){return this.setMethodList([])},proto.google.protobuf.ServiceDescriptorProto.prototype.getOptions=function(){return r.Message.getWrapperField(this,proto.google.protobuf.ServiceOptions,3)},proto.google.protobuf.ServiceDescriptorProto.prototype.setOptions=function(e){return r.Message.setWrapperField(this,3,e)},proto.google.protobuf.ServiceDescriptorProto.prototype.clearOptions=function(){return this.setOptions(void 0)},proto.google.protobuf.ServiceDescriptorProto.prototype.hasOptions=function(){return null!=r.Message.getField(this,3)},r.Message.GENERATE_TO_OBJECT&&(proto.google.protobuf.MethodDescriptorProto.prototype.toObject=function(e){return proto.google.protobuf.MethodDescriptorProto.toObject(e,this)},proto.google.protobuf.MethodDescriptorProto.toObject=function(e,t){var o,n={name:null==(o=r.Message.getField(t,1))?void 0:o,inputType:null==(o=r.Message.getField(t,2))?void 0:o,outputType:null==(o=r.Message.getField(t,3))?void 0:o,options:(o=t.getOptions())&&proto.google.protobuf.MethodOptions.toObject(e,o),clientStreaming:r.Message.getBooleanFieldWithDefault(t,5,!1),serverStreaming:r.Message.getBooleanFieldWithDefault(t,6,!1)};return e&&(n.$jspbMessageInstance=t),n}),proto.google.protobuf.MethodDescriptorProto.deserializeBinary=function(e){var t=new r.BinaryReader(e),o=new proto.google.protobuf.MethodDescriptorProto;return proto.google.protobuf.MethodDescriptorProto.deserializeBinaryFromReader(o,t)},proto.google.protobuf.MethodDescriptorProto.deserializeBinaryFromReader=function(e,t){for(;t.nextField()&&!t.isEndGroup();){switch(t.getFieldNumber()){case 1:var o=t.readString();e.setName(o);break;case 2:o=t.readString();e.setInputType(o);break;case 3:o=t.readString();e.setOutputType(o);break;case 4:o=new proto.google.protobuf.MethodOptions;t.readMessage(o,proto.google.protobuf.MethodOptions.deserializeBinaryFromReader),e.setOptions(o);break;case 5:o=t.readBool();e.setClientStreaming(o);break;case 6:o=t.readBool();e.setServerStreaming(o);break;default:t.skipField()}}return e},proto.google.protobuf.MethodDescriptorProto.prototype.serializeBinary=function(){var e=new r.BinaryWriter;return proto.google.protobuf.MethodDescriptorProto.serializeBinaryToWriter(this,e),e.getResultBuffer()},proto.google.protobuf.MethodDescriptorProto.serializeBinaryToWriter=function(e,t){var o=void 0;null!=(o=r.Message.getField(e,1))&&t.writeString(1,o),null!=(o=r.Message.getField(e,2))&&t.writeString(2,o),null!=(o=r.Message.getField(e,3))&&t.writeString(3,o),null!=(o=e.getOptions())&&t.writeMessage(4,o,proto.google.protobuf.MethodOptions.serializeBinaryToWriter),null!=(o=r.Message.getField(e,5))&&t.writeBool(5,o),null!=(o=r.Message.getField(e,6))&&t.writeBool(6,o)},proto.google.protobuf.MethodDescriptorProto.prototype.getName=function(){return r.Message.getFieldWithDefault(this,1,"")},proto.google.protobuf.MethodDescriptorProto.prototype.setName=function(e){return r.Message.setField(this,1,e)},proto.google.protobuf.MethodDescriptorProto.prototype.clearName=function(){return r.Message.setField(this,1,void 0)},proto.google.protobuf.MethodDescriptorProto.prototype.hasName=function(){return null!=r.Message.getField(this,1)},proto.google.protobuf.MethodDescriptorProto.prototype.getInputType=function(){return r.Message.getFieldWithDefault(this,2,"")},proto.google.protobuf.MethodDescriptorProto.prototype.setInputType=function(e){return r.Message.setField(this,2,e)},proto.google.protobuf.MethodDescriptorProto.prototype.clearInputType=function(){return r.Message.setField(this,2,void 0)},proto.google.protobuf.MethodDescriptorProto.prototype.hasInputType=function(){return null!=r.Message.getField(this,2)},proto.google.protobuf.MethodDescriptorProto.prototype.getOutputType=function(){return r.Message.getFieldWithDefault(this,3,"")},proto.google.protobuf.MethodDescriptorProto.prototype.setOutputType=function(e){return r.Message.setField(this,3,e)},proto.google.protobuf.MethodDescriptorProto.prototype.clearOutputType=function(){return r.Message.setField(this,3,void 0)},proto.google.protobuf.MethodDescriptorProto.prototype.hasOutputType=function(){return null!=r.Message.getField(this,3)},proto.google.protobuf.MethodDescriptorProto.prototype.getOptions=function(){return r.Message.getWrapperField(this,proto.google.protobuf.MethodOptions,4)},proto.google.protobuf.MethodDescriptorProto.prototype.setOptions=function(e){return r.Message.setWrapperField(this,4,e)},proto.google.protobuf.MethodDescriptorProto.prototype.clearOptions=function(){return this.setOptions(void 0)},proto.google.protobuf.MethodDescriptorProto.prototype.hasOptions=function(){return null!=r.Message.getField(this,4)},proto.google.protobuf.MethodDescriptorProto.prototype.getClientStreaming=function(){return r.Message.getBooleanFieldWithDefault(this,5,!1)},proto.google.protobuf.MethodDescriptorProto.prototype.setClientStreaming=function(e){return r.Message.setField(this,5,e)},proto.google.protobuf.MethodDescriptorProto.prototype.clearClientStreaming=function(){return r.Message.setField(this,5,void 0)},proto.google.protobuf.MethodDescriptorProto.prototype.hasClientStreaming=function(){return null!=r.Message.getField(this,5)},proto.google.protobuf.MethodDescriptorProto.prototype.getServerStreaming=function(){return r.Message.getBooleanFieldWithDefault(this,6,!1)},proto.google.protobuf.MethodDescriptorProto.prototype.setServerStreaming=function(e){return r.Message.setField(this,6,e)},proto.google.protobuf.MethodDescriptorProto.prototype.clearServerStreaming=function(){return r.Message.setField(this,6,void 0)},proto.google.protobuf.MethodDescriptorProto.prototype.hasServerStreaming=function(){return null!=r.Message.getField(this,6)},proto.google.protobuf.FileOptions.repeatedFields_=[999],r.Message.GENERATE_TO_OBJECT&&(proto.google.protobuf.FileOptions.prototype.toObject=function(e){return proto.google.protobuf.FileOptions.toObject(e,this)},proto.google.protobuf.FileOptions.toObject=function(e,t){var o,n={javaPackage:null==(o=r.Message.getField(t,1))?void 0:o,javaOuterClassname:null==(o=r.Message.getField(t,8))?void 0:o,javaMultipleFiles:r.Message.getBooleanFieldWithDefault(t,10,!1),javaGenerateEqualsAndHash:null==(o=r.Message.getBooleanField(t,20))?void 0:o,javaStringCheckUtf8:r.Message.getBooleanFieldWithDefault(t,27,!1),optimizeFor:r.Message.getFieldWithDefault(t,9,1),goPackage:null==(o=r.Message.getField(t,11))?void 0:o,ccGenericServices:r.Message.getBooleanFieldWithDefault(t,16,!1),javaGenericServices:r.Message.getBooleanFieldWithDefault(t,17,!1),pyGenericServices:r.Message.getBooleanFieldWithDefault(t,18,!1),phpGenericServices:r.Message.getBooleanFieldWithDefault(t,42,!1),deprecated:r.Message.getBooleanFieldWithDefault(t,23,!1),ccEnableArenas:r.Message.getBooleanFieldWithDefault(t,31,!0),objcClassPrefix:null==(o=r.Message.getField(t,36))?void 0:o,csharpNamespace:null==(o=r.Message.getField(t,37))?void 0:o,swiftPrefix:null==(o=r.Message.getField(t,39))?void 0:o,phpClassPrefix:null==(o=r.Message.getField(t,40))?void 0:o,phpNamespace:null==(o=r.Message.getField(t,41))?void 0:o,phpMetadataNamespace:null==(o=r.Message.getField(t,44))?void 0:o,rubyPackage:null==(o=r.Message.getField(t,45))?void 0:o,uninterpretedOptionList:r.Message.toObjectList(t.getUninterpretedOptionList(),proto.google.protobuf.UninterpretedOption.toObject,e)};return r.Message.toObjectExtension(t,n,proto.google.protobuf.FileOptions.extensions,proto.google.protobuf.FileOptions.prototype.getExtension,e),e&&(n.$jspbMessageInstance=t),n}),proto.google.protobuf.FileOptions.deserializeBinary=function(e){var t=new r.BinaryReader(e),o=new proto.google.protobuf.FileOptions;return proto.google.protobuf.FileOptions.deserializeBinaryFromReader(o,t)},proto.google.protobuf.FileOptions.deserializeBinaryFromReader=function(e,t){for(;t.nextField()&&!t.isEndGroup();){switch(t.getFieldNumber()){case 1:var o=t.readString();e.setJavaPackage(o);break;case 8:o=t.readString();e.setJavaOuterClassname(o);break;case 10:o=t.readBool();e.setJavaMultipleFiles(o);break;case 20:o=t.readBool();e.setJavaGenerateEqualsAndHash(o);break;case 27:o=t.readBool();e.setJavaStringCheckUtf8(o);break;case 9:o=t.readEnum();e.setOptimizeFor(o);break;case 11:o=t.readString();e.setGoPackage(o);break;case 16:o=t.readBool();e.setCcGenericServices(o);break;case 17:o=t.readBool();e.setJavaGenericServices(o);break;case 18:o=t.readBool();e.setPyGenericServices(o);break;case 42:o=t.readBool();e.setPhpGenericServices(o);break;case 23:o=t.readBool();e.setDeprecated(o);break;case 31:o=t.readBool();e.setCcEnableArenas(o);break;case 36:o=t.readString();e.setObjcClassPrefix(o);break;case 37:o=t.readString();e.setCsharpNamespace(o);break;case 39:o=t.readString();e.setSwiftPrefix(o);break;case 40:o=t.readString();e.setPhpClassPrefix(o);break;case 41:o=t.readString();e.setPhpNamespace(o);break;case 44:o=t.readString();e.setPhpMetadataNamespace(o);break;case 45:o=t.readString();e.setRubyPackage(o);break;case 999:o=new proto.google.protobuf.UninterpretedOption;t.readMessage(o,proto.google.protobuf.UninterpretedOption.deserializeBinaryFromReader),e.addUninterpretedOption(o);break;default:r.Message.readBinaryExtension(e,t,proto.google.protobuf.FileOptions.extensionsBinary,proto.google.protobuf.FileOptions.prototype.getExtension,proto.google.protobuf.FileOptions.prototype.setExtension)}}return e},proto.google.protobuf.FileOptions.prototype.serializeBinary=function(){var e=new r.BinaryWriter;return proto.google.protobuf.FileOptions.serializeBinaryToWriter(this,e),e.getResultBuffer()},proto.google.protobuf.FileOptions.serializeBinaryToWriter=function(e,t){var o=void 0;null!=(o=r.Message.getField(e,1))&&t.writeString(1,o),null!=(o=r.Message.getField(e,8))&&t.writeString(8,o),null!=(o=r.Message.getField(e,10))&&t.writeBool(10,o),null!=(o=r.Message.getField(e,20))&&t.writeBool(20,o),null!=(o=r.Message.getField(e,27))&&t.writeBool(27,o),null!=(o=r.Message.getField(e,9))&&t.writeEnum(9,o),null!=(o=r.Message.getField(e,11))&&t.writeString(11,o),null!=(o=r.Message.getField(e,16))&&t.writeBool(16,o),null!=(o=r.Message.getField(e,17))&&t.writeBool(17,o),null!=(o=r.Message.getField(e,18))&&t.writeBool(18,o),null!=(o=r.Message.getField(e,42))&&t.writeBool(42,o),null!=(o=r.Message.getField(e,23))&&t.writeBool(23,o),null!=(o=r.Message.getField(e,31))&&t.writeBool(31,o),null!=(o=r.Message.getField(e,36))&&t.writeString(36,o),null!=(o=r.Message.getField(e,37))&&t.writeString(37,o),null!=(o=r.Message.getField(e,39))&&t.writeString(39,o),null!=(o=r.Message.getField(e,40))&&t.writeString(40,o),null!=(o=r.Message.getField(e,41))&&t.writeString(41,o),null!=(o=r.Message.getField(e,44))&&t.writeString(44,o),null!=(o=r.Message.getField(e,45))&&t.writeString(45,o),(o=e.getUninterpretedOptionList()).length>0&&t.writeRepeatedMessage(999,o,proto.google.protobuf.UninterpretedOption.serializeBinaryToWriter),r.Message.serializeBinaryExtensions(e,t,proto.google.protobuf.FileOptions.extensionsBinary,proto.google.protobuf.FileOptions.prototype.getExtension)},proto.google.protobuf.FileOptions.OptimizeMode={SPEED:1,CODE_SIZE:2,LITE_RUNTIME:3},proto.google.protobuf.FileOptions.prototype.getJavaPackage=function(){return r.Message.getFieldWithDefault(this,1,"")},proto.google.protobuf.FileOptions.prototype.setJavaPackage=function(e){return r.Message.setField(this,1,e)},proto.google.protobuf.FileOptions.prototype.clearJavaPackage=function(){return r.Message.setField(this,1,void 0)},proto.google.protobuf.FileOptions.prototype.hasJavaPackage=function(){return null!=r.Message.getField(this,1)},proto.google.protobuf.FileOptions.prototype.getJavaOuterClassname=function(){return r.Message.getFieldWithDefault(this,8,"")},proto.google.protobuf.FileOptions.prototype.setJavaOuterClassname=function(e){return r.Message.setField(this,8,e)},proto.google.protobuf.FileOptions.prototype.clearJavaOuterClassname=function(){return r.Message.setField(this,8,void 0)},proto.google.protobuf.FileOptions.prototype.hasJavaOuterClassname=function(){return null!=r.Message.getField(this,8)},proto.google.protobuf.FileOptions.prototype.getJavaMultipleFiles=function(){return r.Message.getBooleanFieldWithDefault(this,10,!1)},proto.google.protobuf.FileOptions.prototype.setJavaMultipleFiles=function(e){return r.Message.setField(this,10,e)},proto.google.protobuf.FileOptions.prototype.clearJavaMultipleFiles=function(){return r.Message.setField(this,10,void 0)},proto.google.protobuf.FileOptions.prototype.hasJavaMultipleFiles=function(){return null!=r.Message.getField(this,10)},proto.google.protobuf.FileOptions.prototype.getJavaGenerateEqualsAndHash=function(){return r.Message.getBooleanFieldWithDefault(this,20,!1)},proto.google.protobuf.FileOptions.prototype.setJavaGenerateEqualsAndHash=function(e){return r.Message.setField(this,20,e)},proto.google.protobuf.FileOptions.prototype.clearJavaGenerateEqualsAndHash=function(){return r.Message.setField(this,20,void 0)},proto.google.protobuf.FileOptions.prototype.hasJavaGenerateEqualsAndHash=function(){return null!=r.Message.getField(this,20)},proto.google.protobuf.FileOptions.prototype.getJavaStringCheckUtf8=function(){return r.Message.getBooleanFieldWithDefault(this,27,!1)},proto.google.protobuf.FileOptions.prototype.setJavaStringCheckUtf8=function(e){return r.Message.setField(this,27,e)},proto.google.protobuf.FileOptions.prototype.clearJavaStringCheckUtf8=function(){return r.Message.setField(this,27,void 0)},proto.google.protobuf.FileOptions.prototype.hasJavaStringCheckUtf8=function(){return null!=r.Message.getField(this,27)},proto.google.protobuf.FileOptions.prototype.getOptimizeFor=function(){return r.Message.getFieldWithDefault(this,9,1)},proto.google.protobuf.FileOptions.prototype.setOptimizeFor=function(e){return r.Message.setField(this,9,e)},proto.google.protobuf.FileOptions.prototype.clearOptimizeFor=function(){return r.Message.setField(this,9,void 0)},proto.google.protobuf.FileOptions.prototype.hasOptimizeFor=function(){return null!=r.Message.getField(this,9)},proto.google.protobuf.FileOptions.prototype.getGoPackage=function(){return r.Message.getFieldWithDefault(this,11,"")},proto.google.protobuf.FileOptions.prototype.setGoPackage=function(e){return r.Message.setField(this,11,e)},proto.google.protobuf.FileOptions.prototype.clearGoPackage=function(){return r.Message.setField(this,11,void 0)},proto.google.protobuf.FileOptions.prototype.hasGoPackage=function(){return null!=r.Message.getField(this,11)},proto.google.protobuf.FileOptions.prototype.getCcGenericServices=function(){return r.Message.getBooleanFieldWithDefault(this,16,!1)},proto.google.protobuf.FileOptions.prototype.setCcGenericServices=function(e){return r.Message.setField(this,16,e)},proto.google.protobuf.FileOptions.prototype.clearCcGenericServices=function(){return r.Message.setField(this,16,void 0)},proto.google.protobuf.FileOptions.prototype.hasCcGenericServices=function(){return null!=r.Message.getField(this,16)},proto.google.protobuf.FileOptions.prototype.getJavaGenericServices=function(){return r.Message.getBooleanFieldWithDefault(this,17,!1)},proto.google.protobuf.FileOptions.prototype.setJavaGenericServices=function(e){return r.Message.setField(this,17,e)},proto.google.protobuf.FileOptions.prototype.clearJavaGenericServices=function(){return r.Message.setField(this,17,void 0)},proto.google.protobuf.FileOptions.prototype.hasJavaGenericServices=function(){return null!=r.Message.getField(this,17)},proto.google.protobuf.FileOptions.prototype.getPyGenericServices=function(){return r.Message.getBooleanFieldWithDefault(this,18,!1)},proto.google.protobuf.FileOptions.prototype.setPyGenericServices=function(e){return r.Message.setField(this,18,e)},proto.google.protobuf.FileOptions.prototype.clearPyGenericServices=function(){return r.Message.setField(this,18,void 0)},proto.google.protobuf.FileOptions.prototype.hasPyGenericServices=function(){return null!=r.Message.getField(this,18)},proto.google.protobuf.FileOptions.prototype.getPhpGenericServices=function(){return r.Message.getBooleanFieldWithDefault(this,42,!1)},proto.google.protobuf.FileOptions.prototype.setPhpGenericServices=function(e){return r.Message.setField(this,42,e)},proto.google.protobuf.FileOptions.prototype.clearPhpGenericServices=function(){return r.Message.setField(this,42,void 0)},proto.google.protobuf.FileOptions.prototype.hasPhpGenericServices=function(){return null!=r.Message.getField(this,42)},proto.google.protobuf.FileOptions.prototype.getDeprecated=function(){return r.Message.getBooleanFieldWithDefault(this,23,!1)},proto.google.protobuf.FileOptions.prototype.setDeprecated=function(e){return r.Message.setField(this,23,e)},proto.google.protobuf.FileOptions.prototype.clearDeprecated=function(){return r.Message.setField(this,23,void 0)},proto.google.protobuf.FileOptions.prototype.hasDeprecated=function(){return null!=r.Message.getField(this,23)},proto.google.protobuf.FileOptions.prototype.getCcEnableArenas=function(){return r.Message.getBooleanFieldWithDefault(this,31,!0)},proto.google.protobuf.FileOptions.prototype.setCcEnableArenas=function(e){return r.Message.setField(this,31,e)},proto.google.protobuf.FileOptions.prototype.clearCcEnableArenas=function(){return r.Message.setField(this,31,void 0)},proto.google.protobuf.FileOptions.prototype.hasCcEnableArenas=function(){return null!=r.Message.getField(this,31)},proto.google.protobuf.FileOptions.prototype.getObjcClassPrefix=function(){return r.Message.getFieldWithDefault(this,36,"")},proto.google.protobuf.FileOptions.prototype.setObjcClassPrefix=function(e){return r.Message.setField(this,36,e)},proto.google.protobuf.FileOptions.prototype.clearObjcClassPrefix=function(){return r.Message.setField(this,36,void 0)},proto.google.protobuf.FileOptions.prototype.hasObjcClassPrefix=function(){return null!=r.Message.getField(this,36)},proto.google.protobuf.FileOptions.prototype.getCsharpNamespace=function(){return r.Message.getFieldWithDefault(this,37,"")},proto.google.protobuf.FileOptions.prototype.setCsharpNamespace=function(e){return r.Message.setField(this,37,e)},proto.google.protobuf.FileOptions.prototype.clearCsharpNamespace=function(){return r.Message.setField(this,37,void 0)},proto.google.protobuf.FileOptions.prototype.hasCsharpNamespace=function(){return null!=r.Message.getField(this,37)},proto.google.protobuf.FileOptions.prototype.getSwiftPrefix=function(){return r.Message.getFieldWithDefault(this,39,"")},proto.google.protobuf.FileOptions.prototype.setSwiftPrefix=function(e){return r.Message.setField(this,39,e)},proto.google.protobuf.FileOptions.prototype.clearSwiftPrefix=function(){return r.Message.setField(this,39,void 0)},proto.google.protobuf.FileOptions.prototype.hasSwiftPrefix=function(){return null!=r.Message.getField(this,39)},proto.google.protobuf.FileOptions.prototype.getPhpClassPrefix=function(){return r.Message.getFieldWithDefault(this,40,"")},proto.google.protobuf.FileOptions.prototype.setPhpClassPrefix=function(e){return r.Message.setField(this,40,e)},proto.google.protobuf.FileOptions.prototype.clearPhpClassPrefix=function(){return r.Message.setField(this,40,void 0)},proto.google.protobuf.FileOptions.prototype.hasPhpClassPrefix=function(){return null!=r.Message.getField(this,40)},proto.google.protobuf.FileOptions.prototype.getPhpNamespace=function(){return r.Message.getFieldWithDefault(this,41,"")},proto.google.protobuf.FileOptions.prototype.setPhpNamespace=function(e){return r.Message.setField(this,41,e)},proto.google.protobuf.FileOptions.prototype.clearPhpNamespace=function(){return r.Message.setField(this,41,void 0)},proto.google.protobuf.FileOptions.prototype.hasPhpNamespace=function(){return null!=r.Message.getField(this,41)},proto.google.protobuf.FileOptions.prototype.getPhpMetadataNamespace=function(){return r.Message.getFieldWithDefault(this,44,"")},proto.google.protobuf.FileOptions.prototype.setPhpMetadataNamespace=function(e){return r.Message.setField(this,44,e)},proto.google.protobuf.FileOptions.prototype.clearPhpMetadataNamespace=function(){return r.Message.setField(this,44,void 0)},proto.google.protobuf.FileOptions.prototype.hasPhpMetadataNamespace=function(){return null!=r.Message.getField(this,44)},proto.google.protobuf.FileOptions.prototype.getRubyPackage=function(){return r.Message.getFieldWithDefault(this,45,"")},proto.google.protobuf.FileOptions.prototype.setRubyPackage=function(e){return r.Message.setField(this,45,e)},proto.google.protobuf.FileOptions.prototype.clearRubyPackage=function(){return r.Message.setField(this,45,void 0)},proto.google.protobuf.FileOptions.prototype.hasRubyPackage=function(){return null!=r.Message.getField(this,45)},proto.google.protobuf.FileOptions.prototype.getUninterpretedOptionList=function(){return r.Message.getRepeatedWrapperField(this,proto.google.protobuf.UninterpretedOption,999)},proto.google.protobuf.FileOptions.prototype.setUninterpretedOptionList=function(e){return r.Message.setRepeatedWrapperField(this,999,e)},proto.google.protobuf.FileOptions.prototype.addUninterpretedOption=function(e,t){return r.Message.addToRepeatedWrapperField(this,999,e,proto.google.protobuf.UninterpretedOption,t)},proto.google.protobuf.FileOptions.prototype.clearUninterpretedOptionList=function(){return this.setUninterpretedOptionList([])},proto.google.protobuf.MessageOptions.repeatedFields_=[999],r.Message.GENERATE_TO_OBJECT&&(proto.google.protobuf.MessageOptions.prototype.toObject=function(e){return proto.google.protobuf.MessageOptions.toObject(e,this)},proto.google.protobuf.MessageOptions.toObject=function(e,t){var o,n={messageSetWireFormat:r.Message.getBooleanFieldWithDefault(t,1,!1),noStandardDescriptorAccessor:r.Message.getBooleanFieldWithDefault(t,2,!1),deprecated:r.Message.getBooleanFieldWithDefault(t,3,!1),mapEntry:null==(o=r.Message.getBooleanField(t,7))?void 0:o,uninterpretedOptionList:r.Message.toObjectList(t.getUninterpretedOptionList(),proto.google.protobuf.UninterpretedOption.toObject,e)};return r.Message.toObjectExtension(t,n,proto.google.protobuf.MessageOptions.extensions,proto.google.protobuf.MessageOptions.prototype.getExtension,e),e&&(n.$jspbMessageInstance=t),n}),proto.google.protobuf.MessageOptions.deserializeBinary=function(e){var t=new r.BinaryReader(e),o=new proto.google.protobuf.MessageOptions;return proto.google.protobuf.MessageOptions.deserializeBinaryFromReader(o,t)},proto.google.protobuf.MessageOptions.deserializeBinaryFromReader=function(e,t){for(;t.nextField()&&!t.isEndGroup();){switch(t.getFieldNumber()){case 1:var o=t.readBool();e.setMessageSetWireFormat(o);break;case 2:o=t.readBool();e.setNoStandardDescriptorAccessor(o);break;case 3:o=t.readBool();e.setDeprecated(o);break;case 7:o=t.readBool();e.setMapEntry(o);break;case 999:o=new proto.google.protobuf.UninterpretedOption;t.readMessage(o,proto.google.protobuf.UninterpretedOption.deserializeBinaryFromReader),e.addUninterpretedOption(o);break;default:r.Message.readBinaryExtension(e,t,proto.google.protobuf.MessageOptions.extensionsBinary,proto.google.protobuf.MessageOptions.prototype.getExtension,proto.google.protobuf.MessageOptions.prototype.setExtension)}}return e},proto.google.protobuf.MessageOptions.prototype.serializeBinary=function(){var e=new r.BinaryWriter;return proto.google.protobuf.MessageOptions.serializeBinaryToWriter(this,e),e.getResultBuffer()},proto.google.protobuf.MessageOptions.serializeBinaryToWriter=function(e,t){var o=void 0;null!=(o=r.Message.getField(e,1))&&t.writeBool(1,o),null!=(o=r.Message.getField(e,2))&&t.writeBool(2,o),null!=(o=r.Message.getField(e,3))&&t.writeBool(3,o),null!=(o=r.Message.getField(e,7))&&t.writeBool(7,o),(o=e.getUninterpretedOptionList()).length>0&&t.writeRepeatedMessage(999,o,proto.google.protobuf.UninterpretedOption.serializeBinaryToWriter),r.Message.serializeBinaryExtensions(e,t,proto.google.protobuf.MessageOptions.extensionsBinary,proto.google.protobuf.MessageOptions.prototype.getExtension)},proto.google.protobuf.MessageOptions.prototype.getMessageSetWireFormat=function(){return r.Message.getBooleanFieldWithDefault(this,1,!1)},proto.google.protobuf.MessageOptions.prototype.setMessageSetWireFormat=function(e){return r.Message.setField(this,1,e)},proto.google.protobuf.MessageOptions.prototype.clearMessageSetWireFormat=function(){return r.Message.setField(this,1,void 0)},proto.google.protobuf.MessageOptions.prototype.hasMessageSetWireFormat=function(){return null!=r.Message.getField(this,1)},proto.google.protobuf.MessageOptions.prototype.getNoStandardDescriptorAccessor=function(){return r.Message.getBooleanFieldWithDefault(this,2,!1)},proto.google.protobuf.MessageOptions.prototype.setNoStandardDescriptorAccessor=function(e){return r.Message.setField(this,2,e)},proto.google.protobuf.MessageOptions.prototype.clearNoStandardDescriptorAccessor=function(){return r.Message.setField(this,2,void 0)},proto.google.protobuf.MessageOptions.prototype.hasNoStandardDescriptorAccessor=function(){return null!=r.Message.getField(this,2)},proto.google.protobuf.MessageOptions.prototype.getDeprecated=function(){return r.Message.getBooleanFieldWithDefault(this,3,!1)},proto.google.protobuf.MessageOptions.prototype.setDeprecated=function(e){return r.Message.setField(this,3,e)},proto.google.protobuf.MessageOptions.prototype.clearDeprecated=function(){return r.Message.setField(this,3,void 0)},proto.google.protobuf.MessageOptions.prototype.hasDeprecated=function(){return null!=r.Message.getField(this,3)},proto.google.protobuf.MessageOptions.prototype.getMapEntry=function(){return r.Message.getBooleanFieldWithDefault(this,7,!1)},proto.google.protobuf.MessageOptions.prototype.setMapEntry=function(e){return r.Message.setField(this,7,e)},proto.google.protobuf.MessageOptions.prototype.clearMapEntry=function(){return r.Message.setField(this,7,void 0)},proto.google.protobuf.MessageOptions.prototype.hasMapEntry=function(){return null!=r.Message.getField(this,7)},proto.google.protobuf.MessageOptions.prototype.getUninterpretedOptionList=function(){return r.Message.getRepeatedWrapperField(this,proto.google.protobuf.UninterpretedOption,999)},proto.google.protobuf.MessageOptions.prototype.setUninterpretedOptionList=function(e){return r.Message.setRepeatedWrapperField(this,999,e)},proto.google.protobuf.MessageOptions.prototype.addUninterpretedOption=function(e,t){return r.Message.addToRepeatedWrapperField(this,999,e,proto.google.protobuf.UninterpretedOption,t)},proto.google.protobuf.MessageOptions.prototype.clearUninterpretedOptionList=function(){return this.setUninterpretedOptionList([])},proto.google.protobuf.FieldOptions.repeatedFields_=[999],r.Message.GENERATE_TO_OBJECT&&(proto.google.protobuf.FieldOptions.prototype.toObject=function(e){return proto.google.protobuf.FieldOptions.toObject(e,this)},proto.google.protobuf.FieldOptions.toObject=function(e,t){var o,n={ctype:r.Message.getFieldWithDefault(t,1,0),packed:null==(o=r.Message.getBooleanField(t,2))?void 0:o,jstype:r.Message.getFieldWithDefault(t,6,0),lazy:r.Message.getBooleanFieldWithDefault(t,5,!1),deprecated:r.Message.getBooleanFieldWithDefault(t,3,!1),weak:r.Message.getBooleanFieldWithDefault(t,10,!1),uninterpretedOptionList:r.Message.toObjectList(t.getUninterpretedOptionList(),proto.google.protobuf.UninterpretedOption.toObject,e)};return r.Message.toObjectExtension(t,n,proto.google.protobuf.FieldOptions.extensions,proto.google.protobuf.FieldOptions.prototype.getExtension,e),e&&(n.$jspbMessageInstance=t),n}),proto.google.protobuf.FieldOptions.deserializeBinary=function(e){var t=new r.BinaryReader(e),o=new proto.google.protobuf.FieldOptions;return proto.google.protobuf.FieldOptions.deserializeBinaryFromReader(o,t)},proto.google.protobuf.FieldOptions.deserializeBinaryFromReader=function(e,t){for(;t.nextField()&&!t.isEndGroup();){switch(t.getFieldNumber()){case 1:var o=t.readEnum();e.setCtype(o);break;case 2:o=t.readBool();e.setPacked(o);break;case 6:o=t.readEnum();e.setJstype(o);break;case 5:o=t.readBool();e.setLazy(o);break;case 3:o=t.readBool();e.setDeprecated(o);break;case 10:o=t.readBool();e.setWeak(o);break;case 999:o=new proto.google.protobuf.UninterpretedOption;t.readMessage(o,proto.google.protobuf.UninterpretedOption.deserializeBinaryFromReader),e.addUninterpretedOption(o);break;default:r.Message.readBinaryExtension(e,t,proto.google.protobuf.FieldOptions.extensionsBinary,proto.google.protobuf.FieldOptions.prototype.getExtension,proto.google.protobuf.FieldOptions.prototype.setExtension)}}return e},proto.google.protobuf.FieldOptions.prototype.serializeBinary=function(){var e=new r.BinaryWriter;return proto.google.protobuf.FieldOptions.serializeBinaryToWriter(this,e),e.getResultBuffer()},proto.google.protobuf.FieldOptions.serializeBinaryToWriter=function(e,t){var o=void 0;null!=(o=r.Message.getField(e,1))&&t.writeEnum(1,o),null!=(o=r.Message.getField(e,2))&&t.writeBool(2,o),null!=(o=r.Message.getField(e,6))&&t.writeEnum(6,o),null!=(o=r.Message.getField(e,5))&&t.writeBool(5,o),null!=(o=r.Message.getField(e,3))&&t.writeBool(3,o),null!=(o=r.Message.getField(e,10))&&t.writeBool(10,o),(o=e.getUninterpretedOptionList()).length>0&&t.writeRepeatedMessage(999,o,proto.google.protobuf.UninterpretedOption.serializeBinaryToWriter),r.Message.serializeBinaryExtensions(e,t,proto.google.protobuf.FieldOptions.extensionsBinary,proto.google.protobuf.FieldOptions.prototype.getExtension)},proto.google.protobuf.FieldOptions.CType={STRING:0,CORD:1,STRING_PIECE:2},proto.google.protobuf.FieldOptions.JSType={JS_NORMAL:0,JS_STRING:1,JS_NUMBER:2},proto.google.protobuf.FieldOptions.prototype.getCtype=function(){return r.Message.getFieldWithDefault(this,1,0)},proto.google.protobuf.FieldOptions.prototype.setCtype=function(e){return r.Message.setField(this,1,e)},proto.google.protobuf.FieldOptions.prototype.clearCtype=function(){return r.Message.setField(this,1,void 0)},proto.google.protobuf.FieldOptions.prototype.hasCtype=function(){return null!=r.Message.getField(this,1)},proto.google.protobuf.FieldOptions.prototype.getPacked=function(){return r.Message.getBooleanFieldWithDefault(this,2,!1)},proto.google.protobuf.FieldOptions.prototype.setPacked=function(e){return r.Message.setField(this,2,e)},proto.google.protobuf.FieldOptions.prototype.clearPacked=function(){return r.Message.setField(this,2,void 0)},proto.google.protobuf.FieldOptions.prototype.hasPacked=function(){return null!=r.Message.getField(this,2)},proto.google.protobuf.FieldOptions.prototype.getJstype=function(){return r.Message.getFieldWithDefault(this,6,0)},proto.google.protobuf.FieldOptions.prototype.setJstype=function(e){return r.Message.setField(this,6,e)},proto.google.protobuf.FieldOptions.prototype.clearJstype=function(){return r.Message.setField(this,6,void 0)},proto.google.protobuf.FieldOptions.prototype.hasJstype=function(){return null!=r.Message.getField(this,6)},proto.google.protobuf.FieldOptions.prototype.getLazy=function(){return r.Message.getBooleanFieldWithDefault(this,5,!1)},proto.google.protobuf.FieldOptions.prototype.setLazy=function(e){return r.Message.setField(this,5,e)},proto.google.protobuf.FieldOptions.prototype.clearLazy=function(){return r.Message.setField(this,5,void 0)},proto.google.protobuf.FieldOptions.prototype.hasLazy=function(){return null!=r.Message.getField(this,5)},proto.google.protobuf.FieldOptions.prototype.getDeprecated=function(){return r.Message.getBooleanFieldWithDefault(this,3,!1)},proto.google.protobuf.FieldOptions.prototype.setDeprecated=function(e){return r.Message.setField(this,3,e)},proto.google.protobuf.FieldOptions.prototype.clearDeprecated=function(){return r.Message.setField(this,3,void 0)},proto.google.protobuf.FieldOptions.prototype.hasDeprecated=function(){return null!=r.Message.getField(this,3)},proto.google.protobuf.FieldOptions.prototype.getWeak=function(){return r.Message.getBooleanFieldWithDefault(this,10,!1)},proto.google.protobuf.FieldOptions.prototype.setWeak=function(e){return r.Message.setField(this,10,e)},proto.google.protobuf.FieldOptions.prototype.clearWeak=function(){return r.Message.setField(this,10,void 0)},proto.google.protobuf.FieldOptions.prototype.hasWeak=function(){return null!=r.Message.getField(this,10)},proto.google.protobuf.FieldOptions.prototype.getUninterpretedOptionList=function(){return r.Message.getRepeatedWrapperField(this,proto.google.protobuf.UninterpretedOption,999)},proto.google.protobuf.FieldOptions.prototype.setUninterpretedOptionList=function(e){return r.Message.setRepeatedWrapperField(this,999,e)},proto.google.protobuf.FieldOptions.prototype.addUninterpretedOption=function(e,t){return r.Message.addToRepeatedWrapperField(this,999,e,proto.google.protobuf.UninterpretedOption,t)},proto.google.protobuf.FieldOptions.prototype.clearUninterpretedOptionList=function(){return this.setUninterpretedOptionList([])},proto.google.protobuf.OneofOptions.repeatedFields_=[999],r.Message.GENERATE_TO_OBJECT&&(proto.google.protobuf.OneofOptions.prototype.toObject=function(e){return proto.google.protobuf.OneofOptions.toObject(e,this)},proto.google.protobuf.OneofOptions.toObject=function(e,t){var o={uninterpretedOptionList:r.Message.toObjectList(t.getUninterpretedOptionList(),proto.google.protobuf.UninterpretedOption.toObject,e)};return r.Message.toObjectExtension(t,o,proto.google.protobuf.OneofOptions.extensions,proto.google.protobuf.OneofOptions.prototype.getExtension,e),e&&(o.$jspbMessageInstance=t),o}),proto.google.protobuf.OneofOptions.deserializeBinary=function(e){var t=new r.BinaryReader(e),o=new proto.google.protobuf.OneofOptions;return proto.google.protobuf.OneofOptions.deserializeBinaryFromReader(o,t)},proto.google.protobuf.OneofOptions.deserializeBinaryFromReader=function(e,t){for(;t.nextField()&&!t.isEndGroup();){switch(t.getFieldNumber()){case 999:var o=new proto.google.protobuf.UninterpretedOption;t.readMessage(o,proto.google.protobuf.UninterpretedOption.deserializeBinaryFromReader),e.addUninterpretedOption(o);break;default:r.Message.readBinaryExtension(e,t,proto.google.protobuf.OneofOptions.extensionsBinary,proto.google.protobuf.OneofOptions.prototype.getExtension,proto.google.protobuf.OneofOptions.prototype.setExtension)}}return e},proto.google.protobuf.OneofOptions.prototype.serializeBinary=function(){var e=new r.BinaryWriter;return proto.google.protobuf.OneofOptions.serializeBinaryToWriter(this,e),e.getResultBuffer()},proto.google.protobuf.OneofOptions.serializeBinaryToWriter=function(e,t){var o;(o=e.getUninterpretedOptionList()).length>0&&t.writeRepeatedMessage(999,o,proto.google.protobuf.UninterpretedOption.serializeBinaryToWriter),r.Message.serializeBinaryExtensions(e,t,proto.google.protobuf.OneofOptions.extensionsBinary,proto.google.protobuf.OneofOptions.prototype.getExtension)},proto.google.protobuf.OneofOptions.prototype.getUninterpretedOptionList=function(){return r.Message.getRepeatedWrapperField(this,proto.google.protobuf.UninterpretedOption,999)},proto.google.protobuf.OneofOptions.prototype.setUninterpretedOptionList=function(e){return r.Message.setRepeatedWrapperField(this,999,e)},proto.google.protobuf.OneofOptions.prototype.addUninterpretedOption=function(e,t){return r.Message.addToRepeatedWrapperField(this,999,e,proto.google.protobuf.UninterpretedOption,t)},proto.google.protobuf.OneofOptions.prototype.clearUninterpretedOptionList=function(){return this.setUninterpretedOptionList([])},proto.google.protobuf.EnumOptions.repeatedFields_=[999],r.Message.GENERATE_TO_OBJECT&&(proto.google.protobuf.EnumOptions.prototype.toObject=function(e){return proto.google.protobuf.EnumOptions.toObject(e,this)},proto.google.protobuf.EnumOptions.toObject=function(e,t){var o,n={allowAlias:null==(o=r.Message.getBooleanField(t,2))?void 0:o,deprecated:r.Message.getBooleanFieldWithDefault(t,3,!1),uninterpretedOptionList:r.Message.toObjectList(t.getUninterpretedOptionList(),proto.google.protobuf.UninterpretedOption.toObject,e)};return r.Message.toObjectExtension(t,n,proto.google.protobuf.EnumOptions.extensions,proto.google.protobuf.EnumOptions.prototype.getExtension,e),e&&(n.$jspbMessageInstance=t),n}),proto.google.protobuf.EnumOptions.deserializeBinary=function(e){var t=new r.BinaryReader(e),o=new proto.google.protobuf.EnumOptions;return proto.google.protobuf.EnumOptions.deserializeBinaryFromReader(o,t)},proto.google.protobuf.EnumOptions.deserializeBinaryFromReader=function(e,t){for(;t.nextField()&&!t.isEndGroup();){switch(t.getFieldNumber()){case 2:var o=t.readBool();e.setAllowAlias(o);break;case 3:o=t.readBool();e.setDeprecated(o);break;case 999:o=new proto.google.protobuf.UninterpretedOption;t.readMessage(o,proto.google.protobuf.UninterpretedOption.deserializeBinaryFromReader),e.addUninterpretedOption(o);break;default:r.Message.readBinaryExtension(e,t,proto.google.protobuf.EnumOptions.extensionsBinary,proto.google.protobuf.EnumOptions.prototype.getExtension,proto.google.protobuf.EnumOptions.prototype.setExtension)}}return e},proto.google.protobuf.EnumOptions.prototype.serializeBinary=function(){var e=new r.BinaryWriter;return proto.google.protobuf.EnumOptions.serializeBinaryToWriter(this,e),e.getResultBuffer()},proto.google.protobuf.EnumOptions.serializeBinaryToWriter=function(e,t){var o=void 0;null!=(o=r.Message.getField(e,2))&&t.writeBool(2,o),null!=(o=r.Message.getField(e,3))&&t.writeBool(3,o),(o=e.getUninterpretedOptionList()).length>0&&t.writeRepeatedMessage(999,o,proto.google.protobuf.UninterpretedOption.serializeBinaryToWriter),r.Message.serializeBinaryExtensions(e,t,proto.google.protobuf.EnumOptions.extensionsBinary,proto.google.protobuf.EnumOptions.prototype.getExtension)},proto.google.protobuf.EnumOptions.prototype.getAllowAlias=function(){return r.Message.getBooleanFieldWithDefault(this,2,!1)},proto.google.protobuf.EnumOptions.prototype.setAllowAlias=function(e){return r.Message.setField(this,2,e)},proto.google.protobuf.EnumOptions.prototype.clearAllowAlias=function(){return r.Message.setField(this,2,void 0)},proto.google.protobuf.EnumOptions.prototype.hasAllowAlias=function(){return null!=r.Message.getField(this,2)},proto.google.protobuf.EnumOptions.prototype.getDeprecated=function(){return r.Message.getBooleanFieldWithDefault(this,3,!1)},proto.google.protobuf.EnumOptions.prototype.setDeprecated=function(e){return r.Message.setField(this,3,e)},proto.google.protobuf.EnumOptions.prototype.clearDeprecated=function(){return r.Message.setField(this,3,void 0)},proto.google.protobuf.EnumOptions.prototype.hasDeprecated=function(){return null!=r.Message.getField(this,3)},proto.google.protobuf.EnumOptions.prototype.getUninterpretedOptionList=function(){return r.Message.getRepeatedWrapperField(this,proto.google.protobuf.UninterpretedOption,999)},proto.google.protobuf.EnumOptions.prototype.setUninterpretedOptionList=function(e){return r.Message.setRepeatedWrapperField(this,999,e)},proto.google.protobuf.EnumOptions.prototype.addUninterpretedOption=function(e,t){return r.Message.addToRepeatedWrapperField(this,999,e,proto.google.protobuf.UninterpretedOption,t)},proto.google.protobuf.EnumOptions.prototype.clearUninterpretedOptionList=function(){return this.setUninterpretedOptionList([])},proto.google.protobuf.EnumValueOptions.repeatedFields_=[999],r.Message.GENERATE_TO_OBJECT&&(proto.google.protobuf.EnumValueOptions.prototype.toObject=function(e){return proto.google.protobuf.EnumValueOptions.toObject(e,this)},proto.google.protobuf.EnumValueOptions.toObject=function(e,t){var o={deprecated:r.Message.getBooleanFieldWithDefault(t,1,!1),uninterpretedOptionList:r.Message.toObjectList(t.getUninterpretedOptionList(),proto.google.protobuf.UninterpretedOption.toObject,e)};return r.Message.toObjectExtension(t,o,proto.google.protobuf.EnumValueOptions.extensions,proto.google.protobuf.EnumValueOptions.prototype.getExtension,e),e&&(o.$jspbMessageInstance=t),o}),proto.google.protobuf.EnumValueOptions.deserializeBinary=function(e){var t=new r.BinaryReader(e),o=new proto.google.protobuf.EnumValueOptions;return proto.google.protobuf.EnumValueOptions.deserializeBinaryFromReader(o,t)},proto.google.protobuf.EnumValueOptions.deserializeBinaryFromReader=function(e,t){for(;t.nextField()&&!t.isEndGroup();){switch(t.getFieldNumber()){case 1:var o=t.readBool();e.setDeprecated(o);break;case 999:o=new proto.google.protobuf.UninterpretedOption;t.readMessage(o,proto.google.protobuf.UninterpretedOption.deserializeBinaryFromReader),e.addUninterpretedOption(o);break;default:r.Message.readBinaryExtension(e,t,proto.google.protobuf.EnumValueOptions.extensionsBinary,proto.google.protobuf.EnumValueOptions.prototype.getExtension,proto.google.protobuf.EnumValueOptions.prototype.setExtension)}}return e},proto.google.protobuf.EnumValueOptions.prototype.serializeBinary=function(){var e=new r.BinaryWriter;return proto.google.protobuf.EnumValueOptions.serializeBinaryToWriter(this,e),e.getResultBuffer()},proto.google.protobuf.EnumValueOptions.serializeBinaryToWriter=function(e,t){var o=void 0;null!=(o=r.Message.getField(e,1))&&t.writeBool(1,o),(o=e.getUninterpretedOptionList()).length>0&&t.writeRepeatedMessage(999,o,proto.google.protobuf.UninterpretedOption.serializeBinaryToWriter),r.Message.serializeBinaryExtensions(e,t,proto.google.protobuf.EnumValueOptions.extensionsBinary,proto.google.protobuf.EnumValueOptions.prototype.getExtension)},proto.google.protobuf.EnumValueOptions.prototype.getDeprecated=function(){return r.Message.getBooleanFieldWithDefault(this,1,!1)},proto.google.protobuf.EnumValueOptions.prototype.setDeprecated=function(e){return r.Message.setField(this,1,e)},proto.google.protobuf.EnumValueOptions.prototype.clearDeprecated=function(){return r.Message.setField(this,1,void 0)},proto.google.protobuf.EnumValueOptions.prototype.hasDeprecated=function(){return null!=r.Message.getField(this,1)},proto.google.protobuf.EnumValueOptions.prototype.getUninterpretedOptionList=function(){return r.Message.getRepeatedWrapperField(this,proto.google.protobuf.UninterpretedOption,999)},proto.google.protobuf.EnumValueOptions.prototype.setUninterpretedOptionList=function(e){return r.Message.setRepeatedWrapperField(this,999,e)},proto.google.protobuf.EnumValueOptions.prototype.addUninterpretedOption=function(e,t){return r.Message.addToRepeatedWrapperField(this,999,e,proto.google.protobuf.UninterpretedOption,t)},proto.google.protobuf.EnumValueOptions.prototype.clearUninterpretedOptionList=function(){return this.setUninterpretedOptionList([])},proto.google.protobuf.ServiceOptions.repeatedFields_=[999],r.Message.GENERATE_TO_OBJECT&&(proto.google.protobuf.ServiceOptions.prototype.toObject=function(e){return proto.google.protobuf.ServiceOptions.toObject(e,this)},proto.google.protobuf.ServiceOptions.toObject=function(e,t){var o={deprecated:r.Message.getBooleanFieldWithDefault(t,33,!1),uninterpretedOptionList:r.Message.toObjectList(t.getUninterpretedOptionList(),proto.google.protobuf.UninterpretedOption.toObject,e)};return r.Message.toObjectExtension(t,o,proto.google.protobuf.ServiceOptions.extensions,proto.google.protobuf.ServiceOptions.prototype.getExtension,e),e&&(o.$jspbMessageInstance=t),o}),proto.google.protobuf.ServiceOptions.deserializeBinary=function(e){var t=new r.BinaryReader(e),o=new proto.google.protobuf.ServiceOptions;return proto.google.protobuf.ServiceOptions.deserializeBinaryFromReader(o,t)},proto.google.protobuf.ServiceOptions.deserializeBinaryFromReader=function(e,t){for(;t.nextField()&&!t.isEndGroup();){switch(t.getFieldNumber()){case 33:var o=t.readBool();e.setDeprecated(o);break;case 999:o=new proto.google.protobuf.UninterpretedOption;t.readMessage(o,proto.google.protobuf.UninterpretedOption.deserializeBinaryFromReader),e.addUninterpretedOption(o);break;default:r.Message.readBinaryExtension(e,t,proto.google.protobuf.ServiceOptions.extensionsBinary,proto.google.protobuf.ServiceOptions.prototype.getExtension,proto.google.protobuf.ServiceOptions.prototype.setExtension)}}return e},proto.google.protobuf.ServiceOptions.prototype.serializeBinary=function(){var e=new r.BinaryWriter;return proto.google.protobuf.ServiceOptions.serializeBinaryToWriter(this,e),e.getResultBuffer()},proto.google.protobuf.ServiceOptions.serializeBinaryToWriter=function(e,t){var o=void 0;null!=(o=r.Message.getField(e,33))&&t.writeBool(33,o),(o=e.getUninterpretedOptionList()).length>0&&t.writeRepeatedMessage(999,o,proto.google.protobuf.UninterpretedOption.serializeBinaryToWriter),r.Message.serializeBinaryExtensions(e,t,proto.google.protobuf.ServiceOptions.extensionsBinary,proto.google.protobuf.ServiceOptions.prototype.getExtension)},proto.google.protobuf.ServiceOptions.prototype.getDeprecated=function(){return r.Message.getBooleanFieldWithDefault(this,33,!1)},proto.google.protobuf.ServiceOptions.prototype.setDeprecated=function(e){return r.Message.setField(this,33,e)},proto.google.protobuf.ServiceOptions.prototype.clearDeprecated=function(){return r.Message.setField(this,33,void 0)},proto.google.protobuf.ServiceOptions.prototype.hasDeprecated=function(){return null!=r.Message.getField(this,33)},proto.google.protobuf.ServiceOptions.prototype.getUninterpretedOptionList=function(){return r.Message.getRepeatedWrapperField(this,proto.google.protobuf.UninterpretedOption,999)},proto.google.protobuf.ServiceOptions.prototype.setUninterpretedOptionList=function(e){return r.Message.setRepeatedWrapperField(this,999,e)},proto.google.protobuf.ServiceOptions.prototype.addUninterpretedOption=function(e,t){return r.Message.addToRepeatedWrapperField(this,999,e,proto.google.protobuf.UninterpretedOption,t)},proto.google.protobuf.ServiceOptions.prototype.clearUninterpretedOptionList=function(){return this.setUninterpretedOptionList([])},proto.google.protobuf.MethodOptions.repeatedFields_=[999],r.Message.GENERATE_TO_OBJECT&&(proto.google.protobuf.MethodOptions.prototype.toObject=function(e){return proto.google.protobuf.MethodOptions.toObject(e,this)},proto.google.protobuf.MethodOptions.toObject=function(e,t){var o={deprecated:r.Message.getBooleanFieldWithDefault(t,33,!1),idempotencyLevel:r.Message.getFieldWithDefault(t,34,0),uninterpretedOptionList:r.Message.toObjectList(t.getUninterpretedOptionList(),proto.google.protobuf.UninterpretedOption.toObject,e)};return r.Message.toObjectExtension(t,o,proto.google.protobuf.MethodOptions.extensions,proto.google.protobuf.MethodOptions.prototype.getExtension,e),e&&(o.$jspbMessageInstance=t),o}),proto.google.protobuf.MethodOptions.deserializeBinary=function(e){var t=new r.BinaryReader(e),o=new proto.google.protobuf.MethodOptions;return proto.google.protobuf.MethodOptions.deserializeBinaryFromReader(o,t)},proto.google.protobuf.MethodOptions.deserializeBinaryFromReader=function(e,t){for(;t.nextField()&&!t.isEndGroup();){switch(t.getFieldNumber()){case 33:var o=t.readBool();e.setDeprecated(o);break;case 34:o=t.readEnum();e.setIdempotencyLevel(o);break;case 999:o=new proto.google.protobuf.UninterpretedOption;t.readMessage(o,proto.google.protobuf.UninterpretedOption.deserializeBinaryFromReader),e.addUninterpretedOption(o);break;default:r.Message.readBinaryExtension(e,t,proto.google.protobuf.MethodOptions.extensionsBinary,proto.google.protobuf.MethodOptions.prototype.getExtension,proto.google.protobuf.MethodOptions.prototype.setExtension)}}return e},proto.google.protobuf.MethodOptions.prototype.serializeBinary=function(){var e=new r.BinaryWriter;return proto.google.protobuf.MethodOptions.serializeBinaryToWriter(this,e),e.getResultBuffer()},proto.google.protobuf.MethodOptions.serializeBinaryToWriter=function(e,t){var o=void 0;null!=(o=r.Message.getField(e,33))&&t.writeBool(33,o),null!=(o=r.Message.getField(e,34))&&t.writeEnum(34,o),(o=e.getUninterpretedOptionList()).length>0&&t.writeRepeatedMessage(999,o,proto.google.protobuf.UninterpretedOption.serializeBinaryToWriter),r.Message.serializeBinaryExtensions(e,t,proto.google.protobuf.MethodOptions.extensionsBinary,proto.google.protobuf.MethodOptions.prototype.getExtension)},proto.google.protobuf.MethodOptions.IdempotencyLevel={IDEMPOTENCY_UNKNOWN:0,NO_SIDE_EFFECTS:1,IDEMPOTENT:2},proto.google.protobuf.MethodOptions.prototype.getDeprecated=function(){return r.Message.getBooleanFieldWithDefault(this,33,!1)},proto.google.protobuf.MethodOptions.prototype.setDeprecated=function(e){return r.Message.setField(this,33,e)},proto.google.protobuf.MethodOptions.prototype.clearDeprecated=function(){return r.Message.setField(this,33,void 0)},proto.google.protobuf.MethodOptions.prototype.hasDeprecated=function(){return null!=r.Message.getField(this,33)},proto.google.protobuf.MethodOptions.prototype.getIdempotencyLevel=function(){return r.Message.getFieldWithDefault(this,34,0)},proto.google.protobuf.MethodOptions.prototype.setIdempotencyLevel=function(e){return r.Message.setField(this,34,e)},proto.google.protobuf.MethodOptions.prototype.clearIdempotencyLevel=function(){return r.Message.setField(this,34,void 0)},proto.google.protobuf.MethodOptions.prototype.hasIdempotencyLevel=function(){return null!=r.Message.getField(this,34)},proto.google.protobuf.MethodOptions.prototype.getUninterpretedOptionList=function(){return r.Message.getRepeatedWrapperField(this,proto.google.protobuf.UninterpretedOption,999)},proto.google.protobuf.MethodOptions.prototype.setUninterpretedOptionList=function(e){return r.Message.setRepeatedWrapperField(this,999,e)},proto.google.protobuf.MethodOptions.prototype.addUninterpretedOption=function(e,t){return r.Message.addToRepeatedWrapperField(this,999,e,proto.google.protobuf.UninterpretedOption,t)},proto.google.protobuf.MethodOptions.prototype.clearUninterpretedOptionList=function(){return this.setUninterpretedOptionList([])},proto.google.protobuf.UninterpretedOption.repeatedFields_=[2],r.Message.GENERATE_TO_OBJECT&&(proto.google.protobuf.UninterpretedOption.prototype.toObject=function(e){return proto.google.protobuf.UninterpretedOption.toObject(e,this)},proto.google.protobuf.UninterpretedOption.toObject=function(e,t){var o,n={nameList:r.Message.toObjectList(t.getNameList(),proto.google.protobuf.UninterpretedOption.NamePart.toObject,e),identifierValue:null==(o=r.Message.getField(t,3))?void 0:o,positiveIntValue:null==(o=r.Message.getField(t,4))?void 0:o,negativeIntValue:null==(o=r.Message.getField(t,5))?void 0:o,doubleValue:null==(o=r.Message.getOptionalFloatingPointField(t,6))?void 0:o,stringValue:t.getStringValue_asB64(),aggregateValue:null==(o=r.Message.getField(t,8))?void 0:o};return e&&(n.$jspbMessageInstance=t),n}),proto.google.protobuf.UninterpretedOption.deserializeBinary=function(e){var t=new r.BinaryReader(e),o=new proto.google.protobuf.UninterpretedOption;return proto.google.protobuf.UninterpretedOption.deserializeBinaryFromReader(o,t)},proto.google.protobuf.UninterpretedOption.deserializeBinaryFromReader=function(e,t){for(;t.nextField()&&!t.isEndGroup();){switch(t.getFieldNumber()){case 2:var o=new proto.google.protobuf.UninterpretedOption.NamePart;t.readMessage(o,proto.google.protobuf.UninterpretedOption.NamePart.deserializeBinaryFromReader),e.addName(o);break;case 3:o=t.readString();e.setIdentifierValue(o);break;case 4:o=t.readUint64();e.setPositiveIntValue(o);break;case 5:o=t.readInt64();e.setNegativeIntValue(o);break;case 6:o=t.readDouble();e.setDoubleValue(o);break;case 7:o=t.readBytes();e.setStringValue(o);break;case 8:o=t.readString();e.setAggregateValue(o);break;default:t.skipField()}}return e},proto.google.protobuf.UninterpretedOption.prototype.serializeBinary=function(){var e=new r.BinaryWriter;return proto.google.protobuf.UninterpretedOption.serializeBinaryToWriter(this,e),e.getResultBuffer()},proto.google.protobuf.UninterpretedOption.serializeBinaryToWriter=function(e,t){var o=void 0;(o=e.getNameList()).length>0&&t.writeRepeatedMessage(2,o,proto.google.protobuf.UninterpretedOption.NamePart.serializeBinaryToWriter),null!=(o=r.Message.getField(e,3))&&t.writeString(3,o),null!=(o=r.Message.getField(e,4))&&t.writeUint64(4,o),null!=(o=r.Message.getField(e,5))&&t.writeInt64(5,o),null!=(o=r.Message.getField(e,6))&&t.writeDouble(6,o),null!=(o=r.Message.getField(e,7))&&t.writeBytes(7,o),null!=(o=r.Message.getField(e,8))&&t.writeString(8,o)},r.Message.GENERATE_TO_OBJECT&&(proto.google.protobuf.UninterpretedOption.NamePart.prototype.toObject=function(e){return proto.google.protobuf.UninterpretedOption.NamePart.toObject(e,this)},proto.google.protobuf.UninterpretedOption.NamePart.toObject=function(e,t){var o,n={namePart:null==(o=r.Message.getField(t,1))?void 0:o,isExtension:null==(o=r.Message.getBooleanField(t,2))?void 0:o};return e&&(n.$jspbMessageInstance=t),n}),proto.google.protobuf.UninterpretedOption.NamePart.deserializeBinary=function(e){var t=new r.BinaryReader(e),o=new proto.google.protobuf.UninterpretedOption.NamePart;return proto.google.protobuf.UninterpretedOption.NamePart.deserializeBinaryFromReader(o,t)},proto.google.protobuf.UninterpretedOption.NamePart.deserializeBinaryFromReader=function(e,t){for(;t.nextField()&&!t.isEndGroup();){switch(t.getFieldNumber()){case 1:var o=t.readString();e.setNamePart(o);break;case 2:o=t.readBool();e.setIsExtension(o);break;default:t.skipField()}}return e},proto.google.protobuf.UninterpretedOption.NamePart.prototype.serializeBinary=function(){var e=new r.BinaryWriter;return proto.google.protobuf.UninterpretedOption.NamePart.serializeBinaryToWriter(this,e),e.getResultBuffer()},proto.google.protobuf.UninterpretedOption.NamePart.serializeBinaryToWriter=function(e,t){var o=void 0;null!=(o=r.Message.getField(e,1))&&t.writeString(1,o),null!=(o=r.Message.getField(e,2))&&t.writeBool(2,o)},proto.google.protobuf.UninterpretedOption.NamePart.prototype.getNamePart=function(){return r.Message.getFieldWithDefault(this,1,"")},proto.google.protobuf.UninterpretedOption.NamePart.prototype.setNamePart=function(e){return r.Message.setField(this,1,e)},proto.google.protobuf.UninterpretedOption.NamePart.prototype.clearNamePart=function(){return r.Message.setField(this,1,void 0)},proto.google.protobuf.UninterpretedOption.NamePart.prototype.hasNamePart=function(){return null!=r.Message.getField(this,1)},proto.google.protobuf.UninterpretedOption.NamePart.prototype.getIsExtension=function(){return r.Message.getBooleanFieldWithDefault(this,2,!1)},proto.google.protobuf.UninterpretedOption.NamePart.prototype.setIsExtension=function(e){return r.Message.setField(this,2,e)},proto.google.protobuf.UninterpretedOption.NamePart.prototype.clearIsExtension=function(){return r.Message.setField(this,2,void 0)},proto.google.protobuf.UninterpretedOption.NamePart.prototype.hasIsExtension=function(){return null!=r.Message.getField(this,2)},proto.google.protobuf.UninterpretedOption.prototype.getNameList=function(){return r.Message.getRepeatedWrapperField(this,proto.google.protobuf.UninterpretedOption.NamePart,2)},proto.google.protobuf.UninterpretedOption.prototype.setNameList=function(e){return r.Message.setRepeatedWrapperField(this,2,e)},proto.google.protobuf.UninterpretedOption.prototype.addName=function(e,t){return r.Message.addToRepeatedWrapperField(this,2,e,proto.google.protobuf.UninterpretedOption.NamePart,t)},proto.google.protobuf.UninterpretedOption.prototype.clearNameList=function(){return this.setNameList([])},proto.google.protobuf.UninterpretedOption.prototype.getIdentifierValue=function(){return r.Message.getFieldWithDefault(this,3,"")},proto.google.protobuf.UninterpretedOption.prototype.setIdentifierValue=function(e){return r.Message.setField(this,3,e)},proto.google.protobuf.UninterpretedOption.prototype.clearIdentifierValue=function(){return r.Message.setField(this,3,void 0)},proto.google.protobuf.UninterpretedOption.prototype.hasIdentifierValue=function(){return null!=r.Message.getField(this,3)},proto.google.protobuf.UninterpretedOption.prototype.getPositiveIntValue=function(){return r.Message.getFieldWithDefault(this,4,0)},proto.google.protobuf.UninterpretedOption.prototype.setPositiveIntValue=function(e){return r.Message.setField(this,4,e)},proto.google.protobuf.UninterpretedOption.prototype.clearPositiveIntValue=function(){return r.Message.setField(this,4,void 0)},proto.google.protobuf.UninterpretedOption.prototype.hasPositiveIntValue=function(){return null!=r.Message.getField(this,4)},proto.google.protobuf.UninterpretedOption.prototype.getNegativeIntValue=function(){return r.Message.getFieldWithDefault(this,5,0)},proto.google.protobuf.UninterpretedOption.prototype.setNegativeIntValue=function(e){return r.Message.setField(this,5,e)},proto.google.protobuf.UninterpretedOption.prototype.clearNegativeIntValue=function(){return r.Message.setField(this,5,void 0)},proto.google.protobuf.UninterpretedOption.prototype.hasNegativeIntValue=function(){return null!=r.Message.getField(this,5)},proto.google.protobuf.UninterpretedOption.prototype.getDoubleValue=function(){return r.Message.getFloatingPointFieldWithDefault(this,6,0)},proto.google.protobuf.UninterpretedOption.prototype.setDoubleValue=function(e){return r.Message.setField(this,6,e)},proto.google.protobuf.UninterpretedOption.prototype.clearDoubleValue=function(){return r.Message.setField(this,6,void 0)},proto.google.protobuf.UninterpretedOption.prototype.hasDoubleValue=function(){return null!=r.Message.getField(this,6)},proto.google.protobuf.UninterpretedOption.prototype.getStringValue=function(){return r.Message.getFieldWithDefault(this,7,"")},proto.google.protobuf.UninterpretedOption.prototype.getStringValue_asB64=function(){return r.Message.bytesAsB64(this.getStringValue())},proto.google.protobuf.UninterpretedOption.prototype.getStringValue_asU8=function(){return r.Message.bytesAsU8(this.getStringValue())},proto.google.protobuf.UninterpretedOption.prototype.setStringValue=function(e){return r.Message.setField(this,7,e)},proto.google.protobuf.UninterpretedOption.prototype.clearStringValue=function(){return r.Message.setField(this,7,void 0)},proto.google.protobuf.UninterpretedOption.prototype.hasStringValue=function(){return null!=r.Message.getField(this,7)},proto.google.protobuf.UninterpretedOption.prototype.getAggregateValue=function(){return r.Message.getFieldWithDefault(this,8,"")},proto.google.protobuf.UninterpretedOption.prototype.setAggregateValue=function(e){return r.Message.setField(this,8,e)},proto.google.protobuf.UninterpretedOption.prototype.clearAggregateValue=function(){return r.Message.setField(this,8,void 0)},proto.google.protobuf.UninterpretedOption.prototype.hasAggregateValue=function(){return null!=r.Message.getField(this,8)},proto.google.protobuf.SourceCodeInfo.repeatedFields_=[1],r.Message.GENERATE_TO_OBJECT&&(proto.google.protobuf.SourceCodeInfo.prototype.toObject=function(e){return proto.google.protobuf.SourceCodeInfo.toObject(e,this)},proto.google.protobuf.SourceCodeInfo.toObject=function(e,t){var o={locationList:r.Message.toObjectList(t.getLocationList(),proto.google.protobuf.SourceCodeInfo.Location.toObject,e)};return e&&(o.$jspbMessageInstance=t),o}),proto.google.protobuf.SourceCodeInfo.deserializeBinary=function(e){var t=new r.BinaryReader(e),o=new proto.google.protobuf.SourceCodeInfo;return proto.google.protobuf.SourceCodeInfo.deserializeBinaryFromReader(o,t)},proto.google.protobuf.SourceCodeInfo.deserializeBinaryFromReader=function(e,t){for(;t.nextField()&&!t.isEndGroup();){switch(t.getFieldNumber()){case 1:var o=new proto.google.protobuf.SourceCodeInfo.Location;t.readMessage(o,proto.google.protobuf.SourceCodeInfo.Location.deserializeBinaryFromReader),e.addLocation(o);break;default:t.skipField()}}return e},proto.google.protobuf.SourceCodeInfo.prototype.serializeBinary=function(){var e=new r.BinaryWriter;return proto.google.protobuf.SourceCodeInfo.serializeBinaryToWriter(this,e),e.getResultBuffer()},proto.google.protobuf.SourceCodeInfo.serializeBinaryToWriter=function(e,t){var o;(o=e.getLocationList()).length>0&&t.writeRepeatedMessage(1,o,proto.google.protobuf.SourceCodeInfo.Location.serializeBinaryToWriter)},proto.google.protobuf.SourceCodeInfo.Location.repeatedFields_=[1,2,6],r.Message.GENERATE_TO_OBJECT&&(proto.google.protobuf.SourceCodeInfo.Location.prototype.toObject=function(e){return proto.google.protobuf.SourceCodeInfo.Location.toObject(e,this)},proto.google.protobuf.SourceCodeInfo.Location.toObject=function(e,t){var o,n={pathList:null==(o=r.Message.getRepeatedField(t,1))?void 0:o,spanList:null==(o=r.Message.getRepeatedField(t,2))?void 0:o,leadingComments:null==(o=r.Message.getField(t,3))?void 0:o,trailingComments:null==(o=r.Message.getField(t,4))?void 0:o,leadingDetachedCommentsList:null==(o=r.Message.getRepeatedField(t,6))?void 0:o};return e&&(n.$jspbMessageInstance=t),n}),proto.google.protobuf.SourceCodeInfo.Location.deserializeBinary=function(e){var t=new r.BinaryReader(e),o=new proto.google.protobuf.SourceCodeInfo.Location;return proto.google.protobuf.SourceCodeInfo.Location.deserializeBinaryFromReader(o,t)},proto.google.protobuf.SourceCodeInfo.Location.deserializeBinaryFromReader=function(e,t){for(;t.nextField()&&!t.isEndGroup();){switch(t.getFieldNumber()){case 1:for(var o=t.isDelimited()?t.readPackedInt32():[t.readInt32()],r=0;r<o.length;r++)e.addPath(o[r]);break;case 2:for(o=t.isDelimited()?t.readPackedInt32():[t.readInt32()],r=0;r<o.length;r++)e.addSpan(o[r]);break;case 3:var n=t.readString();e.setLeadingComments(n);break;case 4:n=t.readString();e.setTrailingComments(n);break;case 6:n=t.readString();e.addLeadingDetachedComments(n);break;default:t.skipField()}}return e},proto.google.protobuf.SourceCodeInfo.Location.prototype.serializeBinary=function(){var e=new r.BinaryWriter;return proto.google.protobuf.SourceCodeInfo.Location.serializeBinaryToWriter(this,e),e.getResultBuffer()},proto.google.protobuf.SourceCodeInfo.Location.serializeBinaryToWriter=function(e,t){var o=void 0;(o=e.getPathList()).length>0&&t.writePackedInt32(1,o),(o=e.getSpanList()).length>0&&t.writePackedInt32(2,o),null!=(o=r.Message.getField(e,3))&&t.writeString(3,o),null!=(o=r.Message.getField(e,4))&&t.writeString(4,o),(o=e.getLeadingDetachedCommentsList()).length>0&&t.writeRepeatedString(6,o)},proto.google.protobuf.SourceCodeInfo.Location.prototype.getPathList=function(){return r.Message.getRepeatedField(this,1)},proto.google.protobuf.SourceCodeInfo.Location.prototype.setPathList=function(e){return r.Message.setField(this,1,e||[])},proto.google.protobuf.SourceCodeInfo.Location.prototype.addPath=function(e,t){return r.Message.addToRepeatedField(this,1,e,t)},proto.google.protobuf.SourceCodeInfo.Location.prototype.clearPathList=function(){return this.setPathList([])},proto.google.protobuf.SourceCodeInfo.Location.prototype.getSpanList=function(){return r.Message.getRepeatedField(this,2)},proto.google.protobuf.SourceCodeInfo.Location.prototype.setSpanList=function(e){return r.Message.setField(this,2,e||[])},proto.google.protobuf.SourceCodeInfo.Location.prototype.addSpan=function(e,t){return r.Message.addToRepeatedField(this,2,e,t)},proto.google.protobuf.SourceCodeInfo.Location.prototype.clearSpanList=function(){return this.setSpanList([])},proto.google.protobuf.SourceCodeInfo.Location.prototype.getLeadingComments=function(){return r.Message.getFieldWithDefault(this,3,"")},proto.google.protobuf.SourceCodeInfo.Location.prototype.setLeadingComments=function(e){return r.Message.setField(this,3,e)},proto.google.protobuf.SourceCodeInfo.Location.prototype.clearLeadingComments=function(){return r.Message.setField(this,3,void 0)},proto.google.protobuf.SourceCodeInfo.Location.prototype.hasLeadingComments=function(){return null!=r.Message.getField(this,3)},proto.google.protobuf.SourceCodeInfo.Location.prototype.getTrailingComments=function(){return r.Message.getFieldWithDefault(this,4,"")},proto.google.protobuf.SourceCodeInfo.Location.prototype.setTrailingComments=function(e){return r.Message.setField(this,4,e)},proto.google.protobuf.SourceCodeInfo.Location.prototype.clearTrailingComments=function(){return r.Message.setField(this,4,void 0)},proto.google.protobuf.SourceCodeInfo.Location.prototype.hasTrailingComments=function(){return null!=r.Message.getField(this,4)},proto.google.protobuf.SourceCodeInfo.Location.prototype.getLeadingDetachedCommentsList=function(){return r.Message.getRepeatedField(this,6)},proto.google.protobuf.SourceCodeInfo.Location.prototype.setLeadingDetachedCommentsList=function(e){return r.Message.setField(this,6,e||[])},proto.google.protobuf.SourceCodeInfo.Location.prototype.addLeadingDetachedComments=function(e,t){return r.Message.addToRepeatedField(this,6,e,t)},proto.google.protobuf.SourceCodeInfo.Location.prototype.clearLeadingDetachedCommentsList=function(){return this.setLeadingDetachedCommentsList([])},proto.google.protobuf.SourceCodeInfo.prototype.getLocationList=function(){return r.Message.getRepeatedWrapperField(this,proto.google.protobuf.SourceCodeInfo.Location,1)},proto.google.protobuf.SourceCodeInfo.prototype.setLocationList=function(e){return r.Message.setRepeatedWrapperField(this,1,e)},proto.google.protobuf.SourceCodeInfo.prototype.addLocation=function(e,t){return r.Message.addToRepeatedWrapperField(this,1,e,proto.google.protobuf.SourceCodeInfo.Location,t)},proto.google.protobuf.SourceCodeInfo.prototype.clearLocationList=function(){return this.setLocationList([])},proto.google.protobuf.GeneratedCodeInfo.repeatedFields_=[1],r.Message.GENERATE_TO_OBJECT&&(proto.google.protobuf.GeneratedCodeInfo.prototype.toObject=function(e){return proto.google.protobuf.GeneratedCodeInfo.toObject(e,this)},proto.google.protobuf.GeneratedCodeInfo.toObject=function(e,t){var o={annotationList:r.Message.toObjectList(t.getAnnotationList(),proto.google.protobuf.GeneratedCodeInfo.Annotation.toObject,e)};return e&&(o.$jspbMessageInstance=t),o}),proto.google.protobuf.GeneratedCodeInfo.deserializeBinary=function(e){var t=new r.BinaryReader(e),o=new proto.google.protobuf.GeneratedCodeInfo;return proto.google.protobuf.GeneratedCodeInfo.deserializeBinaryFromReader(o,t)},proto.google.protobuf.GeneratedCodeInfo.deserializeBinaryFromReader=function(e,t){for(;t.nextField()&&!t.isEndGroup();){switch(t.getFieldNumber()){case 1:var o=new proto.google.protobuf.GeneratedCodeInfo.Annotation;t.readMessage(o,proto.google.protobuf.GeneratedCodeInfo.Annotation.deserializeBinaryFromReader),e.addAnnotation(o);break;default:t.skipField()}}return e},proto.google.protobuf.GeneratedCodeInfo.prototype.serializeBinary=function(){var e=new r.BinaryWriter;return proto.google.protobuf.GeneratedCodeInfo.serializeBinaryToWriter(this,e),e.getResultBuffer()},proto.google.protobuf.GeneratedCodeInfo.serializeBinaryToWriter=function(e,t){var o;(o=e.getAnnotationList()).length>0&&t.writeRepeatedMessage(1,o,proto.google.protobuf.GeneratedCodeInfo.Annotation.serializeBinaryToWriter)},proto.google.protobuf.GeneratedCodeInfo.Annotation.repeatedFields_=[1],r.Message.GENERATE_TO_OBJECT&&(proto.google.protobuf.GeneratedCodeInfo.Annotation.prototype.toObject=function(e){return proto.google.protobuf.GeneratedCodeInfo.Annotation.toObject(e,this)},proto.google.protobuf.GeneratedCodeInfo.Annotation.toObject=function(e,t){var o,n={pathList:null==(o=r.Message.getRepeatedField(t,1))?void 0:o,sourceFile:null==(o=r.Message.getField(t,2))?void 0:o,begin:null==(o=r.Message.getField(t,3))?void 0:o,end:null==(o=r.Message.getField(t,4))?void 0:o};return e&&(n.$jspbMessageInstance=t),n}),proto.google.protobuf.GeneratedCodeInfo.Annotation.deserializeBinary=function(e){var t=new r.BinaryReader(e),o=new proto.google.protobuf.GeneratedCodeInfo.Annotation;return proto.google.protobuf.GeneratedCodeInfo.Annotation.deserializeBinaryFromReader(o,t)},proto.google.protobuf.GeneratedCodeInfo.Annotation.deserializeBinaryFromReader=function(e,t){for(;t.nextField()&&!t.isEndGroup();){switch(t.getFieldNumber()){case 1:for(var o=t.isDelimited()?t.readPackedInt32():[t.readInt32()],r=0;r<o.length;r++)e.addPath(o[r]);break;case 2:var n=t.readString();e.setSourceFile(n);break;case 3:n=t.readInt32();e.setBegin(n);break;case 4:n=t.readInt32();e.setEnd(n);break;default:t.skipField()}}return e},proto.google.protobuf.GeneratedCodeInfo.Annotation.prototype.serializeBinary=function(){var e=new r.BinaryWriter;return proto.google.protobuf.GeneratedCodeInfo.Annotation.serializeBinaryToWriter(this,e),e.getResultBuffer()},proto.google.protobuf.GeneratedCodeInfo.Annotation.serializeBinaryToWriter=function(e,t){var o=void 0;(o=e.getPathList()).length>0&&t.writePackedInt32(1,o),null!=(o=r.Message.getField(e,2))&&t.writeString(2,o),null!=(o=r.Message.getField(e,3))&&t.writeInt32(3,o),null!=(o=r.Message.getField(e,4))&&t.writeInt32(4,o)},proto.google.protobuf.GeneratedCodeInfo.Annotation.prototype.getPathList=function(){return r.Message.getRepeatedField(this,1)},proto.google.protobuf.GeneratedCodeInfo.Annotation.prototype.setPathList=function(e){return r.Message.setField(this,1,e||[])},proto.google.protobuf.GeneratedCodeInfo.Annotation.prototype.addPath=function(e,t){return r.Message.addToRepeatedField(this,1,e,t)},proto.google.protobuf.GeneratedCodeInfo.Annotation.prototype.clearPathList=function(){return this.setPathList([])},proto.google.protobuf.GeneratedCodeInfo.Annotation.prototype.getSourceFile=function(){return r.Message.getFieldWithDefault(this,2,"")},proto.google.protobuf.GeneratedCodeInfo.Annotation.prototype.setSourceFile=function(e){return r.Message.setField(this,2,e)},proto.google.protobuf.GeneratedCodeInfo.Annotation.prototype.clearSourceFile=function(){return r.Message.setField(this,2,void 0)},proto.google.protobuf.GeneratedCodeInfo.Annotation.prototype.hasSourceFile=function(){return null!=r.Message.getField(this,2)},proto.google.protobuf.GeneratedCodeInfo.Annotation.prototype.getBegin=function(){return r.Message.getFieldWithDefault(this,3,0)},proto.google.protobuf.GeneratedCodeInfo.Annotation.prototype.setBegin=function(e){return r.Message.setField(this,3,e)},proto.google.protobuf.GeneratedCodeInfo.Annotation.prototype.clearBegin=function(){return r.Message.setField(this,3,void 0)},proto.google.protobuf.GeneratedCodeInfo.Annotation.prototype.hasBegin=function(){return null!=r.Message.getField(this,3)},proto.google.protobuf.GeneratedCodeInfo.Annotation.prototype.getEnd=function(){return r.Message.getFieldWithDefault(this,4,0)},proto.google.protobuf.GeneratedCodeInfo.Annotation.prototype.setEnd=function(e){return r.Message.setField(this,4,e)},proto.google.protobuf.GeneratedCodeInfo.Annotation.prototype.clearEnd=function(){return r.Message.setField(this,4,void 0)},proto.google.protobuf.GeneratedCodeInfo.Annotation.prototype.hasEnd=function(){return null!=r.Message.getField(this,4)},proto.google.protobuf.GeneratedCodeInfo.prototype.getAnnotationList=function(){return r.Message.getRepeatedWrapperField(this,proto.google.protobuf.GeneratedCodeInfo.Annotation,1)},proto.google.protobuf.GeneratedCodeInfo.prototype.setAnnotationList=function(e){return r.Message.setRepeatedWrapperField(this,1,e)},proto.google.protobuf.GeneratedCodeInfo.prototype.addAnnotation=function(e,t){return r.Message.addToRepeatedWrapperField(this,1,e,proto.google.protobuf.GeneratedCodeInfo.Annotation,t)},proto.google.protobuf.GeneratedCodeInfo.prototype.clearAnnotationList=function(){return this.setAnnotationList([])},n.object.extend(t,proto.google.protobuf)},function(e,t,o){var r=o(2),n=o(1).grpc,i=function(){function e(){}return e.serviceName="proto.rpc.examples.echo.v1.EchoService",e}();function s(e,t){this.serviceHost=e,this.options=t||{}}i.Echo={methodName:"Echo",service:i,requestStream:!1,responseStream:!1,requestType:r.EchoRequest,responseType:r.EchoResponse},i.EchoMultiple={methodName:"EchoMultiple",service:i,requestStream:!1,responseStream:!0,requestType:r.EchoMultipleRequest,responseType:r.EchoMultipleResponse},i.EchoBiDi={methodName:"EchoBiDi",service:i,requestStream:!0,responseStream:!0,requestType:r.EchoBiDiRequest,responseType:r.EchoBiDiResponse},t.EchoService=i,s.prototype.echo=function(e,t,o){2===arguments.length&&(o=arguments[1]);var r=n.unary(i.Echo,{request:e,host:this.serviceHost,metadata:t,transport:this.options.transport,debug:this.options.debug,onEnd:function(e){if(o)if(e.status!==n.Code.OK){var t=new Error(e.statusMessage);t.code=e.status,t.metadata=e.trailers,o(t,null)}else o(null,e.message)}});return{cancel:function(){o=null,r.close()}}},s.prototype.echoMultiple=function(e,t){var o={data:[],end:[],status:[]},r=n.invoke(i.EchoMultiple,{request:e,host:this.serviceHost,metadata:t,transport:this.options.transport,debug:this.options.debug,onMessage:function(e){o.data.forEach((function(t){t(e)}))},onEnd:function(e,t,r){o.status.forEach((function(o){o({code:e,details:t,metadata:r})})),o.end.forEach((function(o){o({code:e,details:t,metadata:r})})),o=null}});return{on:function(e,t){return o[e].push(t),this},cancel:function(){o=null,r.close()}}},s.prototype.echoBiDi=function(e){var t={data:[],end:[],status:[]},o=n.client(i.EchoBiDi,{host:this.serviceHost,metadata:e,transport:this.options.transport});return o.onEnd((function(e,o,r){t.status.forEach((function(t){t({code:e,details:o,metadata:r})})),t.end.forEach((function(t){t({code:e,details:o,metadata:r})})),t=null})),o.onMessage((function(e){t.data.forEach((function(t){t(e)}))})),o.start(e),{on:function(e,o){return t[e].push(o),this},write:function(e){return o.send(e),this},end:function(){o.finishSend()},cancel:function(){t=null,o.close()}}},t.EchoServiceClient=s},function(e,t,o){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.dial=void 0;var r=o(17);Object.defineProperty(t,"dial",{enumerable:!0,get:function(){return r.dial}})},function(e,t,o){"use strict";var r=this&&this.__awaiter||function(e,t,o,r){return new(o||(o=Promise))((function(n,i){function s(e){try{g(r.next(e))}catch(e){i(e)}}function a(e){try{g(r.throw(e))}catch(e){i(e)}}function g(e){var t;e.done?n(e.value):(t=e.value,t instanceof o?t:new o((function(e){e(t)}))).then(s,a)}g((r=r.apply(e,t||[])).next())}))},n=this&&this.__generator||function(e,t){var o,r,n,i,s={label:0,sent:function(){if(1&n[0])throw n[1];return n[1]},trys:[],ops:[]};return i={next:a(0),throw:a(1),return:a(2)},"function"==typeof Symbol&&(i[Symbol.iterator]=function(){return this}),i;function a(i){return function(a){return function(i){if(o)throw new TypeError("Generator is already executing.");for(;s;)try{if(o=1,r&&(n=2&i[0]?r.return:i[0]?r.throw||((n=r.return)&&n.call(r),0):r.next)&&!(n=n.call(r,i[1])).done)return n;switch(r=0,n&&(i=[2&i[0],n.value]),i[0]){case 0:case 1:n=i;break;case 4:return s.label++,{value:i[1],done:!1};case 5:s.label++,r=i[1],i=[0];continue;case 7:i=s.ops.pop(),s.trys.pop();continue;default:if(!(n=s.trys,(n=n.length>0&&n[n.length-1])||6!==i[0]&&2!==i[0])){s=0;continue}if(3===i[0]&&(!n||i[1]>n[0]&&i[1]<n[3])){s.label=i[1];break}if(6===i[0]&&s.label<n[1]){s.label=n[1],n=i;break}if(n&&s.label<n[2]){s.label=n[2],s.ops.push(i);break}n[2]&&s.ops.pop(),s.trys.pop();continue}i=t.call(e,s)}catch(e){i=[6,e],r=0}finally{o=n=0}if(5&i[0])throw i[1];return{value:i[0]?i[1]:void 0,done:!0}}([i,a])}}};Object.defineProperty(t,"__esModule",{value:!0}),t.dial=void 0;var i=o(1),s=o(5),a=o(19),g=o(20),p=o(25);function l(e,t,o){return r(this,void 0,void 0,(function(){var r,g,p,l;return n(this,(function(n){switch(n.label){case 0:return(r=new s.CallRequest).setSdp(o),l=new Promise((function(e,t){g=e,p=t})),i.grpc.unary(a.SignalingService.Call,{request:r,metadata:{"rpc-host":t},host:e,onEnd:function(e){var t=e.status,o=e.statusMessage,r=e.message;t===i.grpc.Code.OK&&r?g(r):p(o)}}),[4,l];case 1:return[2,n.sent()]}}))}))}t.dial=function(e,t,o){return r(this,void 0,void 0,(function(){var r,i,s,a,u,c,d;return n(this,(function(n){switch(n.label){case 0:return[4,p.newPeerConnectionForClient(o)];case 1:return r=n.sent(),i=r.pc,s=r.dc,a=btoa(JSON.stringify(i.localDescription)),[4,l(e,t,a)];case 2:return u=n.sent(),c=new RTCSessionDescription(JSON.parse(atob(u.getSdp()))),i.setRemoteDescription(c),[4,(d=new g.ClientChannel(i,s)).ready];case 3:return n.sent(),[2,d]}}))}))}},function(e,t,o){var r=o(0),n=r,i=Function("return this")();n.exportSymbol("proto.google.protobuf.Any",null,i),proto.google.protobuf.Any=function(e){r.Message.initialize(this,e,0,-1,null,null)},n.inherits(proto.google.protobuf.Any,r.Message),n.DEBUG&&!COMPILED&&(proto.google.protobuf.Any.displayName="proto.google.protobuf.Any"),r.Message.GENERATE_TO_OBJECT&&(proto.google.protobuf.Any.prototype.toObject=function(e){return proto.google.protobuf.Any.toObject(e,this)},proto.google.protobuf.Any.toObject=function(e,t){var o={typeUrl:r.Message.getFieldWithDefault(t,1,""),value:t.getValue_asB64()};return e&&(o.$jspbMessageInstance=t),o}),proto.google.protobuf.Any.deserializeBinary=function(e){var t=new r.BinaryReader(e),o=new proto.google.protobuf.Any;return proto.google.protobuf.Any.deserializeBinaryFromReader(o,t)},proto.google.protobuf.Any.deserializeBinaryFromReader=function(e,t){for(;t.nextField()&&!t.isEndGroup();){switch(t.getFieldNumber()){case 1:var o=t.readString();e.setTypeUrl(o);break;case 2:o=t.readBytes();e.setValue(o);break;default:t.skipField()}}return e},proto.google.protobuf.Any.prototype.serializeBinary=function(){var e=new r.BinaryWriter;return proto.google.protobuf.Any.serializeBinaryToWriter(this,e),e.getResultBuffer()},proto.google.protobuf.Any.serializeBinaryToWriter=function(e,t){var o=void 0;(o=e.getTypeUrl()).length>0&&t.writeString(1,o),(o=e.getValue_asU8()).length>0&&t.writeBytes(2,o)},proto.google.protobuf.Any.prototype.getTypeUrl=function(){return r.Message.getFieldWithDefault(this,1,"")},proto.google.protobuf.Any.prototype.setTypeUrl=function(e){return r.Message.setProto3StringField(this,1,e)},proto.google.protobuf.Any.prototype.getValue=function(){return r.Message.getFieldWithDefault(this,2,"")},proto.google.protobuf.Any.prototype.getValue_asB64=function(){return r.Message.bytesAsB64(this.getValue())},proto.google.protobuf.Any.prototype.getValue_asU8=function(){return r.Message.bytesAsU8(this.getValue())},proto.google.protobuf.Any.prototype.setValue=function(e){return r.Message.setProto3BytesField(this,2,e)},n.object.extend(t,proto.google.protobuf),proto.google.protobuf.Any.prototype.getTypeName=function(){return this.getTypeUrl().split("/").pop()},proto.google.protobuf.Any.prototype.pack=function(e,t,o){o||(o="type.googleapis.com/"),"/"!=o.substr(-1)?this.setTypeUrl(o+"/"+t):this.setTypeUrl(o+t),this.setValue(e)},proto.google.protobuf.Any.prototype.unpack=function(e,t){return this.getTypeName()==t?e(this.getValue_asU8()):null}},function(e,t,o){var r=o(5),n=o(1).grpc,i=function(){function e(){}return e.serviceName="proto.rpc.webrtc.v1.SignalingService",e}();function s(e,t){this.serviceHost=e,this.options=t||{}}i.Call={methodName:"Call",service:i,requestStream:!1,responseStream:!1,requestType:r.CallRequest,responseType:r.CallResponse},i.Answer={methodName:"Answer",service:i,requestStream:!0,responseStream:!0,requestType:r.AnswerResponse,responseType:r.AnswerRequest},t.SignalingService=i,s.prototype.call=function(e,t,o){2===arguments.length&&(o=arguments[1]);var r=n.unary(i.Call,{request:e,host:this.serviceHost,metadata:t,transport:this.options.transport,debug:this.options.debug,onEnd:function(e){if(o)if(e.status!==n.Code.OK){var t=new Error(e.statusMessage);t.code=e.status,t.metadata=e.trailers,o(t,null)}else o(null,e.message)}});return{cancel:function(){o=null,r.close()}}},s.prototype.answer=function(e){var t={data:[],end:[],status:[]},o=n.client(i.Answer,{host:this.serviceHost,metadata:e,transport:this.options.transport});return o.onEnd((function(e,o,r){t.status.forEach((function(t){t({code:e,details:o,metadata:r})})),t.end.forEach((function(t){t({code:e,details:o,metadata:r})})),t=null})),o.onMessage((function(e){t.data.forEach((function(t){t(e)}))})),o.start(e),{on:function(e,o){return t[e].push(o),this},write:function(e){return o.send(e),this},end:function(){o.finishSend()},cancel:function(){t=null,o.close()}}},t.SignalingServiceClient=s},function(e,t,o){"use strict";var r,n=this&&this.__extends||(r=function(e,t){return(r=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var o in t)Object.prototype.hasOwnProperty.call(t,o)&&(e[o]=t[o])})(e,t)},function(e,t){function o(){this.constructor=e}r(e,t),e.prototype=null===t?Object.create(t):(o.prototype=t.prototype,new o)});Object.defineProperty(t,"__esModule",{value:!0}),t.ClientChannel=void 0;var i=o(7),s=o(22),a=o(23),g=function(e){function t(t,o){var r=e.call(this,t,o)||this;return r.streamIDCounter=0,r.streams={},o.onmessage=function(e){return r.onChannelMessage(e)},r}return n(t,e),t.prototype.transportFactory=function(){var e=this;return function(t){return e.newStream(e.nextStreamID(),t)}},t.prototype.onChannelMessage=function(e){var t;try{t=i.Response.deserializeBinary(e.data)}catch(e){return void console.error("error deserializing message",e)}var o=t.getStream();if(void 0!==o){var r=o.getId(),n=this.streams[r];void 0!==n?n.cs.onResponse(t):console.error("no stream for id; discarding","id",r)}else console.error("no stream id; discarding")},t.prototype.nextStreamID=function(){var e=new i.Stream;return e.setId(this.streamIDCounter++),e},t.prototype.newStream=function(e,t){var o=this,r=this.streams[e.getId()];if(void 0===r){if(Object.keys(this.streams).length>256)throw new Error("stream limit hit");r={cs:new a.ClientStream(this,e,(function(e){return o.removeStreamByID(e)}),t)},this.streams[e.getId()]=r}return r.cs},t.prototype.removeStreamByID=function(e){delete this.streams[e]},t.prototype.writeHeaders=function(e,t){var o=new i.Request;o.setStream(e),o.setHeaders(t),this.write(o)},t.prototype.writeMessage=function(e,t){var o=new i.Request;o.setStream(e),o.setMessage(t),this.write(o)},t}(s.BaseChannel);t.ClientChannel=g},function(e,t,o){var r=o(0),n=r,i=Function("return this")();n.exportSymbol("proto.google.protobuf.Duration",null,i),proto.google.protobuf.Duration=function(e){r.Message.initialize(this,e,0,-1,null,null)},n.inherits(proto.google.protobuf.Duration,r.Message),n.DEBUG&&!COMPILED&&(proto.google.protobuf.Duration.displayName="proto.google.protobuf.Duration"),r.Message.GENERATE_TO_OBJECT&&(proto.google.protobuf.Duration.prototype.toObject=function(e){return proto.google.protobuf.Duration.toObject(e,this)},proto.google.protobuf.Duration.toObject=function(e,t){var o={seconds:r.Message.getFieldWithDefault(t,1,0),nanos:r.Message.getFieldWithDefault(t,2,0)};return e&&(o.$jspbMessageInstance=t),o}),proto.google.protobuf.Duration.deserializeBinary=function(e){var t=new r.BinaryReader(e),o=new proto.google.protobuf.Duration;return proto.google.protobuf.Duration.deserializeBinaryFromReader(o,t)},proto.google.protobuf.Duration.deserializeBinaryFromReader=function(e,t){for(;t.nextField()&&!t.isEndGroup();){switch(t.getFieldNumber()){case 1:var o=t.readInt64();e.setSeconds(o);break;case 2:o=t.readInt32();e.setNanos(o);break;default:t.skipField()}}return e},proto.google.protobuf.Duration.prototype.serializeBinary=function(){var e=new r.BinaryWriter;return proto.google.protobuf.Duration.serializeBinaryToWriter(this,e),e.getResultBuffer()},proto.google.protobuf.Duration.serializeBinaryToWriter=function(e,t){var o=void 0;0!==(o=e.getSeconds())&&t.writeInt64(1,o),0!==(o=e.getNanos())&&t.writeInt32(2,o)},proto.google.protobuf.Duration.prototype.getSeconds=function(){return r.Message.getFieldWithDefault(this,1,0)},proto.google.protobuf.Duration.prototype.setSeconds=function(e){return r.Message.setProto3IntField(this,1,e)},proto.google.protobuf.Duration.prototype.getNanos=function(){return r.Message.getFieldWithDefault(this,2,0)},proto.google.protobuf.Duration.prototype.setNanos=function(e){return r.Message.setProto3IntField(this,2,e)},n.object.extend(t,proto.google.protobuf)},function(e,t,o){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.BaseChannel=void 0;var r=function(){function e(e,t){var o=this;this.maxDataChannelSize=16384,this.peerConn=e,this.dataChannel=t,this.ready=new Promise((function(e){o.pResolve=e})),t.onopen=function(){return o.onChannelOpen()},t.onclose=function(){return o.onChannelClose()},t.onerror=function(e){return o.onChannelError(e)},e.oniceconnectionstatechange=function(){return console.log(e.iceConnectionState)}}return e.prototype.close=function(){this.closeWithReason(void 0)},e.prototype.isClosed=function(){return this.closed},e.prototype.isClosedReason=function(){return this.closedReason},e.prototype.closeWithReason=function(e){this.closed||(this.closed=!0,this.closedReason=e,this.peerConn.close())},e.prototype.onChannelOpen=function(){this.pResolve(void 0)},e.prototype.onChannelClose=function(){this.closeWithReason(new Error("data channel closed"))},e.prototype.onChannelError=function(e){console.error("channel error",e),this.closeWithReason(e.error)},e.prototype.write=function(e){this.dataChannel.send(e.serializeBinary())},e}();t.BaseChannel=r},function(e,t,o){"use strict";var r,n=this&&this.__extends||(r=function(e,t){return(r=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var o in t)Object.prototype.hasOwnProperty.call(t,o)&&(e[o]=t[o])})(e,t)},function(e,t){function o(){this.constructor=e}r(e,t),e.prototype=null===t?Object.create(t):(o.prototype=t.prototype,new o)});Object.defineProperty(t,"__esModule",{value:!0}),t.encodeASCII=t.ClientStream=void 0;var i=o(1),s=o(7),a=o(24),g=function(e){function t(t,o,r,n){var i=e.call(this,o,r,n)||this;return i.headersReceived=!1,i.trailersReceived=!1,i.channel=t,i}return n(t,e),t.prototype.start=function(e){var t="/"+this.opts.methodDefinition.service.serviceName+"/"+this.opts.methodDefinition.methodName,o=new s.RequestHeaders;o.setMethod(t),o.setMetadata(l(e));try{this.channel.writeHeaders(this.stream,o)}catch(e){console.error("error writing headers",e),this.closeWithRecvError(e)}},t.prototype.sendMessage=function(e){e?this.writeMessage(!1,e.slice(5)):this.writeMessage(!1,void 0)},t.prototype.finishSend=function(){this.opts.methodDefinition.requestStream&&this.writeMessage(!0,void 0)},t.prototype.writeMessage=function(e,t){try{if(!t||0==t.length)return(o=new s.RequestMessage).setHasMessage(!!t),(new s.PacketMessage).setEom(!0),o.setEos(e),void this.channel.writeMessage(this.stream,o);for(;0!==t.length;){var o,r=Math.min(t.length,16373),n=new s.PacketMessage;n.setData(t.slice(0,r)),0===(t=t.slice(r)).length&&n.setEom(!0),(o=new s.RequestMessage).setHasMessage(!!t),o.setPacketMessage(n),o.setEos(e),this.channel.writeMessage(this.stream,o)}}catch(e){console.error("error writing message",e),this.closeWithRecvError(e)}},t.prototype.onResponse=function(e){switch(e.getTypeCase()){case s.Response.TypeCase.HEADERS:if(this.headersReceived)return void this.closeWithRecvError(new Error("headers already received"));if(this.trailersReceived)return void this.closeWithRecvError(new Error("headers received after trailers"));this.processHeaders(e.getHeaders());break;case s.Response.TypeCase.MESSAGE:if(!this.headersReceived)return void this.closeWithRecvError(new Error("headers not yet received"));if(this.trailersReceived)return void this.closeWithRecvError(new Error("headers received after trailers"));this.processMessage(e.getMessage());break;case s.Response.TypeCase.TRAILERS:this.processTrailers(e.getTrailers());break;default:console.error("unknown response type",e.getTypeCase())}},t.prototype.processHeaders=function(e){this.headersReceived=!0,this.opts.onHeaders(u(e.getMetadata()),200)},t.prototype.processMessage=function(t){var o=e.prototype.processPacketMessage.call(this,t.getPacketMessage());if(o){var r=new ArrayBuffer(o.length+5);new DataView(r,1,4).setUint32(0,o.length,!1),new Uint8Array(r,5).set(o),this.opts.onChunk(new Uint8Array(r))}},t.prototype.processTrailers=function(e){this.trailersReceived=!0;var t,o,r=u(e.getMetadata());e.getStatus()?(t=e.getStatus().getCode(),o=e.getStatus().getMessage(),r.set("grpc-status",e.getStatus().getCode()),r.set("grpc-message",e.getStatus().getMessage())):(t=0,r.set("grpc-status","0"),o="");var n=function(e){var t="";return e.forEach((function(e,o){t+=e+": "+o.join(", ")+"\r\n"})),p(t)}(r),i=new ArrayBuffer(n.length+5);new DataView(i,0,1).setUint8(0,128),new DataView(i,1,4).setUint32(0,n.length,!1),new Uint8Array(i,5).set(n),this.opts.onChunk(new Uint8Array(i)),0!==t?this.closeWithRecvError(new Error("Code="+t+" Message="+o)):this.closeWithRecvError()},t}(a.BaseStream);function p(e){for(var t,o,r=new Uint8Array(e.length),n=0;n!==e.length;++n){var i=e.charCodeAt(n);if(!(9===(t=o=i)||10===t||13===t||o>=32&&o<=126))throw new Error("Metadata contains invalid ASCII");r[n]=i}return r}t.ClientStream=g,t.encodeASCII=p;var l=function(e){if(e){var t=new s.Metadata,o=t.getMdMap();if(e.forEach((function(e,t){var r=new s.Strings;r.setValuesList(t),o.set(e,r)})),0!==t.getMdMap().getLength())return t}},u=function(e){var t=new i.grpc.Metadata;return e&&e.getMdMap().forEach((function(e,o){return t.append(o,e.getValuesList())})),t}},function(e,t,o){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.BaseStream=void 0;var r=function(){function e(e,t,o){this.closed=!1,this.packetBuf=[],this.packetBufSize=0,this.stream=e,this.onDone=t,this.opts=o}return e.prototype.cancel=function(){this.opts.debug&&console.debug("cancel")},e.prototype.closeWithRecvError=function(e){this.closed||(this.closed=!0,this.err=e,this.cancel(),this.onDone(this.stream.getId()),this.opts.onEnd(this.err))},e.prototype.processPacketMessage=function(e){var t=e.getData_asU8();if(0!==t.length||!e.getEom()){if(t.length+this.packetBufSize>1<<24)return this.packetBuf.length=0,this.packetBufSize=0,void console.error("message size larger than max 16777216; discarding");if(this.packetBuf.push(t),this.packetBufSize+=t.length,e.getEom()){for(var o=new Uint8Array(this.packetBufSize),r=0,n=0;n<this.packetBuf.length;n++){var i=this.packetBuf[n];o.set(i,r),r+=i.length}return this.packetBuf.length=0,this.packetBufSize=0,o}}},e}();t.BaseStream=r},function(e,t,o){"use strict";var r=this&&this.__awaiter||function(e,t,o,r){return new(o||(o=Promise))((function(n,i){function s(e){try{g(r.next(e))}catch(e){i(e)}}function a(e){try{g(r.throw(e))}catch(e){i(e)}}function g(e){var t;e.done?n(e.value):(t=e.value,t instanceof o?t:new o((function(e){e(t)}))).then(s,a)}g((r=r.apply(e,t||[])).next())}))},n=this&&this.__generator||function(e,t){var o,r,n,i,s={label:0,sent:function(){if(1&n[0])throw n[1];return n[1]},trys:[],ops:[]};return i={next:a(0),throw:a(1),return:a(2)},"function"==typeof Symbol&&(i[Symbol.iterator]=function(){return this}),i;function a(i){return function(a){return function(i){if(o)throw new TypeError("Generator is already executing.");for(;s;)try{if(o=1,r&&(n=2&i[0]?r.return:i[0]?r.throw||((n=r.return)&&n.call(r),0):r.next)&&!(n=n.call(r,i[1])).done)return n;switch(r=0,n&&(i=[2&i[0],n.value]),i[0]){case 0:case 1:n=i;break;case 4:return s.label++,{value:i[1],done:!1};case 5:s.label++,r=i[1],i=[0];continue;case 7:i=s.ops.pop(),s.trys.pop();continue;default:if(!(n=s.trys,(n=n.length>0&&n[n.length-1])||6!==i[0]&&2!==i[0])){s=0;continue}if(3===i[0]&&(!n||i[1]>n[0]&&i[1]<n[3])){s.label=i[1];break}if(6===i[0]&&s.label<n[1]){s.label=n[1],n=i;break}if(n&&s.label<n[2]){s.label=n[2],s.ops.push(i);break}n[2]&&s.ops.pop(),s.trys.pop();continue}i=t.call(e,s)}catch(e){i=[6,e],r=0}finally{o=n=0}if(5&i[0])throw i[1];return{value:i[0]?i[1]:void 0,done:!0}}([i,a])}}};Object.defineProperty(t,"__esModule",{value:!0}),t.newPeerConnectionForClient=void 0,t.newPeerConnectionForClient=function(e){return r(this,void 0,void 0,(function(){var t,o,i,s,a,g=this;return n(this,(function(p){switch(p.label){case 0:return e||(e={iceServers:[{urls:"stun:stun.viam.cloud"}]}),t=new RTCPeerConnection(e),i=new Promise((function(e){o=e})),(s=t.createDataChannel("data",{id:0,negotiated:!0,ordered:!0})).binaryType="arraybuffer",t.onicecandidate=function(e){return r(g,void 0,void 0,(function(){return n(this,(function(r){return null!==e.candidate||o({pc:t,dc:s}),[2]}))}))},[4,t.createOffer()];case 1:a=p.sent();try{t.setLocalDescription(a)}catch(e){console.error(e)}return[2,i]}}))}))}}])}));
//# sourceMappingURL=data:application/json;charset=utf-8;base64,